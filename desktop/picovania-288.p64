picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIyIDE0OjEwOjE2Iixtb2RpZmllZD0iMjAyNS0w
Ni0yNiAwNToxMTo0NiIscmV2aXNpb249NTAxNTFdXWx6NACTMAAAwmoAAPMhe1swXT17Ym1wPXB4
dQBDIAgIBPACBxAHQBdQF0AHEAfwAixmbGFncz0wLHBhbl94CADKeT0wLHpvb209OH0sPgCf8RQw
URBhAGEAOAAc-xcxAFEACQARABEACQABEAEACSAZEAkQCYAPGQAODx8QDgAOAA4gDVYAHULxEABh
AgAPOQAc-wlRAGEAUSBBIEEACQAxEAkAMQAZACEQCRCAAB0QGHwALxBRNwAc9AEgCB8YCDAIDhII
EAgCAA4CBwBBAAgCEA0AEBAFAE9QCA5QWQAZXxAQBPDwigAchHARMEEQURAhCAAPgAEeDzkAJP8Q
DxkAHjAOAA6gDlAOIA4wDgABEA8fDAANAAEgDCARUE4AHACFAYAAURBBAAkQMQQAn0AhAA8ZICEA
DkgAHTEBEBmgAlAJAAkACQwA-wgwCQAJkA8ZEA4fHxANAA4dIA0ADgANIFgAHCAQUSMBMQAREP4C
byABEAnwCUMAHCIwMQIAX9ARQCFAbgEdI-AwMQAvMTYyAB4PMQAUUAYEBg8UBQDwAh8GAAQABgAE
DxQAJAA0Dx8ECwCzBAAOJgA2HxkEBh0DAE8AJQAlYwAc8QARIAwAIQABICEAAQABAEH1AS-xA0gB
Hf8OEQAPGTARIAEgAQAOABEQAQAPHyEwDjEwMQAMAFHZAR3xCQ8fAA8ZHx8gDgAPGR4gDgANAA4N
EA4ADQwAPw7wDE8AHP4B8A4PGVAeUB5AARABMBEAAT8AD4QBRS82NWQAFIEYUA8YAhhQEgMA3x4Q
CAIeAg4gCCIIMCi8BR3xAwYFDxQGBQ4GBQYFDxUGBQ0GBQ4AEAAIABcACAARJgYAAQ4AIxYFFQAP
qAEeAmoAMR4PFQgAIR0EcAATHgcAAnkAER1fACIeABQAAgcAHx1oAB1BFQQfFAUAcn8VDxQPFS8N
AAMJADUPFI8gAAgqAA9lABwRQbgGAAIDL-ESOwAc8wEAHxlQDg8fYA0OUB1QHUAOAwAfMEcAHPAF
EA8VBw4HDiAOJw4gDg0HDjAODx0GABEMBQBAFw4gDh8AAOAFD1EHHUFAHxVATQD-CyAODw0nEA4P
HRc_DRcOEDcOIA4XDjAOBw5AUgAcsfACMTABFgEwARcBCAAvMZCoAh4AcQLPBgVQFgVABgVQBgXw
VwYfAAwCcAYFHxQAAQ4JAPICHgABHQYFHQEuBgUeAS4WBQ4QADEAAR4cAE8eDQQe4QIeD20CEXgv
FC8VDxQ-EwADBQAPaAgd8A0VUYABXxwRUAEuHAEuETABDhwODAE_DAEAEV4MFADwCh4BDA4MHhwx
DA4MDgE_LBEOIR4BDmwRDgECAJEeXBEOER4BPkwQABEAEAAAFwfgLhwODBEOUAEuDB4MEWArAF8M
AQ4MAJwAHPARAA8cATABPjARDgEwARweIA4sARAMXhARLBEOHD4MEB5dAPEMTiABXA4BLgwQAQxR
DAEeDGBBDgEMgDEMQTBhxQDwC64cAb4RDD4BbgEQIQ4xHgEOAVAxDBEMAYABBgAvDAExAx3-BfAA
fxUHPx0NFw8VVw4XPhcuEC5wuwMeIBVAAwNRNw4gHidyAyEXHiUDAn0DP0AOB5cCHf8SoBdABx8S
ByAHPgcABx4XHgcODw4HEAcNDg0HMAcNB1AHogAfIAAuxwowDi8OBgD-ER0OCA0IHgI4Dg0OMg0C
DQgOAg0CDhgCKA4IAg4ILggCRgMfAb0CEwHLApIBHg8VBC4AAV0xAwQGABBdCAAfLj8DHg4ZAw-I
BQoPOQMi8wEICAQvFAQPFR8UAV8VAQAfDADxAQAeBA8VHgEAXQEALgQNHgEFAE89Dg0BUgcdIXAv
IwL-BwAuBwYlBgcFFyYHBgceBwYHFQ4QLqBMACKRLhAHBgUGBwYVTABvVQcGQC5wjwMckEABDxwM
DxARgM4DgB8cDnABDhwBBwD-aA0eER4BHTABDQ4NUQ0MMAEcDQENHBEdMAEMDgENDA0cAQ0MQBEN
DBENDgEdQAEMIQ0BDQENDFAcAQ0RDB0MUAEMDQ4BDA0BDQ5QAQ0OEQ0RDQ5ADg0BDB4xDUAOAQ4A
AR4BAAENMA4cDgABDgwNAVAOHA0eARwNuwMdQA8SBzAaAwAbA-8GDg0HDQ4XDg0XDT4NBwAHDR4N
ByA3Qw8NLDE2UwAj8BEqAzAuCA8qA78CCA0OCC0CDQINEksAHQQNA2MAAV8VAAGUAhEAGwMFDAMB
BQBfAAENDj1eAA0PzwgvAmIGTx8VDxRsAB3wCIAfFw8eDxcPDjAuDxcOIC8eDg8XDgBPBwAxDx5f
HAAhHg8VAF8NDx5dDF8AG5AYBCAxMCEPFzBVBmAwAS4QEQ1gA-YDIQ0fHQ5BDDENDBEODSxBDAEM
BAD0BYEOQQ4ADhEMER4RDAARDgARDBARBQAAhwwhDBAFAAEPAAESAF8hACEMIfILGz8YBDCXAAYw
ADEMXABxEQ4NABEMMQQAgAEMQQARDCEQBAAgUSDgBoARDgFADiFAIUcAIEAhBABfDCBBDACFABwW
kIUAIyARhQAgEBGFAPACAQABDAEMIQABHAEODQwAERzqABAMBQDwBRwBHjEMEQ4xHAEOADEOIBEM
AR4QrgATEAoAKAARMgEwIAEMSgAAugA-DAAhQgRAMQENMUQEADoEECFEBBABOgREAQwNDDsEPR1A
ATsEFQw7BFBQDREODDEE0Q5QEQ4MDSABDWABHgEHAH8cAbABHA1gtQAZ8BgMDATwCwk-GQlACQ45
DgkwDh8YGR0OMA0ZDQIZDTANGQINGQ0wDh0UAAEhAG9ACT4J8AtiAAscNWIAJAAGAgAlBwACAPEZ
EBYAFzoJFxAXCjkKCQAWAAoXGRcKBxAXGgcGGgcAFgAHGgYHGhcQBxgAgAAWAAkKOQoXOQAxCToX
TQAUBwIAJgYAAgAPmgAZAKoHiVkACV8ZBAleAwAvAFRIAAwvMTJJAB0vNjVKABb-GAIHEgcCIAIf
EAIwAicCEAIHBg4XEgYHDgYnBhcGDhcmBw4XBhJGAqMAH-8YAg8cEg4CIAIaAjACLgIQAg4PEQoe
Eg0OCg0uDR4NCh4tDgoeDRJNWgAf8AkQDxcQDkAaUC4wDg8ODx4eEA8ODg8eDw5XAL8PHh4tDgwe
DRBNEFcAHfERcA8XUA4PHgAOEA4AHQANEA0ADQ8ODQ4dDg0MDQ4MHgwIAAAOAC8AXLMAG1EKBgQA
AgIAwxIAAg8eAg4CDgIeAggAMhIOAgIA-wAAAg4CLgIOAhACACIAAhAmBh3wDhAIYAoRCDAJAQgJ
CCAIEQggAQcRBwEAARkfGRkBaA2PEQ4BIAEUARCvAxkAkhXxDgIjIAITDgsgAhMeABIbAwsOAEsD
AgAOWwIOAxsDuwA-Iw4LYgsdFzBWACAQAlYAQBACKwMlAiADGwYAnxMLAhACCx4DAlgAJOAQEhMe
AAIbEwsOAAIrE1wBIAMrBgCPExsCAAILHhNYAB3wEAIjAiAjDgIgEx4CIAsDHhIQDgsTGyIrBwsC
DgIDKwO_AT8zAgBVABxzEiMCEAITHgUAYA47AhAeO58AAasAIAsTCQEvMw6qAB1gIDIgAjMCBQHf
MiMOIksSSx4CDisTIp4AH-8SMAIAAjACAwIDAiACMwASGyMCKwMOE0sTEhMeCwIAAiMeUgAe0EAB
BgFAAQ8WBhAhDgabAsAUCRFJBAEOBDkEDgYEAC8BXtkTHfETAAwxDAAMATwBHFkMAQwJBQwJDBEM
CQwFCQwBDFkcATwBDCIAD-cHGeEKEAQgAhMCQAIDHgMCMAYAUCASAx4iSQLwACsSDlsOEg4DOwMO
Eg4jLggB8gBLAwIgCzMCMAsOEw4CMAIGAHMzAjACCxMLBgAwIAIbeAIPDQse0AMBAAEwAQgBBgEQ
ATgFABEoDwAvUAHlEx0BYBf-CQEWEQgGASgGKAZ4AVgBAAE4ASABGAFAEU0AHkMCCBII1wUQKJYZ
-wYEChgSBAgKBCgEGAQKGCQIChgEEkQdAh7zAwAOOA4ADgg_CA56DgoBGgEKCAcAEXoVAAEfAA9T
ABrwIhAEIAhQCAkIMAgZCDAIKQgQCBkHGQgACBkHKQgACAkXGQgRCRcJCAEPFl8VDxYBDjbUCa8P
FRUNARABDhYOBgAAXwABBzYHogId-xCgITABBwIEARABBwAGAgEQAQYcBgEgAQYMDQEwAQ0BdBMM
Hjd_AXA7AhACAwsTJgUgCwMvBhAeRQZgCwACDgsC3gQwGwIDmAKPAwsCAxsSAxtgAByAEAIrAiAC
Awv2A4EOGwIgAgUOCxEAAAsDAAoAECMJAA7OAg_4ABkSA7gAIA4SuAAAAwAvGxK1ACvAAAIrDjID
CxMOKw4LRACfCwILDgIDG-AQpQAfEBKFACADLk4BgBIDCwACHgIDowADWAGvIBIDCwJAAhsCMFoA
HzACABL-AMAAAw4DCx4CABsOEh6pAAAAAREAXwATMGYBD-4AHaBAAQQCECEEAgYAXAXxEg4GDhEG
ARIRAA4BBAIREAEGAgYNBgEABAIFDQUNAQACEQ8AD2MAHADFAhAnwwKABgUPFgEQASYTAxEFGQNf
LgEwISBPABnAEAgEQALQAgsyAAJwbAHQCwMCCwJQAiMbAxsCIH8B8QkeAwsDGwMSAAsDEh4DDgsO
GyMCGwMeEw45AQAtAK8bAxsOAgMOAxsT2AUcMdASYNoFAJ8F8AIzEhACCwMeGyJ7ElsOIg4TLnII
EEt2CAHEBS8gEsoFOHAAAQcMBwEgBgChQQcMZwwNXA0MZwwAAxYAD9ESHvAAFwEQAScMBxEHDAcA
BwwXQgBQAQcMDQekARMNDgAAFgARByQAALsBHxdiABxgERABFwEXYQAXAWEAEQxiABwMYwBvFwEX
ARARYgAc8AkAKCAPFQAIEAgADhAoAA4gCBAOAB8ZAAhIHlIwDgAtEAgALz0Q9wUccKBBEAEWHw9r
BWAhDhABBgHNHAB6CAgEABEWCAAVUBAAnwYBAEEGAQBWAWUGHbBAITABHw8BIAEFEW0AABgBoSAB
BQYBMAYHAUAJACABBwUAIAYF9gVABwEwEf8FIQcGJgAxBQEgRxQhARANAD8wAQdBFx7yAyABACEA
EQYBLw8BFgEAIQYRQNcAISAB_wABPQgfJtYAHiARBkwA8QMHBQcBLw8HBQEQIQUGAUAHAVAHAFEF
ARABEOoAAAQAIQYFvAAwAAEXygBQAAEGFQYxAGwHAVAB8Ap3ACMuNXkAby0wLjYyNX4ABPEKHxgI
DgAoCggKGC8PCAoOCg4oCggOQAgOUAcAYAoOEA4QChMIIA8ZMwjwAgoOCgkKDgAOCg0JBwkNAA4Y
DwBvEC4NDlAOgQAjzQgE8BAhQC8PATAhwEAALzM3QgATHzA6ACX-BpABQBEPD0EUDg0_HxQOAS0h
DTEgAYgAJrAgFFAXQDcwNSAHMCoErwc8FywHHAcAVwBRACVVQBcAFxB3BBEgDAQRMAYAESASABEA
EAQ-ABdAYQAl8BUAAScRAAEHHAEFBxEHHA0HBREHEQcNAQcAEQ0AHAcAAQcRHAd5Am8nAQcBECHI
ACYgIDEtIZAaBg0BDBEcEQa8GkAGDAENHgfAFgwWDRYRDA0MAQwWFgBPERwRDWcAJdAQAQkBMAEJ
CgkBIAEk6ANACQoJADcDcBoHAAoRCSoLAAAGAF8QASkBEDMCJxBQOgQCZgYwBywHQAFgDAcPFgUO
wAUgIQWpA08OBQ4BYAAjQgsETxXRHjUHAQcGAE8nDiBOFgAEDGcAD8IEDDFwKEACAC-wDTkAHLAQ
NiAGPxUGAAYOCAgSYAgOFg4IHQYAETgEAI8GAAY_BiA2EFEFHv8GQBEGIQABFgEGHw8BBiEAEQ4G
ATAhUgUrAKYJkgcGQAEGBRABACYGrwcRBQYRBQYVEQADBi0gBgWXAACeCRgRkQUREVgAFSBXAD9Q
AZBZABmQEAgE8BwBBgHA9QD-AhEAgQYBEB8PAYYBIBEAgfAESgAdUR0BUAEAHAcQB04AIAEGAgAQ
IZsAUR8PAQUHAgABQQYyEQAGHQAhEQUzBwA1AAHdAA9yARtTGAgE8DV0AAgCAAd_AAcCAAqIAAYC
AACRADkhBgECAAmYAB8AoAAqWw8YUA4AAgAA1AZKGB4IDgIAANMGWR8PGAkIAgC4CgkHCQ8ZGA4I
DgkCABAeLgA5IA4AAgA-EA4NQQ8e8g5AGEAIHw8IMAoYDiAKCBAIMAoIQAoIYAoIUAgKUAwAoQhA
DxkIQAoJCjB_B28wCgkKUA2KIh3-CUAMUAcMIBwABwwQBxxQB4AcUAccQBcMEDIRHvEEBAFQAQgB
MAEYASABOAEQAQgZCOYQD0oAHhkwSQCxAAFYERgZGBEYGhg5ER8ATwAdERA9BP8HCAEAAQgRKAHY
GUgJGgkYAQg6CBFYAUwAHQBFAyIRCk0A8AEaCAoIAQhaCLoJOgkKARka6hU-CRgJoQAf8BIJIQgR
CBkBCAoBGAoJARoBCIoIGhkaCQgKCRoJCgkIWgmtAA_rAB5g8AgvGUAuAgAfwDsAHfAEABoUCgQA
CkkUCgRJFAEEORQ5JA0AF1nkGB8xTAAWUBQPFAAOkyggFA4IAGAPNB4EDx_oHaAfDw8EDg8fHg0U
CQD-AgANBA4UDSAuBA0EEB0eDA0AtQAd8AhIDQEPFAoNAQQFEAEKBQ0EBQAFAAQVDSIE9AEEJTgK
NQ0BBApFDQQPHkQF7AYfNVwAFfAGDxQBAAU4ARAFBAENCgAFAAUEDQUKewT0AwQVBDglFAENNQoE
DUUKDQVEDyMlLzExbgEc3wlUCgQpBAkUAQQZBAlyAQAfNVAAHW8kCRQKFDnAAQQfM04AEtEYCAQA
WhBaEFoAClkEAwAkDxQKABUOCQCPAF4QXhBe8Dl5BBwQANsi6Q8UEA4PFRENDhAOBBEEBgCRIB4B
DjAEDgUEBQAfEHkCDBk0XwAQEmIncAoACg8ZKg4CAGoKDgoACg4CABIqFAAEBAAXLgwAZAAKHiAK
DjsAQRAOAC4CAC4O8NgrD4YACQB9BP8mDx8PFAQPDw8fBBAOBA4PDw4EHh0ODxQNDg8VPg8UHgwP
FQQOFAwOEAwkDA4gLA4LAAQLDB7AIx1gkAUABSAGmQJwEAUGFQElEJ0L-wAdAR0lDQYBDTUNBgAN
BQDQKR0xsAWwUABgkFUAASUBCgBvAQUBAAUARwAcoBAOHxcOMD0wPx71IgEEAEA9MA0caR4Phyke
IDAfiSHxDj8XIB8eLxcQDx4fDi8XAB8eDw4vFw8eED8XDx4gbgBfHQ4fDhCoACQCAgCfDx4dDDA8
MD4QtQccMAEkMC0E8REIDgReDxUEDQQALQQNBA0BDgQ9AAE_HRAtHgQBDQQeIQkA-xIeBA4IAQ4U
DQQNPgEEDQQtED0EDgEAHT4RBB4tECEeBAEuJh4GpQQTBaUEIA8epgRQDQUeOD4WAI8_BA0FTg0F
XloAHCA4BcQcEgVcBSMPHl0FIR4FXQUwPjg_GgB-TgUNBF4FDVoAHLB-Hg8Ubx4BDxRfHmMAIU8e
agAgPx5oAFEULx4FABAAIR8e5glPDxQPHmAAHCDvHlsAQA8UAU8FACEAPwYAIAUvBwAyEAUfDgAx
AAUPEAAfAdouHkCvHk8URQAQQVEAAKwAET_yABY_BQAlAQAPCD8yMjQVARZQXxQfHlHvAACeAFMA
BQEPFAkAEg4IABQOGgAQHd8BJAABES4-MTI4ZAAUQJ8eXxT3ADFRDgFJABQACAAyDx4OCQATHQcA
JwEAxQAfNsQAFYAQBA8UBQQgBR0p8AAFDxUFEAUODxQFDgUgBA3RBQ4FAA7gBQ8_BgzwBQUCEAUC
AAUGAg8VBQYPGA8VDxgCbgDUDxgCHxUADxgCEA4CECUAEA4lAKAODQ4CHQ4CHQAOHAAfAO0BHDQQ
AiBvABICbwDQBR8VAAIADgAPGDACUJEBEA2zGDANAAIADBANGgAPZQAeAEgyki0AHRUNFgENBgYA
SgUhICHLBR8BywUd4AFgFQA1ABUAEQAFABUAxgU-ECFA1wUrMFARAG0BEWAZL-8JFCQgDh0UHx8A
LSQMEB4NBAwPDwAOHSQMVAAc-wtxAHEgMUAhDx8gAQARDw8EQAEOFA8UMB8fJNYQHf8TASkPGRkB
CT8QDxkPEAkFThUPFl4dXg0FXgUNXhUNGR0FAdgFHfEDBAgPDwggBB4HHj8UCA4IBAkEAAHxDQ4E
CQQPFQEPFAQCDxkKAQABPxQIARAvFR8UBAF9KGEhEB8VCA4SKTAeBx6MKGAIDggfFAHFKEEOHRA9
tgWfHTwRBBwtECEc9AUfIBMTGx2xAA4BDxsDBRABDhH7BSEBLhUA-gMhDhMOAyEOAQ0TIQ4RDQAu
AS5MCg_XIwtBAAEABWQAUhAFAw8bfwQQDRcvAGMA-gQOEw4hDgMNAQ4hHREOIQ0uAS4A-QoPYQAN
8AgfGz8TAA8bQx8TDxsPE0MOHxtDDg1DHgMAX1MOAF4AsgAeIh8bSwAHVQCLHgFDHjMuDxtUAB8z
VAAVcH8eTxQvHkGJBgABAQCaBgAIABc_BQBDAQABPlcAPzE0NFkABQ-qBTgfNmQABQ-qBTQ-MTYw
YgAVAuwFAaYLICAJBgCACRAHBA4UBxDYDcIJBA0QCgQOFAogBA4RBjUOBQxvBB8x1wEWD5MOBA93
JyMwDxtPIAIhUw8gAiMzAXYClwEODSMhDg0DQSUCLzY1Fyg1D_wAFmAwMzAGEwYXNDdAFQAMAA7a
EQ_ZAQ1RHxQkDw_pBEAkHx8QAC0TFBAAETQIACAfFLYFQi8UJA8eAAGVDwEYAD8kDx9uAB2QDx8k
HxQQDw8kcy0RAPMMAHQtoxAPHyQvFAAfHxQYACI0DwgAERQeADEfHyQQAA9uAB3wCiAvEBAvEwAP
EBAPExADDgADDgAPFRAjAA76B-8LAwAOAwANAg8VABIMAwANIgADDxsDAAIMABvVAB4QE1UIQBMQ
DgCUHpEjABMAEx8YIg9hCJANHgMOEx4QDhNWOQBtAAEZHwCkKC8ODWgAHf8PAlYCBm4GGAYIAggC
HjgSDlgCBg5IAh4oAggSDkIAtgAfQRMOPx6yBeE-Hg8bEQ4-Hi6NDhMOPRMAbj0MEQ49LqMADzYD
Iz4TARM4Aw-uAhj5ADM-HgYTBj4BFgE_ABUAPv0CDxUCHZBAPxQULx8fDz-AArAwTxQ0Dg8PBAAO
FM0--wEEAB0PDw4NBAANDgQNDAQAAAEe-xovFEAfDy8fFA8UDx8kfxQwDgQeBA4QJA8PDiAOBA0P
Hw0OEAQMBCwEDlkAHfAMAhNBAhMCEQIBAg8TAwIRAg4DHgMBAg4PGAAC2AL-BgMADhADHgADAi4Q
Ag8QAw0DAg0OEmQAHRUAigsSIK4FTR4FDiBzEQWMES49DnkHDx8COg_5AAYPywkmD3ECFiI-Hh8D
ATQJwT8eDhEPG08ePhMOPREAfz0OEQxNLj2nAEYPUAYXACg9IRQOHBV0FA4ADx8EDsEC-wEUDQwO
AA4wfiQNDhQtHEAurQAdcz8UMA4UHiCDFf8GIAQfHw8PMD4wDx8UDjAfDx8fMF4QcgQfIR8YJwUk
HxgoBThdAC0hBUENEA4NHwUvAB57Ax7ADxgPGxMALxgzDxtAjxP-Di8YEC0PFQ4MLQwfEB0MIwAN
CxADDhMAHQMMEAwLXQAdESBvGP4EQAEYERABCA4oERgeCAEQERgBQO8pD08ADgBuGwl2FA4CAAZk
FAwQACUeAHQUFR5yFB8BEgwZAfcUFSp-AADTFA-zFAkAIgAIfwACNwBOKg4KPvEUDykNFIEQAR8b
ERABHug2UAMBAgMCCADwBQYDDxMPHxEGAwYCAwIRBg8TBg8VYStgBg0GDQIDFicQFQAqMRYNDM0i
kQUMBQwRAAEMBvIkMAYMB-YdQAwWDAfBKRAX-jOABhcGBxENBQECAA_iAB2AEUABHxsBACGiAIEe
AQMhHhEDAZgAIgMWpwATE6YANxUGDaUABJ4AERGdACERBj8mIQwHPR6yFgwHBhEsFwUGAQUCAA_U
ABzALxUoDgAoDg8OGB4ooTrwCQ4YDR4AHh0eDQ4IHi0OAA4YDhgOACguEAgA8QkQCA4YLgANDhgO
HQ4dHggNDgAIDg0eGB4kAH8YHhgeOA4ofwBEUw0IDhgeewAxLQgOewBAHQgOEDIArw4gHhgOIA4Y
DjAtLCDwInAfFSgeACgOGA8OHhgNDg0ODRgOCA1OCA4NLggeCA0_GA4ILSguEC0YHgAIDQgNDh0S
ABENmQAC_ABvCF4AOA4YCTEbHyCCGBwSMMEMYg0OBQ0FEAcAGiAdAA8FAAEPEg0BGQwSDQ5RAA_c
BwQbDZsHHzHnABGQDiAE8A8fFT8UqhFAHxQEDpEWACBBIQQODABSHQ4ADgUNABAFGwAYHg0AgQ4B
BRQFBA0kCwBCDRQFBAIAwQ0OCrUOBQ8WBQwFDgIA4QwFDgo_AQ4BPhEFDQUkOwAAJQAQBQgAEw4O
ABABNxYDdQANDgCDDQ4EBR0EDhkMAMAdDgQOHxkPDw0OAT0jADELDQoZALItDgQdCh0OAQU9BVoA
gQ4BBQ4tBQQtbgAXDlIAGBUNAACuAB4MrQAQIWoCEgQCABAedwAxDgQB_gABDQAgDQSWF2AOHREN
AQQCAAEQAB7hFgkPewEH8AYaIATwKC8VvxQvFVAeLxQEDh0UDg3wFxAEikXQHQUNJA4kDiQNJB0F
Dk0XAxAAaQUkDRQNLg8A0gUOAQ4FHTQFJA1EDQQPAEEdRAUkAgD5ABQFDgoJ9QcOBQ4PFg4VDAMA
ABsANQ4BLgIAsR4FDg0FBAVUDQUkhgAgBA0iABIVCwBBFA0OJOoBQgQOAQ4UAGAFFA0ODRQXAACB
ADMUDSQRACENFIUAYB0EDQ4UDYoBAdkAJBkEFAAQHUQCUAUUDhQHxQGQBA4BHRQdBB0kQwBQFAsO
DQpiABQNDAEBTgAxDQsKeAAxBQQtFQAQBXQAMQ0EBRMAAHQAAxUAIRQd8AAAFABBJAUkDrQAQRQN
DgUmAAEjAAAUAAPPAAMYAQQOAQ8XAQcxAS0E6AAQDi0CICQOFwFQEQ0FBA5NABABZAAAZgExEQ0V
bQAxARQdmwD-AiEdBQEkARQNASQNJAEUBfELGwIZ8R0YIAQAXxUCbxQPFQJmDl8UDgJNDgIFbl0u
Ag4dDgIFDg8POA8YHh0OIS4NHg8A8hwPHw0YDxhOBTEOGR0eBQ4fHwgPGB4NDhUNTgopDR4FDggM
Hg0PGQUtDj0OEQDxHgUODRoABRYPFgALBhAOChkNDg0uDQEaBRYLIAsgDgoJDQ4PGS0KDwcBCgUW
cBAAZAkKASoHAQ4ARCEGKgcMAGcfGQoBBiooAFMHAQYaAA8AogoBGgcBBgoACwYQACARBhAAIhAL
DgAgFAEPABGgDAAARgA4GgegRQAYoEMAF6BAAB_gPgA2NyAGYEAAOBAGcEIASAAGC3BFAGcABgsw
CyBKAGIAFgsQCwYSABEZUADgAAUNBQ4LDQUNHgoJHjkTAA92BgscNCEK-i4gGFAIDxUYIAgfDggQ
OB8VDw4IAAgODxUODRg_LRg9Di0_OA0IHQ49Dg0IIBgdOC0ODRgACE0eCE0OCADobAAPZQIHURAI
BAggIQdgIA8VKF0eSAAwPQ5N4gdQACgdDhjFB9AQGB4IECgeCBAIDnAo7iRfsAgO8ABmABwAZQDw
AYAILi8VGA0YEAgACA0OLS5lAJANCA0IHQgdHi0UAIAIHTgODTgQGBUAAcYHMAhACJIA7w0YDQhA
GCAOCBAIDQgQegAcEJBKAXFQGBAIDw4ISgFQMAgfFRiPOrAIAAgACG4NOAAOCJs6wA4IQAgOKA4d
GA4NQDIIAHMBfwhgCB4IDigxJR3_AfALCAkKDx8QGAkqDiAICQqkCw8kDAsAVSHyJyQQRBBEECQA
FA8VNC40LjQOJC4UThROFC4UDxQOPS49Lj0ODQQGLR5NHk0eLRYnBgAGJwYQBggAkwAGBwYgBgcG
MAgAnyAGQAZQBkAGEDAeHtAETxUQAR8UFA8VEA4xi0vxAE4BAA0EThABHRQOEA4xDREAD1YAHP8S
LxUhECIuAQAIDxcIAg4RAA0YDQIOBQEYDRgVCAENKHVxzBkdz3BRBQFfFQUIATh1cY8MHPEBCAQg
IQUxLxUFCF4VAT4hTjIzfyA_ASABDhHoKR00UAEAiQBfTkUuYQ7SKR0A1jHAABEAIQ8VAR4BDhEu
bEjxAREeEQ4xDgEAERUREAEFEQWpJg-HARpwDAgE0AkBKcAsJAkBAgAPCwAGASgAALMwLyHAZQAc
IbApPQAiCSFMAABLAAIIAAYSAAJfAC8pMV8AJx8huAAFBwsAD8MAJACYD0MBAQ8f8gc5AAEOAgAP
EAARAjoAAnwATwAh8AF-AB0yAC8ZRAA4IQ4BAgA4LgEOAgAaIRwAAQIAHzF0ACZRCgEKASoCABsK
AgAJEgA4IQoBAgAVADYAD_8AI-EHCAgEDAAMDxUcEA8QDA8cHA4MDxAfFQUA-xAPEBwODSwPFQwL
DAsMHQwNDA4NHAEMAA0MGxwOMAsMtyMeQA8QHA9VAABvABEMkUPwDQ8cDB8VDA4PEA4dDgwOLA4N
DA8cDQwdDAsODA5rAN8MCw0OHAsADRAODAsQk0Qc0PATLxUwDgcWDiAOBRcuFfEiFgYVDhAOJwYe
AA4GBRYHBgAOFxUWAA4mFQ4ADhcGDQUOAA4HJgUQDhYXBRAOJw0FEBYAoRAOBRYFDhAOBRcGAOAm
DgAeDQUXDgAODQYFFuwbIAUn-k8fJkcQGvAOIBAEgA4vFF4tDrBuLxVdLG5ADn0ODxgMPQwLDn3x
DfAAAgwiDBIMGzwbDBIMIgwCTA4wDQwiCwBhCAsdCwgCDAAQDYYA8gYCDBIMMgwNCwgSCAsNDDIM
EgwCDR4WADkcXRwQAHYMDQYMEgwGJgDQXCIMDQYCEQIGDQwiXHkH8AAMHhwiDA0BBhEGAQ0MIhzL
QQMULTA8AgwgRSACPNMTIA5wKgAwDTENIgD-FeAOEA4MDQYYBg0MDhAO8AQODAYYBgwO8AkODB0M
DvALDhwO0CkCHPAXECkHIAk-GQcACQ4oCg4HCQoIGg8WChkKGBoNCQcKCDoJDgcoCgmwAT8pDgB4
ARwgkB5CS2AtBB7wAg7jH-ISDSQNFAwEDvABDgQcJAwULAQO8AAOBCwUfAQO4A4ELASMCAADEAAp
PAQIAFEULBRcFDEAMjwUTEUAIkwECQCAFCwEDQQsFA5nAHAMBBwNBAwUHQH-BhQPGAgMCAsUDvAG
Hk0e8AYOHU4dDm8wG-IMGAQgHxUADh8ZDgAeQA4NDx8eHB4NDA4gDhwdhEMAiAESLIlD8A0cDhAe
HUwNDg0eAA4NDA5cHQ4MDR4MHRQ8FB0MygJwHgQcBB4NHsIBAHMDEA68Q-EADiAdBA4EHAQOBB0w
Dg0cAgAAGUswDD0MKzbgDQwEHgQdDmAODSwdDoAhANEOkB4UHpAODSwOUB4QEQDAEB4ADhwuBB0E
LgwNnAAAaQ4RDnwAUAQMDhQNZ03-DAwEDgAOHA5EHgwNDiAEHV4MDQ4wDgRsDQQOEA4BHP8C8MYv
FbAOHxkEDqBekA4NLx_HAGDwBwgIBA0QNhAGDQYfHSY_DxUODAYeDS6OFEAsFgAWw1CvFg4MNgAG
DAYAFlkAHXQWAA0mAB0WWQCEDR4NLiYNLEZVAE8QDCYgGwUnEgYbBWAFFg4QDhcgBeUmBx4ADgcF
JgcADhYVFhoFEDYgAAAlAGA3DhAOBheRBCAHFmIBEBcAEwgiBQJxBRAeCgA-BwUAngMcIvA5FwW0
8AA_HxVdHD6wHj0YBfEEPR6ADj0SDBsMHQwbDBI9DmAOLRAFIgIcEAViLQ5ADh0CDAUSGwwFZQId
DjAODQoFEw0OAAgIBQEUADYCHDIJBSIsAhQAJx4MCwUxDB4CBAOQAh4sAgxRDAIsEAAgYA4BAdcc
AQYYBgEcTg0OgA5ACgUQEAYEP1wOsO4BHEEQHxxAfSsQENMDJiAMCACPDjAMHgxAHBCwFRwgECEu
KfAPDxwcEQwBHB8QAR8cAQwfEB8cAQ4BDA8QDCENAAENMU8AKVNAMQ0cDQsA8QMOHQEdDgFNDA0B
DAEcHREMAR22UgCbBwASAFABHQEcDQ8Afw4BLA4BHA6SABwPjgAtMAARDKdPQQABHB2mS-AADg0R
DA0BDREQAQ0cDgEglAAPJQEfAbUqIBwc5TgAkABwEQwfEC8cEZQAQREOAQCfAGAcDBENDCHxAABv
AAA4GZANDgEeLA4MIS6aTACKACAMITMHMAwBHBIKMAwBHJkAEAApTC8cDZYJHXIAPxUfDx8Vvyiw
DxUvDx8YLxUPDw8GAGEYPxUPDx8GAFEALxgfFRsAEBjWII8fGA4fDx4dDm0AHHVPFR8PDxUfbAAR
T2oAMg8VL2oAERV2AAZsAAEtAI8PDxUQHgAeAJgJUFQ2BRAON5YJIAcWBgAQJoMEIBcFoAgxJgUG
KwAADQD-AgUWBQ0GDgAFFwUtHgUGBwUWmAkdMPAYHoIEUB7gDh0OgwRWDh0OwA6FBEMOoA5NhARg
TQ6ADk0CkgkBggSFAk0OYA5NDAKMCfUJAgxNDlAOLQIMEhxdHBIMAj0OMA4tEgwSfwQQEscEFCAU
AAJ-BAUUACUcAn4EIgIcFAAjMgyFCTAMMi1MAEECHgwOhglQDgweAh1sADEuAA4iAIAuAA4dDnAO
LUsKAJAEow4gDh0OkB4dDhCeCQBxCx9QuQEcGQBpUBAwM08QMOJPITABWVCQAQ4N8QEMMS4huwMw
DiEM9gKQEFEQHkEADA5BQQMA5mABeVAhEQzOTy8REPVQJDAQEAT_AwGlVzAOAQB1T3AODxABDA0R
lQQAbENADAENEQ0YEAweAAAHACI2AQgAgA4BDQFWAQ0BllEhDFbUBFEBDC02PexPgBENFg0RDREM
RQEwIRYhfASgABEdAQ0WDQEdEQNUgQEGDQwWDA0GoQTgEQ0MUQwNEQwQEQwGAR3_PCAQDnMAMAYd
Bn8AAAYBgAARDBYMEQAMlQQQDQJRTwANASDqABwAZkdBDQYRBggAAD058AANBzEHDQABByEHAQcR
FxEGAAAYADEHATYGAIENBxEGAVYBBhkAgQdWBxEHIQYHkEdABwYRFxQAEBbwTCAXERYAMQEWARgA
cA0RDScWJw1JAHIRBgEHFgcBIjtABwYHUTYdoSARBwYBFwEGBxGSQRAH0x0DnTuAIQYHFgcGIQdb
VY8XERcRFw0BDeMAGQClEzAGEUBfBQB8SUEOIRwR-gUAQAUQEc1ZD9YSDR42A18xIRAhrgUAvREA
TQAhDAHCVT8RDAFLABnwExgYBMAvHYAWcA0OEQ5wBi5AHQ4hDnAeEQ4gLQEPEh4BDmBrAhAOIwIA
7QGQDWAOASARHh0RS1IgYB7sAcAeAR1RcA4BAA0hDi00AjANcB6ZAuAOLSEecA4BDSENUS6AAagC
QB4tLpAIAAAtGlAODQ6QHXcCoQ49DpABHQEdAQ0WACCQbQkAwT2AAV0BHQEOLZARTR0A4KANAR0O
HQE9EYAtAR0OxQ3QHQGADQBtHi0RcAENAIlPgS0OAR0RcA0AHwwiAQ0OACAgLaNTjwEQEZANED0B
L2MdYMAPGAggDi8G-wUXEA4IPxUOAAg9AA0OTRAdEA0OYEE7Di4xMzYiEBjsKPAGGBAvFSggPg8Y
CABeDxcgTg8YMB4AeQkAbwwPUwAc8AlAHxgwDigOEA8VCB0PFxANCD0OAA0ILQAVAVEtMA0OAKoA
D1YAHUAQGEAIqQBzCCAPFRgPF7QA0BgPGBBPFRgQDxhPFQiGB08eIB5AWwAbMBAEMBkHECcTB-AD
HQYnEA4mDgcAHg0GDw0WDg0GcR7wCA4WDgUOJg0HDgYVHg8SFicOAA4MHw0GYCQAzkggCwcSD8EL
AA4FBxAOBx4FBwAGAJ8eBh4FBi4mBSbjARoQEKJfAIwAAWcAICYOXAAwFg0W-RywDx0VAA4MBg4G
FQCRABAWtF-wBQYVDgANBgwFHR4WJwUXDgYdBg4GgACABg0HHhAOBwXLXxAHKgxvBgUOMA4mtg8b
Jhgg6mEUDoZhEAS_DQFiYQIDAEEOBgWdBgAyAAYFlWFSLg0uDQQRAA8UAAIkFgU2ABYAEQAjHg1Z
AAEOAAPKYQUUADEGBTASAAI0ADcwAQ5TABdgDgBRFgVQAR0nADdQAS5BABFQq18CDgARgLFfdQ4t
Di2AAR4kABCAa1kFDAAABARALQ4tcBUAEi4VAAgMAEKAAd2ADwAAdQAJCwAn3YAzAPgKBbYPFgYF
gBUcFQ0VLAUNkBUsJSwlgAW2DBUA8wAMBRw1PBWQDgUNHCUMBQwgAA_oARmwEhgE8Akx0CEPF9DK
BKEwLmABLjAODQ5AD1iAIAEODx1AEQyUEPEqIVAxDFFgQR4BHGAhDEGAEQwxoBEMIaAMDkGgHhEM
AaAeADEM0DEMoAEQMQyQATARDJARICGAIRAhCAAABACvMRAhDHAxDAAxDFdXClBtPTh9fQ==
:: gfx/1.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA5LTEyIDAyOjE5OjQ1Iixtb2RpZmllZD0iMjAyNS0w
Ni0yNiAwNToxMTo0NiIscmV2aXNpb249NDI5NjVdXWx6NAAXSQAAncMAAPMhe1swXT17Ym1wPXB4
dQBDIBAQBPBWBxAHwBfQF8AHEAfwVixmbGFncz0wLHBhbl94CADHeT0wLHpvb209OH0sPgD9HPDA
BC8VFY4FngUwLgAeXxIPDRXwJwUdHx0NPxIOBY4VTgBOIBWOAC4wBZ4OAPAUjgWuBT4ADgAFDgUQ
XkwfHRUNBfAmDQUNCy0cBRyOBT4AXgUdAM8VzhAFDgUADgA_Ba4VAAUg-gQOAPAVFQ4FAB4APiwL
HAUNCw0F8CUFDRULBQsFHP4KAAUuBR4FbgAePAAAcgAu-gwTAP8gBwAuAAUeAG4FTgAeAH48TQXw
JR0bDQsdBSw_AB4FAC4AXhAFHgAF-gEAHgBOBW4UAAcgrhWXAP4ODgBebC0LDfAlDQULLWwFPhXe
BQ4ADgX_AAAOBa4PAGD_AQWOBV7TACFsbTQAYB0bDQVMPlsAiv4CAA4AXgWODAAQFSwA9wgsCywt
G-AlfUz_BQUOABVeBW4ADgD_EgwAECYnAKJcffAlDQs9jP4FQQAj-hIIAPAKFRWOFT4ADgVOHAUM
DRwtC-AlPRw9LB4V-goBzwUuFQ4VbgUOAD4VjhIAAbEJBV4FPgUOAE5MXegAgAs9BQ1MBf4C2QAE
2wA-PgVeEgAAYe4A-gUFHhYAMD48BfAAkQsdDA1c3gAuFdcBMW4FfjEATx4F-gUUAALxDh4QngUO
Bb4APgUOPAU9Cx3wJV1cBQ4FnhAuBQ4VxAFPBT4AvhIABCL_CD0CwB4APgU8Cw0LLfAlHQcAQSz_
AhWpAGIAngU_AB6cAi-_CBQAAGEKADVOZR5GAABJADBOBQwCAGALHRXwJQVLAHIcKzVONQA_9wCR
EBU_BQ4FDgVOPQAAQAAvHmUeAA9AJSBVfhkAMRUgDncA8AcODAsMCwwl8CcVDQsNC2wOVSA1DoAl
OgAhHgAiACAgFQ0AH34YAAnwAvDgThUgTgBOFY4FDjwNGx0FTgAuXB6gAwquAxHOgQH_BwVeAD4F
jhwFHC0LDQUN8CYFDRUbTF6dAw_yAw3iFR4FLgUA-gocBQsFCxWoA34LDQUcCyw_oAMPswMLcp4F
AB4FEF64AyA_LHsBjhsd8CUFTTx_pAMPuAMIEH6LAZEF3hU_BWwtCwXLAj4tbF6oAwu3AwCPA4EB
BT5MBQ0bHTcAP21sPqoDAQUMACB_FTYAgAVMffAlGy0s8QALrQMIuQNgAwD_BYw9WQMifVwpAAq8
A1COBQ4VLgEB-gP_ABUeLD0cPfAlCy0cDQwFHE6zAw-FAwQSroQCAKIDMUwNBW0AXg0LXUxOuQMP
ywMEET6sAACKAGAA3lwNDB1CAE5tBTw_vgMP0gMKAPMAUR4VDgUu1wMgXF2RA049BTwOxQMP1wMC
IP4DSACQAA4V-gIsLQsNDwQABwAePMYDD9oDDVFuBT4VEBYAgAU_ADVONSscTwBhBfAlFR0L5AMO
xgMP5AMj8AA1DgUOJYAONSBVDmwLDQs4BxEl4gMeDs4DD_YDF0U_8OAujwcSXI0HPxsNPIsHGx8b
igf-------------------------------------------------gQtxLYQtMTUuMTA4MwEAA4At
YzYuNjc1MAEAEjGNLRkxjS2hCAgEfxZ-FR8UDwQAEz8IAIofFI8VBQ8WHwUAYw8VAC4ALnsAFDF7
AEM0Ljc1cABSLTcuMjVnABw5ZwCgBw8VHxcGDxUfFgQA-B4WDxUQDxcfFgYfFS8XJh8VHxcWLxUf
FgA-FQ8XBg8WAA8XAB8WHxcQDgAfFjDtAA9yABEApC7wKSFOUAEPFRAuAC4wAQ0gHgA_IAENMC4A
LhABDUABTgEAAQ1gQQABDQBPHmABDQAsACxAAQ0QPAAcLgAwLAAsLgCsAUwBEAENUEHwEYUAITEu
agELcgFIMC44MwEAD5sAAVLwhwT2-wEAIXfwBwA-lWZgAgAMP4BmYCIAlPA28P8yHxYG8N0eBvAE
vw-wvB4LDgbwAgTNMCYgFhAmEBYAVgAmMBYgFiAW8IoOBisOBvABBI0YHTA2EBYANgA2EBYgNhA2
KQCQ8IkOBksOBvAAHwAwIBYAAgAAQABCFhAWEA4AADEA4BbwiB4Gax4G0BRcXSBGFQASICMAAQwA
ACMAIvCKSABBAV0MXRYAMkYANkMAhBA2ABYQJvCMhwCAXVwgFjAWECadAEAQFhAGBgBhIBbwiC4A
IgDwAB4G0AQdGI3wtQ4GCx4GS9kAEcARAPAAtA4G2w4GsATN8LMOBvsACwCwvfCyDgb7Ag4GsKQV
AIFbXgZbDgbwyYoAEkCQAAwNAEE7DgZgBgAKDQAxwX8QCQARagYAYfpU8FwKcQsAEWEGAMHxGxvx
JwrwWgoBfxgRABFpBgD4APkZO-kOC-kIAQrwWAoBiRoAYRdLAfkNKxsAQVYKAZkVACFJLhsAERYb
ABIBOABBVAoBqR0AICkuvQCh_RMLCQFLAfkMax4AQVIKAbkeAPIECS4Gew4G_RErCQFb_QsKAUv5
Ch8AAD0A8gY_BpsOBvkPSwkBOwEL_QwKASsB_QlcAAB5APEWHga7DgZJOwEbWWs5WwEJAVs5a0kb
KStJCgELAVlruQEK8FAKQL8AAEsB8BJJizlLASsZAWsKAUs5iykrGUtJCgFZawELmQEKQArwSgoH
AFABeQ4G25sBUUmrGasKLACxKasZKwlrKUspq3kiAJEK8EgKAQkBCjAtANDLHgYOBgs5CgsBKwFL
4gBASxoBW68A8QcZAUsBGwEbCQGrGQELASsZETsBOwF5NwAAwwBxRgoBKQEKEJ4AwaseBikrGQoB
OxoBOwYApBsBCwkKAVsBWwkVAIJ7AQsBCQoBSxEAMSsBiTwAoCkBCvBECgFJARoQAVGLHgY5KzoA
ozsJCgEbAQkKIRsNAANLAJQJCksKAUsBKxFLAPAECQorEZkBGgFJAQrwQgoBaRGpDg4DIUlrHABV
IRkKEStCACBLGVAAUEsBChErggAAGAACYwDzBEsBqRFpAQrwQAoB_QUOBkseBllfABJpPAAwOwka
GQFWGToRWwFSAPEBKxEJOhFr_QUBCvA_CgH5Bg8CEInkAQg7ABAZsQBVS0kaWxHOAPEAETs5Gnv5
BgEK8DwKAfkHOAAQmfQBGhk4AHMbEWtZWwEbEQAA8wBDSYv5BzcAAm8Ad6kKASkKESs1AFMLAYtJ
mw8AADMAQzmb_QaiABEFMwBViWsKIRsxAKMaIVsRORsBKwE7EgAANABBKVsBO9gAE0BTAYA7DgZ5
ASsBK5YBFAs8AKYpChFbETkBSxE7FAFjSxkBSxErUAEVQtoBAH4DAY0CIztpLAAQKRMCYykKIRsB
CnsAJBEr1QEQAfsABNYBF0RoAgJHADALAUtBABEb7QAAUwFzKwEpGgF7KVoAB8gAAwgANgsBG28C
F0b8AgaXABQZOABVGwELOQpNABQLfgEEaQATC6gAFjsJAxVIeAMCTwAxSwEL8wFgCgFLCks5NQAA
7QAwSwobTAACHAIDewIAIQAEkwM3SgpA4wDxAFsBCgGrCgGrOQoRCwFLKQ0AKBsROwAgq4k5ACTw
UMIEATUAwBoBiwkaAYtJGgFbOQwAAzAAAQsBSBoBi6nWBAD5AIAJGgFrKRoBaz0AV0kaAWsZMQBY
GRoBa8npBPAFaQphKRpRSRpReQoBW1kaUSkKMRkDAFZBORpR6fME9BIOBmlqSVppWokKAVtpWjk6
KTopSlla6QEKAEEAESAR8EayAPQI_R8aISv5LgEKAAECKQIBAgkhCQIB8EYGASD5IPwA9AIb_S0B
CiARCREAARkCGQHwSGkBUPkgCgE7HQDjQAEJARABCQIJAgkB8EkcBhDxHgBC8S0KUB0AYSEJAfBK
ehoA8AL6IgEr_i1QAQIJAhECCQEAAXUAEVEbAFzwIyvwogoAcyQb8CgC8GkNAD8L8CkNAAOAXQQH
8GkeBhsLACAkBxYABAsAEWgWADWgNhC6BzFARkAOAPACAEYARhAmEAYQFvAJRAfwZh5KADSQFgAC
ABAGBgARMAgAEjASAFMWEBYwFgsIwBbwCQQABAAEB-BlHqAGNIAWACQIUUYwJgAmUQgGMQAQRmQA
QiAH8GJmACM2ECoID2IACwEzACJjDpkAASMAEgYbAE8wAUYBMwAFIRAUZwAA9gBCFkAmIPQAUEFA
NiAmXwggMCZbCGHwCiQHIBRcAAMpASAQNDYAAC0JQF4kBxDbAAAeAAQQAPAENAfwYx4G8F8kBwBE
BwAH8GIOBlcA9QXwERawRsAW8AAW8AI0BwAEABQHEB0AAFwBQAAWICYCABEwvgADqAAgNhCYABAm
BgA6EDYwOAACNwlBRjAWAAoANiA2EDgAAzwADAoAoxB0ABQHABQH8GURAEIARhA2CAAENwAEQQAE
MwEICgBKABYQpD8AMgYABmgBURA2AAZgCAAOQQAHAgAyNjDUPgAA8gAgIAYuAPEAECYwNjAWQBYw
NgAWMDYg7gABIADwBxZgxAfwfTbwACbwJRZgtAfw07QH8ClLAfMFAhYwRvANBpAWQBbAJtAW8AcW
8A4cAPABECYQNhAGICZgFvAMJhA2IFkABGoKIyYQTwHmICZwNiAm8AHEB-AoFgACAHIGMBZQFvAM
DQAAFAEDfAIFywBENkAWAAIAIyYgCgAj4NRHAORGABaAFkA28AtGABZAFisAUyAWMEYADAAAbQEA
7AAGOwBAF-AoJpYCgTAGMBZgFvALFwACPQAiEDYnAAIfAwgCABYQQQBQ5AfwKQapAoMwBiA2AAYA
Nr8AU1AmIDYwPAIRME0AMRAmIAEBAAkB8B3g9AIH8Hwm8AEW8Cv0AgcADxvwvxWQ9AMHFRAF8LsV
IAUQBQD0CAAVMAXwrwwA4AUAJRAFABX0DAUQFfCsEgCAFQCF9A8HNQAcADAF8KMHAP8CpfQXB2Xw
oPQrBSQV8P-qZmDDDA0PIgCWAvsNFZ4LDgxhDvMANzYuMTQ0MDQ3NjE5MDQ3YQ5EMTkuN-IOGTRX
DjDIhwRTAPgTIW8Z8JBu8Aiu8Iyu8AXO8IrO8AL_APCI-gDwAP4B8Ib_AQgAQwAu8IIKADM_8IEK
AKNOUE7wQl5QHvAVEQDzDF4wbkAegE5gDiAegC7wCQ5ADhBeUB7AHpAukCIA8whuEH4wLlB_UH5g
PvAIHjCOUB7AXlAuoB4A9Az_ASBOMK4gjlBOQB6wHhA_EL4gTpBuQC6AHgAiAPUCChD_CEBuIE6A
-hBAviBOYC4aAMYlIP4AcP4SIP4GQD4VAIUQ-gMw-i4gThIATzgQ-joNAANINzD_OQ0ARQAQ-icQ
ADo2UO4PAEXeMP4mDwBvDwD_FXDOEgALmQ4g-hOQrlD_JRIAORBSEBQA3w1A-hMAAjgCAK5w-iQW
AAxADGD_EhYAXRCOkP4jFgAoIH4WAIgLgP4RAFIwfkAAABQALLBuEgAswF4SACzQThIALOA_EgBO
cA5gLhQALXAeFAA9HnAOFABMLoBeABQALD5wFABKElBeYBQAavAVbjB_UBQA_wCQvgDOAG4wjkBe
AI7wEZ4ZAJx_EK6gjgBy8AgZANX_BTBeAI4AAlgCXvACHQBw7hAuEC6wDgYA-wIQPhA_EA4AHhAu
ID4QLhAOIC8ABS-wCSoAEU-wNh4QGAACQigughAbAAimAAAYAKYCaAIQLvAL-gUQFwBxAK4A-gXw
BhwANk7wCRwAEAADAAEdABAJHACubvAH-gUQrgD_ABwAP47wBRwABj_u8BoZAANXzvAGnnAbAJmw
cvAXghDu8AQWAK8ArgJYAk7wFB5gGgAiT8Bi8AIaAANcgD4CSAKBAH0ZHmDuAG4AGwBvwL4AjvAK
HQADLwKgHQAIIgSAHQAp8BOJACIGYBcAZiBOAA7wIhgAiAfwJh4gPgAeFADoCPACjgCeAG5gHiAu
AC4aADQJ8AEaAF8eAN7wGBoAAjgOAO4aADMK8AAaAFjwAg7wGRkAEBUVAFUBDkD_IBUAQAvwDWIW
ADgADlAWAEEQvgCO6wBnbmAe4A5gGwAlDAAbAE9Q-gRQGgAtS-AMYsATAE7QjvAJEwAfIxAACSfw
Og4AH4YKAE_0viD_KwAOEN4g-icTAKGOAA4wHiD_DRBu0ga0XkAeMP4FML4Q-gAiAPUKfsA_AJ4A
DjBOME6QLnA_8ADOIA5gjjAOMKMB8gZe4A5ALjAOcA6QDvAdHvADXrBeMA4dANAG8E8O8AQu8AA_
QP4CLQByIB7wZg7wDDoAJ-CICAD-BAHe8Ire8AO_8Iy_8Acu8Jgu8P8BAAMcgycI8wAzMy44MTI2
OTg0MTI3MDEnCHMtMTEuNzE2GAAvNjn8FwFQEBAE3x4oG3GeEA4gLjAucBvxEC4AFRAOMB4QDhAf
FQUwFR4FIAUtBQAVTgUQDRAdAG6lCcENAG4ABQ0AHQANEF4GAEANBQBeBQCQFQ0QXhA9IAUuVgCQ
LUA_cCUQLgBF0Rt-QE4FTgUADihGCw7CF-AMGyGAQQ8WITAxPgYVASARHiUGHgUBMAEOJQYuEADw
BSYOBg4GHgEwAQYuJh4RIBEGDiYuIAD-Cx4GPgURQAEWHiUBYAEGBQ4FIXARBRGwEfAMgQAd-yo2
UWAhFhEWATAhFh8WRgEQEQY_Fi4WAQAFAR52DgYBACFOFg4GDgEQFQEmLiUBIAURZREwAQBx8CZp
ABnwAB8kBPD-7w8U8A8O8AsOIAUArwAPGQ7wDB7w-9FJAAseN0kAoP8uDxkfFPAMHgBJAABUAC--
skUAHhJxjgDwAQ8e8AgOQA7wCQ4wDvAKDhCWAG8KTvD--xBSAB4QsZQAoA8ZDxQAHvAJLhBUABNA
BQAhCB4KAAFxAE8O8P_RXAAeoDQfFPAIDlAu8AYFAGIFDlA_8AQPAPEAIA8ZDgAe8AYeAB0u8Acu
BgBgbvAIfvAI0gAv-89rAB4QcMMA8BvwDB8ZHxQADxnwCh4PFA4t8AgtDhAd8AdNIA3wBS0ADUAN
8AUNgA3wBB0FADoN8A8DAC--NHcAHZPSDxnwDg8U8AtBAVALDxkOHZIB8AEtHh0O8AcODR498Agd
Dg0ehQBwLg3wBW0AHn8AsA49Lg0O8AMdLg0eEQCBAw4NDgA_EA4UAADnAwITABFgEQBKDg1wDhAA
AAkAIPAECACgDfAFDg0OUA7wBgcAQQ3wBw24ARANRQEhCQ23AR_VSwEeHxHVAALAAG3wAg4tHg1O
LfAB0QDxHh4ATg3wAR0ODS4QTg3wAE0OME4N0G0wXsAdDk0eQC4NsA1ODR7wBg0eED7wBpEAUQgN
DvANBAARHgQAhQwNLvAMLvAMDwARHh8AH36xAB3xE31vGfAHDm8ULvADDr0OoA5ADm3wAQ1ADk3w
AA4NAB0gDl2yACENABgA8BYuHQ5t8AINDh0eLTAN8AIeDQ498AdODfAIbvAETg1OHfABDo0OBgAw
bRA9BgAQIHwBM03wCQQA-AAIDi0gDfAHDh3wDA4N8A0EAG8d8A0O8InCABngSFAE8R0QGQ8ZKQ4Z
DxW3BQACAPEIGQ8WAA0A8RwgGQ4ZDg0JDTANIB0ZAAUTAPANOQ4NCS1wDQkAFQ0A8RsADRApDgAJ
LWkAHQAFDCIAEBrzBeEZDhktCQ0cCQAuAA0VCRcA9AgADRUAGSAdCQ08CQ0kDQUJHA0A8RkQJRQA
cA8UIA0OCQx3AGAZUBkNEA0-AHANHAkLEA0ZKwBHGGAJMBQAEClUAPECGBkNAAwOABkgDQkNDBkN
CQwuABkAGwCjCQ0cGQ0JHAkLALMADxoAAQO7ACIYSRgAEkwWABMVFQASEBQAIAwZFAABjABACQ0Z
IBUAMTwJDhYAQAUJDAkYALAMCQwJDBAZEAkNDKgAgQ4MCQ0JCw0O7AA-GDkgGQAEAU4ABBsAERwa
ADUZDAVQACUOAB0AFjwbACFJDBcAGEwUADMcKQUVAHENLAkLDQAJ8ABXDBUMCRAXAEEFAAUMLgBg
FQAFABkAGABxDg0sGQ0ABY4ARCUABRAWAHEMCQwZDQUOGAATNS4AAEUAMA4NGRkAERlIABRgFgBi
DQwJDhwJrwEiGVBEAEMNCQ4sEwAhGkATABEpEQASDBQCIQEgFABwGQ48CQ0ZBf0BIx0QEgAQDOwB
IAUQYwATHnkAsBwZDgwdHAkNAAwJFwCTAR8OLx4fDvEHHgAAsQAzDQwpsQByAxo-HgrxBRwAYwwZ
Di0MKXEBYAUaOArxAxkAcRwpLRwpDRm9AYIHGggKCArxAhgAMh0sKZEA0WEFAQXRCjgKsRUhGQBJ
ADAJHSxTAPACGRANALEFsQo4CnEGEQUBFQEfAFI8CQ1cCYMCkMEWkQooGlEGgRgAISwNGQCxCRAF
DQDhJnEKKPEvAEAcDQkOGAARECMDkAEGcQo4ChEGsRsAIgkdGwACKQN4AgahGDEWgRkAAswAswsM
GAwIFkEGASUh6gBwCQ1sCQ0JHEwBcAkWDAhBFqEZACUsDhcApkEFUQYxJgEm8QcZAADNAGDxHAUR
GRARABE8hAIBrQBQ8QsKSNE9AnAsDTwpCw0QUgKhAhZRCiihBUEZEHEAARkAIQAMwwCYCAYxKAEW
MQVhHAABSANwkQqxBiE4CsUAIBAdGgAQXIsCEQkbAMAIGnEGUQgKCPEAGQ3FADQMDWweA2CRChga
USqaAVAYCvEACbUDAR0AAFICs6EKKGpoCvEBCQ4gUQARABgAl7EKOBpIRvECGRcAAGgAssEKSAoI
JkEm4RkgjgED0AOgoQYBFgooJpEG0RkAAEkCEg0dALwFABwNAIEGQTbxDBoAAPsCsGEFoQbhBaEZ
IA0Z-gIAfQQClQESH8AENTwJDBQAYkEF8RkJMKABECwWAAJ1AlAVBYEJDgEFkRkNDAkLIA0pAD8A
BxIAIhkQEgABTwUlCzAQAKM9KQsgDQANBRAJcQBBnSANEH0AQAkwbSDIBQKLALIJDiBNEB0wDRkM
ADkAAOEFYR0gHRANDr8DgB8ZMA0ADRAdGAAEvgACJABREA0wBRkRAJ_ADWANYPEg8AgEABEPfgYL
HDUBJPMaJwYBFAEnDxYRDxAEJwYhBAYPFhYhHh8QAScGBR0BJwUOHQEnFQ4ZBiVYAB81TVIR8xwI
CAQBFAEGJwQPEBEPFicEIQYnDiEWDhYnAR8QDgUnAR0VJwEdDiUGGQ4FVwAvMTFYABRgDx8-GQ8P
nAiiDxlPHw8PBB8ZPwcAdE8fBA8ZXx8KAI5PHw8ZPxQkHrgAD2AAQh8zYAAUmQBZAAlfGQQJXgMA
PgBUAKgAD0gAKg_QABX-EwEpDxkZAQk-EA8ZDxAJBU4VDxZeHV4NBV4FDV4VDRkdBQGZABr-BwkE
fx4QPkAeUB4gDhAeEC4wPjBOEK6UAgssMTZEADL-HghaJzHwAw7SEx9_QgAa8QYgDgQfHgAODx0A
DQ4tUP4AAA0OgA5aKCBuHRIJ8AEOAA4gDjA9MA4AriAOEA6gGgDwGb4ADuAOAB4NEE4QHRANEA2w
DgBeHRANkA0g-gLwBn7wDa7wA64gDtAsALH_ARDOAL5ADmAOAA8AEQgHAB8_5gAND3sBJg-MAQQc
NFEA-hcADAZADBEWDAYABgwRHAEcASwRBgEMIQAGACwBMCEMEQYBIAEsAacAD1UAC-8UIwIwCw4T
AiAeEwIgDgsDGxIAAgNLAlseAg4DGwMeCw4jDgJTABwMUgDwAQIQAgMrAhACGwMOAhACCxMGAF8D
HgsCEFgAJvAHEhAOCxMbAgACEysCAAIrAw4CAAIbEwYAXxMeCwIAWAAc8A5ADxUHQA8WFyAPFRcP
FhgPFQ8WFz8YJ04HDxYOAgIAEDAGAB9gBwEd8QZ3cHgfGAIYAg4CKBAocAIOEAIOAh5QAA9SAR5A
Zw8WMMEppQcYUB8YaG4AAi5KAA9SACSPHxVQd3B4jxhKAC8AlgLwAAYMARYgHBEGDAEAEQwBLAQA
rwE8IQYMIQwBBhGVAiH_Fw8UDxMZAwkPFAAPEykPFAMPEwAPFCkOCQOAFA8TJA0AHQQAHQTwDQUP
VwAI8BQKEAQgARQBQAE0ATABNAEgESQhAAEpFCkRDw9ZDgEOAQQ5BAcA8AVUCQEOAUkEAQABDgk0
ASABCQ4UDv0SAQYAADsAMwkUCQYAbyABGRQZAW4CDCwxM4YAoAABJAFAAQkPDxQ1EwAFAPAXDgkE
GREgAQRJAQABWQ4RDgEOBBkEDhEOCQ4kDgEQETkBMAEUCQQpAJEECQ4BIAEeAR6aAKEBAAkOARAB
GQEABAAhCQQFACARGQMAHwGXAB0PlgACsQEwAQQpATABGQQO9QAABgDwAwQeCQFAASkBQAEECQQB
QAEZDjkAQA4FAVCCAAMFABEkNQAvASCGACvxAxEgAQ4JFBkBIAEUKQEgASkEDnUBAAYAIBQehwEG
GwEwHgkEGgEhEQ4aARIRGQEgERmJIwIXAREQFwEfABcBoP8CBgcEADcAFxAXMBcgFyAXkBc5BR0w
ABwBHAaADBYBIAEcBgwGAGIRIAYRDAEFAAI6Bi4MIRwBD1FcCfBBhwQgERABAPHQAAEQESARQPGQ
LvEtQBEgETDxjz8eLvEqMBEwARDxkw5NLvEqEAFg8ZQOXS7xKEABABEA8ZUObQ7xKAARgPGTDm0e
8SXQ8ZQIAEAkkPGZCABAJ1ARECQA8AEe8SMQEYDxlg59DvEkoPGYEgBgJHABEPGXQABgJBABkPGW
FAAiItAkAEAi4PGVCABQIfAD8ZIJAPAIHvAGERABEPGMfQ7xFxABEBHwCREQ8Ys_AJAYEBHwCyEw
8YgoAMEWMCHwCAEQIRDxiQ4rAMEhEAHwCgEw8VAQ8SUSAEIwAfAOEAAQJBAA8QQYMAHwF-FMEPEj
Do0O8RTwIhEQ2QBAQDDxIRIA8A0S8BwBYBFg8UEw8R4ujQ7xDxARMAHwD0EQISABLQHwCkIw4QDx
CF6dDvESUCEgARBB8AMBADEQEQANADDxRUAeAPAbDs0e8RRQEQAhEAEAMfADMVARYPFFMA8QAMEg
8Qc_bS7xFRABYBEwMfASewCAISARAPE8MAweAPEbC04BHvEW8BsBUAGgAWDxO1CxQPE4kAFwAfAa
EUDxO3ChQPE38CMBEAGgwwFgOJCBYPEuyAHgwAEQAfAUAcARQPE4gAwWAKBAEbAB8B1BMBEwEgDw
AnGA8S0wESBB8BoBUAEAAQAxrgDwCTuQcYDxMBABIAEAMQABUAHwFgEgMWDxO1YAcTFgMXAB8CEc
AfQHMRBxkAwAYWDxMQARAAHwIgGAAZDxLxUAcS_gAUAB8CwRABAcEABh8DrxMjBhDADxAzPwLAGA
ERDxLjBhUAxgQWDxL08B8AImISABYPEvMGFQHEEQMWDxMEsB8APwIhEAIVDxL0BhUBxRADFg8TFD
AVDwJRFAAUEAkAwAUVAcUSARYLIAYmAR8DHxLRQAsWGg8S-wMgGg8S1QDgDDoRDxIpAB8DTxK3BB
EACTIfBBDADxJ5AxEAAwHvBEEADggAwxcHGQkTDxGRAR8EYQACFBYBAAgRrwSfEnkFFQDQDxBRvw
RwwA8SaQYUBxkIFA8RoQAfBFEQDxBAwAUSCBoHEwDADxGPBJHAEQ8SMUACpxsBQAsBxRIGHAcVDx
F-BJHwAg8R4SANAx8AURcPEHcAEQERARYgDwCkEAARDxFxBBUAxAUSAR8AcBkPEFAAEgAWBzATFK
cQAcAKAckfAWDPEIABFQRwEbSBYAECFyAiAQAWcA8AMxMPEWMDFQHIHwGPEFcCHwTwzjARcQFQAA
XAAhECHRAWJKHAEQMQAcAPIAYfAaDADxBgAhAAFgIfBHGgCFFUAxUBxR8BsaALEBAAHwUfEVMAwA
IRkAcBzxAvBh8RkQABJwDwDxCABB8FvxGVAhcDHwGQxA8QIAUfBa8RhgEAD0BxzxDfBa8ReAEZAB
8Boc8Q7wWfEX8AUMAIaRABEQEQDxBRIAgIFgEQDxBPAwDQCQUQEwDAChQPEIDwBQDAAR8FARACBh
IEgBIPEHFQDADSAB8E4BUHEAIRAR8wBQBPAy8Q6fAzHwUIFvA4ABAPED8DLxDw0AABkBgKEAERAB
MPECFADxEDAR8FAMABEAESAhkPEC8DTxBwAR8FkcATABEFEAAUATAMIGkAHwUhwREEFgIRAkAENA
AfBcFwEAcADxAAQPGWALMAtgC-AJ8QXwdBIAURRgCjAKEgBQAPBoAfCDACEFChQA5QrwCeHwaREg
QVDxA-AGFAAAKAAQEZoDUTDxA-AHFwDwATALEAowC-AE4RAB8GYhIDGPAFADCjAKEBwAAwgArvAE
0SAB8HXR8AcZAPUA8HuB8AoKIBoQCiAaMBogFwA-NwsgAgAOHnE6AD8RCyACADJnMQALEAswBAAY
AGoARxogCiAcAAAEAD8QCyACAA8fCgIAD40hAAoLAAsKIAYAYAAKIAsKEAUABIMAFxAeAAgGAD8Q
CiACADJnIQAaABogBABgABoQCwoQBQAzMBoQAgAGHgAABAAPewCNHwsCAA8AewA6CwogBQCTABoQ
GxAaEBswhQABfwADHAAGBQAAngEPAgANTxAbCgADACBzCypbGgsaKwQAQAsaGyoEAJcbOgsaCzoL
GhscAGQrGhsKGwE4AA8DABkPQgERsTA6GzoLagtqC-oXBwBPqgAKIAIADvABAAsvDQ8YGwkLcAsA
CQsQKwUASxsvDQkSADCQCwpbARAbBQAIAwABcQEPAwALBiMACFEAHChiAPAB4AkIACsJGwAJUBkL
GAsIKQUADxMAATQACXBQAA9qAAUYGg0ADwMABB9wZgAN8ghgCUAJABsJCx8WAAgJEAkLEAsZCAkL
GQYAABkAHxcYAAABEgAAiQIPAwACGBoIAAQNAAoLAAQDAB8wcQAZERAGAPUHAAsHGxkAFwALCQAL
ABkHCwkACQAJCwgADxwACAMXAAV9AAwDABgaCAAGDQAECgAIAwAPfAAOHwh8AAMCBwDyBAknCRs3
CQsAGwALBwkLCAsJCxcHAA8YAAUSFxUAA30ADgMAFBqqAAauAAYKAAkDAA90AAkZCBgAFReJAPQF
ABsQFwAbACcbAAsACwAHGwgLAAkHAA8ZAAYRBxUAHyCHAAMXGgIABhIABx8AAwsAD3EACxkIGQAU
B4YAAAcA4DcARwkICRAbBwkICQA3BQAdVxIAETcQAAF6ABUadgADBQAIAgADEQAmCwobAD8LChBe
AAMVCBIAJDcJIgD9BBALpwAIGwAnAAgLBwAnAAcLBwARABAnEQAYCHEABgUAERppByUaUBYBBAMA
ARsAZhALCiAIG0cABF4AHCheAAEFADG3KReMBHIb9wMpRwu3DAAM7QQBWwAEbABRAAsAChB9CABf
CC8KECMAAAMDAHcHCxAbpwu37AQxpws3DgBhC6cJGwkXdwSCCfcCCRsJ9wINAAM6AA96AC4BWQAX
CNgEIfcADQBSFwuXCydCBJIHC2cLlwu3C1cPAA5OAAh5AAJSCQ91AAwCVgA45wtXqQQxBwvXCQCF
CRcLJwtXADcHBBEnAgBRVwCHCxcKAAIYAAfKAQpnAABOCAECAA_FAAwFXgAZd1gABZMEAxoAAQ4A
UkcLZwk33QODRwtnC2cJ5wsPABUIYAAbGmoAkBoQChsKMAobCoYBBwMABCAABgMAAlcABVMAFBdp
ABK3CQAyxwk3qANR9wQJ9wQLAB8gdQAGQlALClALAAUDAAYmAAVwAABNABkJBAQh9wEIAEM3KzcL
hwMxVytHDQAw1ysnDwAbKGoABw4AA2EADQUACBgAAVEAEsdLAANfABCnBwBSRwl3AFdxA9YJZwl3
ANcJZwAICwgAWAEJaQAHEgAqCwoTAAlwABIgUgAy5wlnXAADYgAR5wgAEzddAyAbJ8wBCQ0AHzB4
ABUIAwAOXAIRKSYCMAtnKdcBV2cplxkLaANUCfcBQAloAApFAAYFAA8DAAINGgAAEQQUDAUAEpdI
AyP3CAgAPwBgCUEAAgYFACsLCgsADQ4A5AsKEBcL9w8Ltwv3AguHDwMhC1ffAAgOAF8HEBkQC3AA
EAOkAQUDAAQYAAZvACEAh10AE0fwA0N3C0cACQMj9woIAD8BUAdrADKSCfcPCecL5wm3BAN1JwkA
1wkANw0AM8cARyoALgsKSgAfGmcABhsaZgDA1wkA5wn3BgkAZwm39AKVNyAnCYcgJwkHDQA_ACcA
PQEPVQAAFBoJACkLCg8AAhQAcgkAtyAnCZe0AzAgJwmgARHH8gKCFwAJCAkXCYcHABgXFAAf19YJ
BwNiAAkKAA8PAAEyBwDHTABSpwDXCVcLAFknAGcwB1kDBg0AVTcQCwcQOgUPAwACGxoIAAoLAAls
A2cLZzA3C2cCAEdHQAkHaQMDCwAfAHUAOXZnQAn3KWAJaQMECgBPECsYID0ABxcaOgEHEgAOAwBR
V2AJ9yhSAwSPBiU3EGUDFQd3AxBH1AAkCBBzAAlaAAYTAAkXAA0iAHELChAFChBXWgABUgADRQEB
cAAzUAcJ8wo2NyCXDQB-tyAXIBsACHcAIxcadgCyUAcJpyD3DSC3AFd2AyUHQAsAlCcJADdAFyAY
ELQBCVEABhMAAgIADCMAAwoAkAEKEHcA10D3BU0AEadnAwN2A0gIEAmHEAAwJwkHFAA4ABgQfQYE
TwAnCwoTAAQCACoLCgkAAI4CMQoQZ1YAEIdNACT3AVcAJtcZdQMZIA4AQQkXCQcVABYAOAkDTQAI
AwAUGhgAGBoLAAQcABAaeQAxtxmHSQAo9wFXAHBn8OAPBwsGAgAvAAYIANQxDx8QxDwfBAcAt18A
GwAGMAQAYD9AGxACAGE-OwBrAgAmX0sAKxAbBABhCzUdoDIzLjA2Nzk2NTMGAARBPPIBLTMwLjc3
NzM4MDk1MjM4MlIdHDOpHdBwd3AIXxgAXhAOAi4gjSFfMA4CDkDzJxz2AbAnECcPFhgABw4fGCgA
XQgDAA9JABwwcAIPviIzLxUIGiISGAgAzyhOOD4YDhguKA4oDlMAHPAAAAUCEAUCAAUGAg8VBQYP
bCP0BBgCDxUPFA8YAh8VAA8YAhAOAhAlABAOJQCgDg0OAh0OAh0ADhwABMQALzE2cgAS8AAwBPAg
LxQAIQAOFA4fFQbHITANBgEOAGEGARAOFAUZAB8dGAC-PQEgPmUgNzEuNgEABZoCOjAuNhgAAUgB
HTaVNbASZYAGIBYVYBYfHJsEMBVQBaEEYEYFMAYABl1D8RYABgUgBgAGHgYQDgYOFiAGABUAFg4A
NgUgDhAGBRYOBhAeIAYeYUJAHjA2EEM2IEAOQgCvBj5gHgYusA7wC0wCCxox1yDPBBAE8CYPHCAO
IAwAOQAejycPHBAOEAwQOQAa3wgQBPBSDJAMEAyAHDBzABuvBARQEgACAAIGIHIAGwWEAwWeJRES
BgB-Av4DCH4YLtADHiAvFU8AEghEABQO1wNv-gEIfhhOTQAdow8YCFAYUBhQDggDAC8eUEMAHDAW
Dxa4VDAFDhZzVCEWDg0AFyYMAAIZACcOBhoAD-8DG-ACCARGDxYGADYuACYuBQAWHiWgAs8VEA4l
DxUgJQ0wLUBPAB2RjA8XDA4MDgweBgA-DhwODgAODyIFHS-8MDEAHT8QDxeAADjxEx8bDxMTDiMP
GxMNgw0DDgENEA4DDgETDjMNDjMNIw0jDgMEAB8DVwAc8AxhDxMxDgMODxsxAw0TMQ4TDjETAQ0B
DgMOAw5cAH8DDhMNDiMNVQAc-w5xDxNhE1EDDlEOAw8bDjEzDgMRAw0OIw4BDSMNE-kAHR-xeQEd
-w1wTxYFEDYeBQBGDgUAJg4GHgAWDgYeBQBVED8VTAAa8SYoKAT-FwUPH-8XFg8fBP8XEgQuDx8Q
-hANEA4NIP4RAB4NMP4NDR4wBRD_DgReDRD_DQ0QTgcAEGAGABIgVFUwEP4ODwAA2CwASD7wCw0Q
Ph1A-goNED4NMAX_Cw0QDQAODUD_DQ3AfjCh-gUN8AL_BR3wAQoAEe6YNgAZN-AM3g3wC74d8AgO
AL4d8AueHfAMBY4d8A2OLfAMCAD5A34N8BAFTh3wEgUeHfAVDg3wFgQA-ynwFw8TDxEfDDAfE0A8
8AUMDwycECzwBywfEewADPACDiwPDAwbPB8RvLAcHowLDBscCgscCvwBAC4BHvEB----cBD_DR8f
HrA_IE4QBaAAD6QAd3AICAT-EwEQlFYyHjAO2z0QADEvAQIAD0oACywxMEsAMRAfE-pCTx4QHjBR
ADKwHxMQHjABEB4QAQ4hL6ABDiAeAQ4BEA4AkQMwAQ4BDgBBDgEOEQ4ALwMOXwAdQQEPEwBHACEA
AQgAIQABZQAADAAQAA0AD2wAPPACAw4ADgMeAw4ACQAOEw4ACQN5WoAJAwEDARABAwgAMBEDCQgA
ERAGACMDAQcAHwNrAB1AAAkPE3QrUQEJDgkDxAAwAwkDegAAEABhAAMACQ4J5gAAlSslAwEQAAAH
AB8JbwAgQkAFAkAjC1AgDg8YAh1AFg0bCyANDgQA3w0CHg0CHgANAhANAgBhAB1EXxMBLn8BgwE_
AW4BPgE_uAFPTiAOMIsBHvAA-xMADxcQTxMPFw8TAB4gSFggIC2nAk89EB5tTgAeAIxYQBMQHg9G
AN8OHQAeIC0eIE0gbQ796AAeP-8XMDMAHfACnxcBXgEPEwE_AQ0BDR4BDg2sBlABDRENAwoAEB0W
AAQOAC8DDV0AHWA-Fw8TXxdMAiE-F0oCER0gAi8BHa4COiIPF68CJA8XsAIYHbACMg0DDaACMg0O
DbACBBAALwkOsAIj8AImDxYmLgY_JgUAHhYeBQAlBs1CgRAODQAlAA0V8kI-JQAlvQEe8QEQLxUg
HiQPDw8fAA8SBA8UCwDxCw4PEg8UNA4ANA0PHw4ADQQNFA8PHh0UDx8NDgAvDB1uAh6gAB8fDw8f
FQ8UEI0O8AoUDg8fDxUARA8fDxIADjQPDw8VAA4kDw8ECAAyBA4ECgDvBA8fDg0EDg8VAB4NLgxy
AB2gkAUfFQUHBgAVDnpb8QgGDh0GDQUHBg4FHQYHAAYODQYHAAUHAAgArw0GAA4NFgcGAAZkAB2g
cB8WBQcOBRAWDn8BERZgAACVDSAGDogNEQcKAK8HNgAOBgcADgYOnAEeACkzgAYABw4GAA8Vyw0Q
DnROIQAFXQDQFgcABgUGBwUGBQcOBnkAkCYOFg4WDgUGDidfD2oAHUAAFgAGbABRFgUHAB5ZAIEw
HgcOFgcAJmIAEAVhDgFhAD8eFg5fACABbAEBzAAwAA4GYQAAbQFBHgA2HjsMEC7VCV9lAF8VELcA
HgHDBUQCDxUw5hABCgByUAUCEB8VAN0FIAUekw0AnEgQDXpgD8cFHxEHuQJwHxcODxQHDvFd-yEX
DQ8UBw0XDQ8PBw4HAA4HDA4MAB0HBA0HDgwABw0HDQ8UDQcECwcOAAQMBw4NDhe7Ah6yLxBPHgEv
ED8eIQ8FAOEBHg8eAQ4hDgAOYQ4AEeQHLzAxVgAd8AAfHl8QDx6PEBEOIQ7xDC6WBh8R2ggeMGEP
EIkA0TEgIQ5BHhAhAHEAMRCBCABiCB8BTgANDy06NR8xYQAV-xUAJBA-GRQQDgAEDgRAFA5QBA4P
HxANEB4tDgQeJB4EHgQNDiS1AB1QFA8fDxnKVHAEDx8QFA8ZCADQAA4fGQ4QHS4gDQ4NFIpEgA0O
BBAdDg0k9gsvDTRjAB3wBYAPEAAGDhAmDgAOBh5wDhYBFg6AQQRPBg4RcEwAIxAAEC7-AQ4GDoAe
AQARDoARHgEAAYBLAB3BDxAAHgEADkABACEOCgAggA7ILjBwDiAMAA9OAB0icXACAA_AASIQLxYC
Eh8FALAfGQQPHxQOBBAfGegBAH46fw4NUBRQBJAvAh0SBFsA8AQkDh8ZHg0QJA4EDSAUDgRADQ4N
BABfUARgBCCCAkgfMYICTw9jABZQBgQGDxQFAPABHwYABAAGAAQPFAAkADQPH3UAwxQEAA4mADYf
GQQGHQMAAHwID8kBHTEADxb5OzEeBw4CACMABQIAEgYCACEPFccAQw0OAAcCAAMZACIADQIAD3EA
HfAJJQQABBAlJBAEBTQFABQVBAUPFgUABA4V_BLfBDUAFRQVDgAFFAUUBd8IHvAA8AAEYAQABEAk
UBRgFEAVaAAPQwAd9QAEAAUUAAUADxYUBQ4EDgACAN8gDvAEBB4ABA4AJB4UmQAe8AEEYAUAFAAF
EBQFDxYEDhAEu2bfDhAEEA4wFGAUUAQFQFEAHf8Ldg8WFR4VEBUuFXYOFR4VAB4FHiUAFQAeFXZK
AB3wBUYPFhYVLhUABS41Rg4WFS4FEAU_WmYADgAPTAAd-wkwFh8WMCYOMBYeQAYOBkAWDlAeQB4G
MDZIAB1QHxYGQB5AAFBAFlAGDgMATxYOQCYlAR7-AfAOFlAIBlAWQA8WBg4wFg5ZCh7f8AgPFmAO
YB5QLkAGHn8AHjEfGwO2D-AHDxsBAB0TDgMAAQANDhMNEAEAHQMOEFc2YA0DQAEADQQAP1ABAF8A
HRMzYAAQAxYU-wIQEx0AAxAOHQMwDgANYAPwBU4AHUAPEwMPUAAwgw8bUQAQE1oUoQMADgMADQ4N
AA1mAL8OIw0jDUMOIw4TDjYNHhETYABBMw4zDrQAUSANDhMeDgEwLjMBBwCfExENMwENIw4TWQAa
YBgaBBEPHPgI8RLQAQweDB4BDgzAAQwBDA4BDAEOIbABDiEcLgwOAZABDxAXAPAIMRwOAYABHQEA
DhENESwBgB0MAQABTQFCAEJQAQANDgCTLAEMESABDAEcDgBgDgwNIQ0ODwBBTQwRHEoOIAENYwCR
DQEQAQwNDAENcQDwBQ0HDhwHARwNAQABDB0BHQEMDhEcZhAQDHAAwQxdEQ4hTAEdARARXWIPAKcJ
MR0BMA0AIQEOAwBQDQEgbREwACANEYYPUDABPQwNEADADTEeAUABDRwBDSEOYABgLgFAAQwRnQ8w
HiEdoFCADE0BDQwBHj0MAJANAT0BDQweHB0mAPEFAAEtAQ08DhwuAVABPREdPC4MAWAJAJ8eAaCR
DQHAkWBuAQsKHRvwDxgYBPCFQZABQCEvEB8ckA4BEBFPEC6QHgEAXT6ADNEIMS0_DAkA8AkBPR4N
DA2AHB4BPR4cDQyADRwOER0eHSwJAAAEA-ELES0ccAEMMQ0MLj0MYB4RHhEcHgwNER1ALgE_APEI
HB4NIQ4NID4RDA4BAB0cDjEuPR4MMT3CAcARHj0eEQwBDBAdEQxBPjAcHS4HAKEQDQEMAR4RLA4c
DwAgAB1VCwHxACAeEQ0AUCEOAR1MTgEfEPIAGTEKDQQZAgIRArARDxwMDxAhDg8cEQ4HABgCsBEM
DgcNHAcBABEcwAEwDDFMjAIQEcEBAIwLEQ0DADEAAQyWCxAQgQKPMAEcDgFQIUCHACuADiEMDhEO
HxAeAoEOEQwNBw0MDYYAUC4MAQAhjgKTAQwRDQwBPAEAbAIHhQAQDYUAHw2FAB3wDRAQBGABHxAc
EYABDhwfHAFwAR4MHQwBcFEOAWALABEREQDADgFwAS4cDgFwMR4BKQAhAQ4HAEAOAZAhEQBgHQ4h
cAEt_gIwUAEODQKwDA0BUAEcDiEODA3WAo8OASABDgwBIJkAHNEgER8QDxwPEAGAEQ4v4wPgDgwt
DgFwEQ4MIQ4BcCGpAGOAAR4sAYCXAAHFABAepgAgEWA5BJARgAENDC4NAXDFAZANDh0BYAEMEQyG
AxBwyQEwDRGQoQMfYJcAHTAMfxxfAPALPB5QAQ8QLB0cDnAxHRyQAR0cAYARDQwNAYA3AhCAsxIw
DBFg_QAgDA5ZBCBQAYkEAT0CEZC1AW_QEQAR8DR_ABkAUhJQDx8PFARHEvAUBBAOBA4PDw4EHh0O
DxQNDg8VPg8UHh0EDhQMDgAODSQMDhCNAW8PFSAuBAscPxnxCBgYBMARMBHgARgxGAHAIQgxCAHA
EQhRBgCAAQ5BDgGwERiPA5UhsBE4AQ4BGAEIAMIhOAEoAbAheAGwEYgIAAgEACYRiBgA-w8RiAGg
IYgBoBGYAaABqAGgASgBaAGQASgRGBEoARDABBwArgAAQgAAsABQQBgBWBGzAOFACBEOMShRCAFA
EQ5RGLgAQjABDnG6AFEwAR6BGLQAITDhBgA0COEoBQD0CdE4ATAYwTgBMAEIsUgBMAEYoUgBQAEI
oQwAVDABGJFYBgAQKAUAIBihBQBmkWgBMAihBQAPygAeAN4BQAEPDw0uA1ANHxcBEG8GIQEQOQZA
EAENLAUAnwchEBENHAEgQe5AGgAPDFAUDxQADssMIBQOCAAwDzQekA0QFQUAEA83DRAehxQgBA5A
Ar8NDBAuDQwgHQ4MIGYAHP8ETxQEHhQOFB8fLh0wDQTwAjEA4UIAHAHfAhAewxT-AgQtHgQwLQ5Q
DQ8PcDEwYQBxSgAdEBUpA6IfIAEEDxQPDyARDgAwEQ8UOwP-ACEEDhAxDxQgMQQQQQ4QQVsAHEAB
IA8fqQ1AESAPDxcTAAgAUQQPFCEQFwBBMRAPDwYArx8PFUEQBEEQDxRgABwgABbwFBAGAw4THgMA
AX8WAhcAKR4EFgAOfQ4PXAAkQDAGHgQEAD9AJTCwAB1QDxYPGRAFAAb3JABpFmAUBA4EDADlG2AP
Fg4QCw4eABMNHQAUDBwAD8oCHSAPFpoXAVpyMCUADgFyEh2dF0AOEB0QPnQAKnVeHQUABR2zFw9e
ABH-BwAOHxUALQAlIAUeQBVQDWAFYA5gBWBHAB0RFfUA-wMQJQAOBTAdBVAVcA5QFWANYAXtACb-
AUAOBfAHDmAFDxZADQAVIBXZAB8QIIwb0AAFMBUfFkAlIAUADlAuAR8gLAEn8QkFAAUfFiYFEA42
BQAFHgYFBgUQDhUABhD2ImBABQAVIAUVAE8wBg4GWgAcETAZHSAwAQQNwTABI0ANDgNADgEOUAMA
L2AOTgAcgyABDxtQAQ5AVQBQDQMOMB2xDd8NAw0DDj0OIw49Aw0TVAAccbAPE1ABA1ChAEAODQ4D
VwDPDRARHgMdAA4jHQMNTwAcIBM-8w1iDxsuDRMNXR7DAw4QLhMOIAEOAw0wBQBfDQ5AAQ39AB0Q
IuwZoB8ZLxgCBC8ZLxgMAABPAiMCEKER8gAfGTAELgIvGAQeDxYALxgWAD8CHxXxAh6fUQIRTxkP
GAFfBQAEPwJeAqsEHBA0xBIQRZwSIC8VJxMwBiAEYRGfMDQwNTAuBGAEowAeMBAOAvYRcRUPFhAN
DjWzGDAVAg7cJgAXAIAuHQ4NJQASDoN4bxIAAgUOAGEAHNASBS8VAgUfGA8VPxgSkAn-CAIdBQ0C
DgIFPQIdAE4NAA1OAC0eDRUdVwAc8AkvFQU_LxgOHQ49Ai0ADRIeEk4CDhIQDh1VWVAADg0OHep3
DvpMDw8BD7EfGAIAAR8QAA8VEggAMAIfGAgAsg8VLxgQHxAfFRIQFQASEBQAAhwAAzUAD20AHDAf
EAFKACAPFQkAQBIPFQAIAABLAAAIABQvGAAvHxUXAAEBOAAPcAAcwwAaBQAaBQofFAkKHgMAjwAZ
BQAZBfAQOAUeIG8eKxyAXx4ABQ8WTx46FUAPFj8enAJABQ4vHp8CUQ8VDh8ePBXPBQ4NAA8VAAwA
BgwOQgM1Mk8ZHwUABkIDLzY1VQAUcF8WFh42LjawdL9OZh4gRh4FIDYuBQQBHQQdH-8AXgZOFj6G
IBYgBR4QBS4WRgAcsD8VAh4ATxgOAA5NbAOAFR4SBT4FHQDtfwCJA38OEA0OJQAVVQAfAA0DLB8Y
DgP-AgUOFV4APg0VDgAVDgAlDiUOWQAh0E8YDg0OPQ4tDh0CDg2-KhAdpgARHQ5RMB0CIN0DLw4g
6AEeUAIuEg4f0QNfHQIO8B4-ABxTAg8VAh5AAP8BDQ4gDgItQA4CDWAOYA7wAOMAI8AAbQ4dAh0C
AAIOIg6cUTAdDj1tBI8AAg4AAg0OAiwCH2AWEC4GEAUvLXAFJg4GAAVGEytAJgBGDhAATxYABT46
Ah3wAhAWDxY2BRAGDgYOJgUABg5GBQCwBi4GBQAGTgYAJh7TCgAaAA_3Ch5hFRUQFRAOeX0xDxgQ
d4IgDQCaAlAOEA4VLXggcQIdDg0QBQ0MAQ83Ax0gEC-Wf-AJAA4lDgUPGAUeFQ4dAA4FPgIVDgUC
LgUuZQEfTWQBI3APFiIPFSACyAcBYiUgBQIHABACdDFAHiAPFpMfMQ4gAgkAMA4gBWEAAhsAD2cA
HGAAAg8VEi-8HyECPwYAYS8YAhAPFZAFwiAOHxgCIAEOIhABDzoGQxEPEA5CBg-hBh1SGBIPFSJj
AAFEABACNSXyAwIOERACHQ4PEBEAIgAcAQAdAgYAHw7mAR8hAg9cACAFAIsm8AIOHxYOAAIODQUS
DQAOEg4PGHJXIAIMMwQwAA4MGQAIHwAfDcgFHkB-GHJ-JAEQAj8BEQIOAAFLAy8PGOgBHkCQFS8W
ZCPiNg8VHgYOJg0FHjYNDlYDAA9LABwJ7yuARg4GAFYOAGZQLg47Iw9aDxEgFgaVAEIOVg0ukgAw
BQ42vYAA9ANfFQ41EF1SABwB6C5PRh4ARrciAA_dACcAlQxADhYNFeQAEAb8HK8GLjAVDgYgRVAd
oAAhD4gvBw-XATAAPQFfDhYADQU_ASCx8BYfEkAODx0PDjAGABAKBwAvCQpGABywED8SIA4PHR8O
Dx0HBf8NDw4aDA0eDQkaCQ0eGBkYHhkfGBkeHR4dHhoeGhMDHWDwEB8SUA_cADISQAoIADEwCgkH
AA_lAB0SEQIAH-DMBB0xEQAhAgAQEfdTAQQAXwFgAfADRgAcYvEJABEAMSUkEBAPTy8BwEIAHAB2
UnAPEAABADwBnR8RHHkMIwwODAAAPyIAJhZfAB4RDnBaAB0AyyQgAA5pGUAADgAsvywRPLIsJCwO
EAAQDokZD1kAHoAwDxIZDjAOCf9o8QQICg4wDh8fDjAOGA4wDh0OMA4aDAAPUwAc8BAPEhgeGR4f
Hx4JCB4aHggKHhgeHR4ZHhgeCAkeHR4KFQAvHR5WACEEngATGqIAALkAEAiKaiIKCLAAD1MADA9H
IyMPMQsFgkYOdg4mThY_PigfNvgIHl8WBQAfFo8qCABfbQBnNE8dBQ4GvBErEA68ETYWDgYNAAEY
ABImFgAPXAAMDxo1OA9jABWlMQAvEDEALkEAHgYAEDH_LT8xACFKABxADxBfEVMx-wVfEBFOEV4B
AAE_EQA_ERAeISAxMOUOHwAbHgH9J68BHkEAIfACMRDRkAAeJwEOAgAgHgFrVG8OYAFwQSAEFx8A
jA4hPxR-XEAANAEA2i5wFA4AAwAuBAYAAAwAkA8UAAMPEQ4EAQoAD3YEIUAvFA8TdwQwDxQUeARw
JB4ADQA0DkEkJCQOEAAvDgR4BCFgBWYAFR8WDiMwJWYAFyMwDgUe-nk-HiVmvwcgECUDIyAuJfwI
AQsAED6CAiEFDhEAHwU0Aif-Bl4BbhFeAQ4BTgEuDxEeEQ8TAR4hDTgCH98gEQ4BIDEgMRBRAPEP
PwAcgC8QLxMDAT8QjSGQLxABDxMTAT8Qdi_ALgEvEwM_Aw0-L2AeEw0DIQ0WAA9eABwATwAgDhOS
FFABAw4DASYiEC4JAAAEALEjHhMeAwETAR4DDhMAArICHxFiABxAESABH1lajg4xIFEgYQDxJWYP
FWVDLzY16BZvD1olIh44FR4xFAQO2BsgDj_9NP8EHQEdAB5NAA0OAS0BABEdAR0QUX0DHQCtMFAO
AQBfE8oiMC0BzXQiTwFNcYBHAB3QIAQQDxMARA4PFA4EDVUpswAOBAAkDhAEDgQNEgBBDgQgDhkA
EQBfKg-2Bx30Bm8bAw4RLxMBAw4NQAMOAU8QAw4BTAQAH4NNABwBRYEAdhkhDxURBREgSCkSBKU4
AR0AAG4qEA4zMBEgKwACGgAPZgAcMBQAFFYAAKIcQQAuAA4OABAkKI0AByoQBB1mAYCOESQZAAY-
jQ9fACTwAg8WIA0kBSAFLgYgBgQABA0g8Q5BACYAFIliD10AHkAQFBAFEwOBBAUAHxQFDxUFAAW9
ACIfFFsmA70APy0ALVwFJxEe4jXgPhFOEB4BHiAOAQ4PETBhBR8wUwAk728QAe4QXiBOMD4wIQ8T
ZgUegA8TMC8QATAuS2EBBwACAwBPIQ8TMFILHoQTLxAwPjABLgUAbx4BDjAPE7wIHcAwMR8QAEEu
AFEwESMvJSEPE_sFEAAgNTADEQC9JB8djgUdMDEQH1oJgCEgQQAeESAuDjlBHiEdEGU1LwEAUgAh
sSMPEAMucQBeEFEQMTkATjkgEQ5KXB9ejQYdoAEfEwEeER8QDi0_c0AQHRABxxsmEB0CAAAXJi8d
AZEDGiAoEAJ3H3LJDR8iARAJDg6ODg-HDkZWcQBhEFECAA8_ABwAAyIAJwZAAAQAHssEYA4QDiQO
MBEtbwUwDgAF8L8GHfALwQBBEAMAISADABEwAwARIA8RECEAEw4AIQDROg80DSMPgjcqDVUAUhAT
EA8RYTtwAx4DHgMuAKwqMAAeEw8PHy6uAChAHxgPDgQAgA8YAB4PDh4NnmsIBgA_Dg0eBgAPZQAt
EBBeAABwMhANrj8xEA4AVzbfDiAGHA4ABgw2DgAGPKwNIP8AJg4GLkYeRg6GDsY_Jj5WpAAeEB9_
GeEOAC4gDw5QHQ4gLS4dHg8AIA5QYS8vLgCSAB8iBgUAFCAVLmo2IAYFBAIQBno3cB4GACUAFR74
Dl8OJg4dBfUOHiEfFuUOMCUmAFwCZAYOJQANBWA4AGUAEA5HGl8_HQUOJpYiN8EeAAUNBh0eBQ0G
DRULAC8GLV4AHUEBAA8RswKBDiMAIQADDgMGAHAAMQATADEAyw0RIQYAbxEAHgADAFUFClBtPTh9
fQ==
:: gfx/2.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAyLTI3IDIyOjU5OjA2Iixtb2RpZmllZD0iMjAyNS0w
Ni0yNiAwNToxMTo0NiIscmV2aXNpb249NDgyNl1dbHo0AEcrAABpawAA8yF7WzBdPXtibXA9cHh1
AEMgEBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIAMd5PTAsem9vbT04fSw_AP8H8LkE
JQb-FRcG8CYG-hgG9SEG9SUG-g8A6cAi9hzwJvZ_9QkG-QEXAL-9AAb1Hwb1Jgb1HhIA-wpyCgb1
Cwb1BT0BCFMBTyIG9SQPANwfIUMC-yQfJkACAhAjAwAPDwDMHyAxAgMQJQYADxIA1TkG9hwQABIJ
IwEODQIP7wG0BA0AEjkKAQ-_AdofBucD---UD-4BAw_eCws7MX0s3AvxCCFGUAEPFRAWAQYBFjAB
DiAmASYgAQ4wEAD2DBABDkABRgEAAQ5gQQABDgBGYAEOABYhFkABDjEAMBYhFjEArwFGARABDlBB
8BEgDBkIggASIU8AAFgAAYIAHyGAAAQAIQAAggA5JgEmMQAPggAj8AcICAQwDxkBYB8QYAQOQA8Z
DkANAWAeDAA-DQ4ASQAcD0gABR9ASAAc8Q4QBwUGDxUgBxUAFRAGAAUQDxYFBwUHBQAGBQAHDhwA
8QEQBw4GBQAVAAceBRAOBQceHAAPZgAcAGMA-xsGIBUQDxYGIA4FEAYQBgUgDhYPFUAGABUQDQAG
EA4FAAUABgAGBRAFAAZdABz-IZAFHxUFBwYAFQ4GDxYABg4dBg0FBwYOBR0GBwAGDg0WAAYHAA4N
Fh0GAA4NBg0ABmEAHvEAcB8WBQcOBRAWDgAeBQAWXQCxABYOAAYOBgAWAAcKAEAHNgAOaAAfBsoB
HuVwBS8WFR8VDxY2BQ8VAAcA-wQGBQYVDxUAFQ8WBR8VEBUeMAVgWQAcsJA1DxUQBR8WBg4GSQD-
AjYNEA0FFg4NIA0OFgUwJQ1wTwAczzABHxABMAEPGQQPFQwAEQ9fABwORgAPDAALD18AHDIHHxbN
AjEPFgfOAiEOB88CHw7sAkIwBQ8W2gIiBQ7aAhIO2gIA8gI-IAUOGgABD5MCHfAWDxUFFgUPFgUO
DxUOFgUWAA0OBg4FBgAGDQ4WDgAWDR4GBQAFBl8AYAUABg4AFckATxAtAAbMAB4gFQeLAgBMALAG
AB4ABwUGAA4ADlEDIBYAFgAREHUAARMAEAUFACAABkYETwYfFRDQAB7wAg8WBg42DxUOVg0uNg0O
FgANzQD-BQUABxYQBQ4NFg4NABUAHgUgHQANWwAdEEbBACBGHgMA-wg2HgYANi4AFg4GHgUgBiAF
AB8VAAYHDlIAHdCA9QAPFnUORQAFAAUusgQfNUwDHf8DcEUgZQBVDxYANR4FAE4FEEWgzwIgQQ8V
FQ7PAtsOBg0ABw0HBQ4VDgcNDwASBg8AER0OABEdDQAPmwEeMBUOANECgA4GDRAFDQYODwAfDQ4A
EQ9pABzwDVAGDxYQFRYADgAVDiYADxUeJgAODQUeJgANDjYNAjE2AA4FAA9XABxwFg8WQA4QBncG
UQAWHgUAvAUAbwavJg4GEEYOAGYANrYFIABZBQCbAmA2AAUOJg7cA_8FIAUWDkAFYA4WMAUOFqAE
HeEmHxYFEA42DgUgBQ4WDkwA7wUwDhYFUAVAFg5AFg4FUAAc-whwdQ8WhQ4VHhUAFR41AAVwBQ4F
LhUOJUYAHDEwdTCmAt8OBQ4ALgWQHiUOBQ6VqwIfIRUgYAUhFwYHACMFFm4FEgUQADANBQ53BQEC
AJ8eBQ0GHQYeBjVlABxBUA8WRjcHMSYFBggA8Q0WBRYPFQAFBgUPFg8VBg4ABQYPFh4GDgANBh4G
pAJPRQ0FDQoDHppRAhFPGQ8YAV8FADJPGR8FADMCXgJUAB81VABAHzNUABQQBfMCIBVQiQIzJjAl
CABPBRYOMK0KHlAWFgVAFYECUSYFQCUwCAAAlQIPSAAc8AIPFiUOJXCFDkUALjUADgUOBYYDL1WA
RgAc-wN1cAUPFjVeBR4FDqUwNQ4VDjDPAh7-GA8WUA4PGBZdBT0FHQ8VBR0FLQwFCAUIDB0FDQUI
HA0MDTwIDQAMRQwEHWBwBgcmBxYtAVEOFgUOEAMAIgUABAAiBwYEAAAcAF8VHgAFHl0AHf8SDxAB
DiABABEQQRABDgEOARABAjEAEkEAEkECURIeIQIBUAAc-xAxDxARDgABAgESDgABAAECDiABDgAO
MAIeQAIOUAHgngAe-w0RDjEADhIBAgEwDgIBAAEwDgAOAUAeAlAOAmABFwcdMAABIO8AMTEQIeoA
-wNBAgEQQRIAQRIAAlECAQIhHgKeAB6vIA4gBQ4lDvUC8OUHHf8A8BYFBjAFDxYWMAYOFjAOowkf
-wPwEAcFUAYHDxYFMBYOBjAGDgWBAx7xAicGMCcGBSAnDxYFIAYOFgVgDgBfJRAnNQD8Ah7-GAAS
HxARDiACEQ4QEhABDgABIg4gEgESDhACEQ4CDhAhDgIBEBEeAQ0JHv8QcB8QAh8VHxBCDxUiHiAu
ER4vEBECAQ4iASIOMi4gHk4AHP8SgA8VHxACAA8VDxAPFUIOAl4ADhEOAC8QIQIOEhEiDjJuPwMf
-xURHhIQDhECMA4BEBIwDiIBEA4SARIQDgIOEQIQAQIOIRAOAR7HDx3wCkAxHxBMAiEuDBASAQ8Y
AQ0BPgEMDgABHgAHABAsBQB-DAEOHA4ADFgAHPAAIUBMHxACDC4hAg8YAQINqQH-AxEOARAuDAEg
AQ4sARAODA4sDvIDHfABfxl-Fh8QAQ8ZHxABHxkBDwsA-wQBDxARLgEuAR4PGQEeDQEtAS1_VgAc
cQYAJgAmAAYCABB2TwkDwg8BAgAhDxYoDG8OAHYuAC6zAR1gEB8VEA4QqAD-CA0BHQANAQ0xAA0x
IGEADVEADQABACFQrQkeQCAfFSA8DvADDhEAUQIAIQARDgAhDxUhACEC6xEgAQ0HAG8BAA0QHSAS
CB5gLxARHxUi8gJQYg4AXhBmAP8CDQENAA0xAAEADVEQDgAeAA5VACBgLxUAAkECRgPALgBODxAB
HQENAQARsQVADWENAVcAHxAJAx5gAQAeAQwOBgBCAAwOAqYCcR4cAQABACLEAgDQAl8CHkxAIVoA
HBAxmA9wESAOHA4BIJ8CEBC9Au8NAgEAAgwuEQIBTB4CIZYSHkEhDxAMoAbwAQ4BDgwQIQ4cACEu
DCAhDA4IAAEQAAMcAA9ZABxAHxgPDgQA-w0PGAAeDw4eDRAeDR4NEA4ADR4gDhAOQA5QDmAOaBEd
QCUPFgBsCgGPDyEYDgwAIQ4vCQAhDk8HAPICDxgFAAUNAQ4PFQ0gDQEODA0PACEMHQcAD28AHBA1
kwsQEIoLAGoA-wQOBUANMB4ADQUOBQ4VAA1VAA1VUAAc-xoPGRkOPxAZDw8KDQ8QCQwJDQocCQwN
DgoMAFwNDDAMCRwwHAkMMAwNHL4GHf8IfxAPDw8QCQ4PDw4JHgkODQ4JDg1_8BCfACD-EzAKDw8Z
MA8QCg8PCUAPEAoOMB0PDw0wDQkdMB0JDTANDB2cAB0AZBPgBQQODx8GBQAEBQ4EBglBAZAEDxYJ
BgUQFQQ3D2EFAAQOCQ0fACAPHyAAQAAOBA0RAE8OAAUJ3Q4eUwYPFgkFJwLwFgkOBA8VAA0FCQYP
Hw0FBAAFDgkNBAAFDQUGDgQVEAUGCQ4EDQUfABEEHgB-BgwNBAUADXYLHfASAA8UDxMZAwkPFAAP
EykEAw4ADxQ5BAMADQQpBA0QDhQePgJvOQQOAA1JDBQeAK8RMT8YAfkCMA8WHwoAHxAKAAMzHxYP
CgAfLxwABR8A2QAe-w8VUA4ANR8WDgAdBR0FDgBVDgAVMA4AFQ0VDQ4gDSXBAx4RH6kC9gIwDgke
MB4JDjAODw8eMB4NDhEALw0eYAIdL-AwhABvCgEC9AoPFAMPEwAPFCkOCQOAFA8TJA0AHQQAHQTw
fwEfMVcAFPADOT8eBBkPFD8eDxMUDxU-Hi8TBgBQMDkfExAYAL8vEwAOFA8VLgAuDZ4ZHPQX8QFJ
DxMRWQ4BAA4gIXBREEEwMTAhUAkRMAkRQAEJUAkBUAEJAUAHAAAUACwRMAcAkVAJDgEwCQ4BYMoF
jwFADgFgAVABfwYdZiUGAA8VNdcFEQYJACEABRIAYDUQDkUPFkQQ3xUGEAUAFQ0ADiUABgCiER4R
sMcCPwUwDlEANQ9DAgGhDxkKDgA_CQ8PCoAFMBkNCoYFXw8ZGQw_zwweD9AFAg_kAC9wQA4KDxkw
DtwFUDAKDRkwnQAfMJAEHhAWnhkgBQb5FgCxEgARBxAAHgchdgCxBQBTAT8lAHZXAB4APABxEAE1
AAUAAeIKYRABYAEADgkAIAAlFgAiABUVAA-sAiIwGR4x7ALwACAOASBREBEAHgEgMTABEMICgREw
CQEADgEg_AI-AAEw_gJEHjmnBvAdEwsPGwYFDgMGDxMeBQ0TBRMFDQMNAA0gDQALDQYFDQ4ABgMO
FQsDAAUOAxUZAH8DBQANEA0D1wcdQAAWABaKHeAAFQ4QBgUAJQABcAYgB1YYQAcAJgDPG18GFQEA
JpELHRAm8hOQFQAGVQBlkAcW8xURNrgBTyYFAAWOEB7wBTYAFgEABjUAASAlBgEwJREARiEQxAd-
ERAlAAEQRk8AHCAgFp4csAEQJgUAEQAmBQYRDRIBoAIBXQQfDaECId8QUSBBDxYgMQUPFSAh6wIq
oFEADxVBIEEFEEG2DQ81AyuAFgAmAA4VACYiA6IWcAEAJgAWEAUWBQA-FXABhwEn-wA2ASAVFhEg
JSEQJSFAIRCcGx8xAAcgdAL-ACAGBUABcAcGUBZQBQZAATEIHQAiHNAGBSAFACYFQBYFwAcGBwAv
QBZiAh7xAhYVMCUwAQAVIBEABTARNgAhDQIwEBElVAQvVhBOACoFWQIPxQEi8QIBCx8QAQseAAEf
GwABHQELHg0AEA0tD58OEAUDEAUD8AiPCEsvNjXoCkgP7AgV8AYVAwUAAwAVAyUDFQ8TBSADFQAD
FQMIAJAOACUQDhAVAxUJBQADAE8DBQMAsQcdAJ0dUBAGFQAWcx4gBSA8HeAFAAUwFRAVAAYgBhUG
FRweAGYGHwZaAB2PUBFAIUAxEPGFHx1-8AgBEBEQ8Q8THcDxBgBhADEAEQAPEyFSEd8OERAOAAsA
AQsACxALpAMe8AZhEFEQURABADELAA8TADELIBEAARsSEh8bTwAh8wgPFTIIAg8YAk4IDx4CCD4I
DQIITg0CXgcAfwIOEi0CDxUXAhxQAA8ZCQ75B-8HDgUODxQFME4wHgUNQAkOCVAeYA5gDpUEHj9g
FlCRBCsE9wb-AkUOAGWABhUOABY1DgBlACVwUAYekABhAPEHAGEgQfQfHzGHACdxBSAlIA5QDt0C
QQ4VACUFAA_PAB0CVgUPYwUq0QAZACkQGQAPGQQOEAnAI8EFcAkAGQAJDgAJAAmfEwDQCS8OFXMB
HRApBALxBAkACS4EDgkADgQuFYAJHgkAGR4PAAF4HS8PFa0AHRAJpwBwBQQVPh8VFY8Q-gY9CQQe
DRANCT4EFQQ_HU49CR4EDRC2HA94BTofNcEJKAAWIhEFuwwA0QRPABUAFcoCHhFGQQIwBRYFtyKx
FgUGBYAWBQ4AFhXeCxAVKgUvBnAdDHMJWAEfOXcGCw9cARz-APABAVAhQDEwMTAxAAEQYfMEHWBj
AAUPEwVqEfAEDxMDAA4FHxUVDYAzACMPFg0ODEUhEAUBAU8OBQ1w8wBPHzFUBRXwAFUfGQ8VRQ4P
GR41Dg0OEM0UAboL3wAdDkUdHjUdDhAeBQD8Ah3-FDAFMAUAFSAFAAVADxkQDjAPFC4ADhAeDQAO
DRAeAB4gLgkNYgwd8AEQDxUwAzAOAA8TAyAOBQ4DjBfwAA0DMAUOEyAFDg0DECUOE-8dLw4DWQAd
QAMPFUPxABIOtwEAaRSgFQ7QDhNAHg0FIAkjHxBAHB7xAj8ZDxQPGQ8UBQkPGQAeDxQFrQBgBRA_
HRA_YQDPCR4ADhUQLg0FMB4dZQIiIg8bBADBAwAOHxsDHQ8VEC4waQKQHQMADgMOBQ0DaAJPDxUA
HoMRHeBgDxNQDgVAFQ6gBQAjEOwWIBYOxigPuAIikHAFYA8TBdAzMA0iIA8TxxG-ExAFDxUFDxMA
DgWJIB2iIBNQAzABEAMBIAUAzyAREAEQIQAhAGEAQQcQHJjwAAVGZRYVAQ0CAPAGFQ0fFR0OHQ4d
Hg0VDQ8SHh0eHR4MCwAgHQyuGNEeDAsNFQ0LDAsMPgwLDAARHAsA8QAcDRUdHAsMHgwLHB0VLQwK
AIwMLRVNDhwOTWIA0A8WAQV-EwUPFgEVAQoKAI8BCgHVAQDREMAAHJhRkFqR6gQKAQ0CAFYECt0E
CsQAJgQKxQAoBArGACcECscAJQQKyAAlBArJACUECsoAIQQKywABXgAKcQAf9FMOGvARHCgEPxUS
HxgCDxUCPxgS7xUCHxgCHxUCLxhvGV8VAj4PAPIHDgIdCTpZLhIuEg0CHgIZGgl6CQ8ZDg8A8BoJ
KgkKKSonDw8JEh4iDS4qDxQECQQPDwRKFwoJAh4yHgkaDxQJCgQKDKgq8ZYPOgkKGQ4yHgkqDAoJ
BA8fDxkMCxoJGgkfDwkOIh4CCRoJDAoEGwgPFgQIChkaCQoJEg0eEgkaFg8fJwUGBAkLGSoJCAId
DiIaCQYVJwUGDwUZCgkqGR0eEg0KGQ4FRw8GDgUJCigKGQ0eIg0KHBRHBAUJKggJChkeIh0KHB4G
FwYELmoJDiIdCwkcBQYDJwYFBwYaCQgKCAoJIh0CGRwjRwMGGhkPAPEEDRIKCxwXA1cDCQoZGhkS
DSIKDg8A8UgZCwkqCVIKDgQMCAcFBgM3AxkLGRoJHTIKDBQFFwNHExkLGQoJHSIOCgwECwx3AwYE
KxkKDSIeCgsECwwIBxYFJxYECwkLKQ0iHhkECw8XBQcoAwcIBQ4VANAiLgsKDAsIDEcIBQ4ZEgDw
BRkCPhIKDAsEDAgnCAUOKQ8FFBsJEwDwBQsEDgwFFwgFDgoJBgEKFgkbAi4iFQDwKSwuChkKAQYK
BgsZAi4SBRkMCxwUHgopCgYECQoECy4CFQEJChscJgoJChkKBCYZHgIVIQoLCQw2EQDwKAQmAxcS
BQEFEQkKCwkLNgopCiYFBxMCBSEGAQkKGQsFJhoZFQYVIwUxBgEaKQUIJgoJCxMVM0EOAMEVGAkK
Cy4DBTMhHhEsAPEsGAkaCz4DBSMRLgYRChkIBggJGgteAwUTLhEGEQoJCwYVCRoLIT4jHiEGAQoZ
BgQVCgsKCR4hLgUDDiEhAPAABBUJCgkKCQEOMR4DBQYBAgBhGgsGBAUInABfER4xDgPjAgscNOMC
8AASDxUSDhIOEg8SYg4SDSILAPIHDgIeDQ4NHgIeAg0ODQ4NAg4CDg0OEgkAUQINDjIOFwAyEh4N
EAAwEl4SIAADDgAABwDwABI_FC8UJB4iDiINEg4CLq4KUBwJDBQ8IgAQHkcA4T4JHx8MCgkLCQwk
PA4yFwCgDAsJBAobKTQbGUEAkQ0CLhkMCQcKGzUDMAgOK3kC8AUODR4MGwwbBxoICxkECA4bDw8K
DIoA0gIeWxoIKyQICwoHCwmuAMAMCRsZGwQJBCYPFwsYABAbFgDwAwIOGQsJDAkbCAoENgUJGgYb
DHoA8CIOGQsMBAkbCgQfBSYFAxwrGRIeDAQLFA8WGQArAxYDCwkrBAoJHgJUGzABCwUGIA4JqQDy
PAkOAkQJCwkAAQ8BDwwPBgEFBg8BAQAeGQQKCRIEDAQIDCkbFQYFJgULLgkEGQ4CLBQMGQsFBg8H
RgcFDggOFAkOEhwLBBwZC1YHFhEA8AMSDQwbDAkcCgs2CREWCw4EDglSAfEcDAsZDAQbCgl2CA4E
CAweAg4NHAsJGAoLBwkWDxgPCA8ODwgGCw4IBAgMC_AA8RYMCwwYBwsKCSYVBgUeCBQMCg4SHgkE
CAQICwoJDAtGDA4oBAkK9QDwAwwLFAgLCgweGxYLDigEDAQJB6kB8jALFAkMDh8FHgEeKAQJHgkK
LgIeLAkMIwQbSD4ZXg8NDwYMCQwDFAUbCB8NKA4JBAkuAh4PBh8dKQwENQ8NHwYEACAOCaoA8C8A
DwYPHR8GACkcBhUKBQADDx0AHwYuAg4CPR8dABkKCQ8HCgcmBQMNDx0ADS4CDgARLQEGGQoWBTYF
AD0_Eccg8wAWCgwGBQcKJgUDHREAHgIwIfAVDAkMBgUaJgMNESULHgEdAS0BDQwmBSYDHQELJgUL
Dg0ADQARKQDwB1YADRENAAsWCwUOAC0RHQAdABYDLQHRAeAmCzENAAEdEX0AC2YNESsizw0BLQAR
AB0BEAMLRj8DHJAREBEAAcARDxIZIiEBAIYjQ48VMDEMAGAAHTAdJS1IIhERDwCQDSAPFgYQFRwG
YTIQEb0mkAAREA0QBgUMIMsMIgAFryAABgBAAA0QDNcKMBwGHEIQAIwnMA4BEDAtUAUQLRYM-xlC
AQABHioA8QAFDQUPDQ0OHQAMHQANBRADIoAQDQAFHQscDRUBcAwFEAUgARBAAIAMAA0LDBYLDuYx
QA0FEBGBAIAADQYNCxwWGxQAEB07IwAcAIAMEAsMFgwQDUgAsA0QISAVDQwABQAMexIzCwANAgDg
AQABEBUdBRAVFhUQDRB2L0AREAwNNApAGwU2C-IXUAAdMA0GRAAgABwSAPEEHQANAB0cBQAMIA0F
EAsMBQwWDCcAURANABwVFACALBYLDh0ADTDZL6EFIA0gDgsFHAYLbwDwBTANAAwNBRAdMBsFFgsN
IA0wDRYdvgAyIA4L0gDwF0AWBQwNMA0wGx4dEA0wFgwFJjANDCEOPQANICYMBQ02MAwRAB0RTACx
BgwGDBYNJgUGMAzwAAAQAPAFBgxGDA0FBhwQDFABBgwGHAYFZg0OADBAAQCpAPEFFUYFFgwGHDAR
EAwGBQYcBQ0WBRY4AIAADAAcIRAMBQwA8xcNJgUMBg0FBgwdHAAMEBEcDSwGHBYNBhwFDAYtDAYA
DAARDA0MBgIAoDANBhwAHRYQAVw8AEAQIQ8TFgDwAA0AHQwGDAFMBRwQUQwFHDMB0EwFDAYgCgEQ
AQohBRwGA-ACAA0ALAUMEAohIAEKEQ0MBQB1ATAALA0TAGEwEQoBHBUSAFAsIAoBCvYBYQEKEQAM
FbMBMRwQGhQAUDABGgEMVjX-Cw0MEDoBEAUgDQABGgE1EA0gOgEgDSAFAAEKDQMc8AYCDQ8SAg4S
BC8fBA8UIh4SHRIdAh0cBqAPGR8fHw8PGS8fFgAxDgINrgT0AQIPGQ8fPw8PHx8ZHx8EIi5jBkAE
DF8P6wlSDA8ZQg4rAPAFEhxrDEsPFBINHjIOEgwHCwcLKRwjCVAsCkINHgoIQRcJCgwCAFAJOwwP
FJwG8CISHBsHCQwKDCoLCgkLJwwSDg0iBAwJGwkMGwoLJwsKCRcLDBINMhwJKwwbVwsKKwoC_QYh
ChwiABBXNACQDAoSDg0SHA8KNgZBFS8WJxUAcQQSDiIcBw_9BmAPFjsXGAsqABAibwDxGQQZDAsI
BQ8VCxcbCAkECwoOIg0CCgwbBwQrCQcPBggXCA8VBQkKCwwoB7ACBAw7DAkMC0crBGoAUA0iCgwJ
2QiwCgtHCwcLCgsKIg4_ADILDwoWACAnC-YAMAoHBCYBEA0DBrAGKQwLCmcLCgcKEjgBQAwbBwmC
AHMnCw8GCRcEQgDxIgxLBAkMCzcbBwsaGwoSDgINHCsZDAQMC1cLChwHDCIeHCsJGwQKDAtHBAoc
CwwiDgKHAPARDAsECgQKHCsEGgwLDEIOCgwLFgkECwkKBBocFAocC0K_ACAHC7AAgAkKBCoMFAoM
TQEAqgGABAwbCQsZDAlPACAUGosB8AUODRINCisZCwkLCgQMKwwUCgsMMtsAACgA8BAbChQLBAME
DBQHHBIOIgwLGQsZCwoMGwQLAwsDDAQMoQAhDRwoAJAMBAcEBwsKAwytADAKMg4WAHELGhsEBwkH
LABgChxCCjkMEwoxBwkXQADQCQQKDBIZAhwZLAQLBz4A8DkDBwMEGwkEDAIJFilbCRQXBAcDCTsZ
DAkmCWsXBAkUBwQXSwlGGTtXBAk3Gw8VDGYJERtnDwtHIXYZEVcPEw8DDws3IZYJMTcMAC8nMSkG
HfAHkB8ZSRQO8AAPFRkPHyQpDgQNDsAOGRIR8BEJLgQNBJAPFSkNNBkNCQ4ZBA2QDhkNKQ4dDikO
KQJwBAwA8DcELS45DxgSUAkOKR4EGRYdDxYNCQ4JBB8YEgASGQQZHgQpBgcvDw0eGQQvGAIcCQ4k
DQQpDQYnHw8NBA4JBFwNDgQeDSkEEgCBFg0UDQkNPASWHwCQEeEnCwYPDwsNBA4ZPAQeCRMAQAYX
BTonAPAUBCwNDgkNDjQNFhVKFAsECQ0sDQkODRQNBVYrDxULFAYLHRzqJPAKDgQdCwgLDQYHBQgG
BQYHBAYHBgkNBAwEDSwAsAYLDQgLBwsGCjcNGAAyDgQMMgDxCBYaC2cKDRcZBA4MDRkeBA0EFg4G
VxoNIwCADQQNCQQODxQKAHAOC2cKBg0GrgDyBAwNCQQJDhMJHgobBjctBgQZDQATAPAcBAMNBhoW
JwYaDQgGBAkODRwNCQ0JDQQTCwYKBRsFBhoGCx0EDg0EDAIOCVkA8BYEGAYKJhcKBgsYBg0EDQwC
CAQNCRQNGAULGjcGCxUIDRQcAgUMFADwBQ4IBQsGCicGGwUIBg0EHAIIBQIM1ADRGAVrBRANFAwC
CAUYAoMK8AYIBQBLMA0ELAIYAAgCHAANGAUQBhv_HyAIDTcA8QoIAAUIAhANCBUQFgUQBRAYDRgF
CAAIAAUCKgAQBRM0URAYDRUAKgBQDRhABQaQEvAGHRgFCCUIBQsIAAZABVANEAgNBQA1QgdACSAF
MGkf4AgNFRgrCAAZABkQCRAJRgf-LRgLBRgACxMtAEkQCRA9KyUACAsNEwvIGyMLJQgLAx0DewM7
QwsYDRgLEw0DC3MLQxsoDRhbcwsjG9i7eNECHPAODxUCDxQCDxUBLg8TAw8QLxMPEA8TAw0uHxQC
AR6QBPACAS4TDxADPQMLEx4MDgECDAH_L9AOATMLLQszDQ4MAQwCBAAQAUEB8QwLIw0LLRsTDQ4M
AgwOARwBEg4BDQsTG00zAQ4mAMAODAIeDSsTCz0bEwslAPAMAQ4MAS4BHQsjTRsNAxsODA4BDkEt
GwN9Ow4MaQDxFh4tOw0BDxEDHQMKAQsNCw0eDA4CEU0bHQoPHAsBDQoJCgEdCwE2ANEdAS0LHQEK
Dw8XAQcJLQABGADwAAwBDg0DHRsNGlcJCgstHoIAEAEyAaANAQoJRxkKAS0eggDxPw0LEw0LHQEN
AzcJDQEbHR4BHg0bAwstAQ4CCwkXCQ0CDxgbDQseAgwBAwsDCw0TDQsJBwgLFwEICQ8dGx0uAgEN
KxMNAQsPDzcKCRcPBmgAcA4bAxsdEQYSAPARBgENCwEeAQIBOwMdEQYnFhkHDw8BAwsBLgIBCwMb
LRFQDPAMCBcCCQYLDQsDPgEMEwsNAAgCIQYHBggCBgkGdQDwBR4CDgECEw0FDxcYAhEPHQUHHwwJ
VwDwCgMNHgIBDgIDDQUYDw4FBggPCAYPDAUXBQRLABABpQvwOA0HCA8XDw4FBwIPCA8XBAcEFhQL
DQMNPgIOAQcFCA8OBRcIDxcJBhckGx0BPgwCAQcICgUXCAoPCAY3BgkKAAINDwACDw4IzwfwGgcY
BRcCAAUnFhkDCgIJBgoICQgODAIFCgMJFwIKAxcGFwoAAggZGBUJFgDwHAgDBhcIAAoXCgMAAwgn
AwoFFwUJDgwICg8WNwIDCgMACgIINxg3BQ4MGFcMAPA3AkcKCAVHDgwIA1cSZxgFBjcFHgoFNwUG
RwYXAwoFBkcFDAEIBTcGZwUJGAQGRx4MCgUnBXcEAwgABkcFHgwIAxcFhwMICg4A8CIIHgoIAwkG
dwgKCBADRwAIAg4ICggDBAVHAwoYAAQIAAMnBQMACA4AGAoYFRMKGBAWFAD-CgcFAwAYDgIQGAoY
ChggBgUWAggQAwAYAg5LAxnwEyw2BPAELxUADvAQHiA_BT7wDQ4APgVOBT6AAg8Y4A4ABR48OpIu
FS5gDQIdsA6IGPIARRA_JR5QDRIdkB4ABQ8NFDfRDx0FEB4ALhUeQA0igBgAgAYPDwcGByYPMziA
IC4VHiANInBYNQEaACA3Jj0_oAAuED4FDjANEmApLHAFFicWBwYX5QsAagDwCy4AFQ4gDRJQLhAM
Bg8PRwYHFgwWBSAOIB4FFwCAYA4QBQ8dBncwABEP8CoiDhAaACBQDtYEIAyXNgBxDhAOEA4ADhgA
EECxOJAGDAZHDEcLBg6UAEEFDgAdFwCFDBZXDDceCwUvAPAGAh0SUA4QBR8NDkcMBicOACUOUB4F
bAUAXgDwAQAFChUABwwHDAYnEDoFDkAVJxIuGQBADhoMABkAYBUAGgwmBVscsC4NAlAOEA48AA4F
bw_AFRwWCgVADgAYAAB6AOAOBgwuDAcWBwUMBwUeBhsAIRAFGwDQIAUKDA4HDgUMByZHC14BIg4w
GwDQIAIOMAVGDBdGFxYLBmA2YAAVHg0SLTEAwxYHFgwHNgtHCwYMBRkA4A4NHgUwBQo3BgwHJgtX
8wzwBQUOIA4ABS4CLgVABQY3DAc2ZwwFOSwSEDAAoQIeBUAFFicFByYYABEMGQAhBS4ZAIAADiAF
DBYXBoIMMCcGFyAAEAZPABUVHwAgFQnLAIEGBwU3BgwVFmwAQgVOAj46AGAGpwYMBSZSAABjNlAN
DgJOAEMZ0AYXDhcOVwU2DAUAHgAaAACkEQAxAMAGFw4ABw4QDhcWCybaLPABLgAeBR4CXjAOBQYH
EBwGDBsAEjahAAACAPANDR4CTgUQHgUMBw4MBjwWEDYLDAUgHgA_Am4FIEgBghZXDAYHDBYLHAEB
MADwCw4APhUQDgUMNxZHDCYMDgVgDgAOAi4APhUOND6AhwwmHg8SBXApABAQxAAAKwDxBAYXBTcm
DA4YCgAFYA0_EC4FAA6RAAAVGfAAFwYcGBoMAB5ADR4QXgVQLgCwAAUQBQYMDggaHAW9L4ANHgBu
BQ4QMSwCAPEZNA4sCBgAcC4QPjAOCgEiA2AQBRAOHBgZABAgZRowMA4V-y8wER4wERvgDAgBCh5g
DSAOQA4FHS4YNBAgFwDxAiEaDiAOEC0QDlBtDgAOCg4FFgAwERoA7wFRDQ4NgI4WAPABEAUuIQpg
DR4NcA4QXhAOCk8D8AcRKFANHgANYC4AXhAIHhAeBSghIB0AEgBwPhAeDQ4gCAw50Sg6IC0eEA1A
PhUeHQEUAmAOBRFIGj13D1AwHlUdEWgA8AAOBSohKA0wHhAdEB4lLBUhNwA2AeA4GggRDTBeEA41
TAUhDpIAQAgxJhrdGlCuFTwFGigyUAgOKBox5DAgHkDtHkEeBUwK9x6gCA4ICjgqDRAOkF0E-wA8
DgoYAA4Yig0QDsBOBTzqBBkP7ywenxwoBPD-----VDUACx0zLhkf8GYAGQ6XAA8xAP-3DkwCDzEA
--------Ac8ICAR5cHl0cH8ZdHk4AByTBE8ZABQeBA4EBgAgJA4GAKAEgA8UBA4UDRANBgAfgHcl
IHAZJA8UEA4UIShGEA4UDQYAIg0EBwAUJAUAPzQOALcpIRIWPiqP0BYFQCVAJXBDABxAIA8WIG1K
EBatLBAQAwBPIA4gDu05Hr8wNbA-FjA2NXB_dgJGHf8OYAYgFgAGDxYgHiYAFg42AC42EB4mDgAG
LgYOFj76SiDwB2AfFgAWIAYOBh4gPgYeAAZeAF4QBk5SMh9OSwAcn3R-FXl_dHl_dDgAHCAJALcl
MQkOBKkqDwgAIA-WLBxgDxkPFQkO1yoQHZcVDwcAGR8NawAcvwQPGQkADgkACQQOCAAjD3AAHEBg
DxYW-ilvBj4FEAZgmAIfvzV-FnVwNT4wNbA1mgodME8WAF4QAOQO3z4FEF4FAG4gTiAeAAUoLiBC
DxYAXnJM7z4QBV4AbgBOIA4FAB4g8Toen3R-GXRwfnRwdPRBHgJiUQL1TQ8IACAPcAAcAUdPEA4j
Tx8OCAAjD_Q4H18WJh4m-i0EHSDwDIsTIC4AAgU1JgAuAgAP_UIcn3ZwdnVwfxZ1dqhJH-4BJjAO
Fg7ABWAGBVAeUAYOUNFMD0AFF2AGHgAWPhBCEnAeAA4gBi4g4U8P9wId8QMwNAAfFAAELxkAFAA_
AB4AJA4JABAUCQBPHxSANE8AHBDAhzuBMAUOBg4wPrAHABIeBAAPSAAc4nAlQB8WFTAeBQ6wHgUO
lUcPmkchX-8WAHB1RwQeIi8WGQIQQHAuXyVAFfAKGA9NgEAWMAYAHxYwfgMhEBYGAKEuABYgHgAe
EAYelQMvLgAsAh_wAA8WUAcFBkAGAA7UGihQDg4ADuorD3cGTi82NTgKHg8xAKQB0wEwUAUPMTQA
AwAfFu8DJSA-FpA5AAQvEh4VAgIaAkEwDgAeLQIPUwAgH0AWAgkfAEgBHg8xAP8PDxAEIsEPFmAF
UC8QQAcWQCamAS8FkNYAHg_aAf9DDzEAHsJgAVARMAEFAAEgIQW5PYABBQAhAA8WEW4oDyZMHhAh
HDUA-T3zAjEADgEFABEADiEFEA5BBQ4AWQAfDlgAI-8DEVAhQBEADxYBIAEADiEgDkEAUgAt0AAf
FQUxAA4lIQAeFSElMzshAB4RAA8iNh5xAQ4VHgARBcBWUBEVHgAhCgAWERUAECG8URARCgAPOQKc
UG09OH19
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIyIDE0OjI4OjE1Iixtb2RpZmllZD0iMjAyNS0w
Ny0wMSAyMzoyMjo0NiJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIyIDE0OjEwOjE2Iixtb2RpZmllZD0iMjAyNS0w
Ni0yNiAwNToxMTo0NiIscmV2aXNpb249NTExMTddXWx6NACAcAAA5ZkMAP8Qe3tibXA9dXNlcmRh
dGEoImkxNiIsNDAwLDI1OCwiMAEA-------------------------50vMTBABv--------------
----------------------------------8oLzExBAALD0AG-------yLzExBAAHD4AM-------a
LzExBAAPBAEADBAAD8QAdh8wAQD-------8xD0AG------9WLzExBAALDwEACS8xMQQAfBc2DAAv
MTABAP-----------------------------------------------8ovNGQIAAMhNjcHAEUwMzgw
AQAvNjkUAAAvNzABAF4_NmQwEAAPmCr---_ZDzw2----------------Lw9ABv-------2cXMQQA
DwEAiS8xMAEA------_IFzEEAA8BAIkvMTABAP------iB8xnAWULzEwAQD-E-MEMWNlMDFjZjAx
ZmIwMWY4MDFmYQQAH2McACMcYxwAFjkYACNmYQwABCAAHmEkAAw8ACZlMwQADlgADjgADxwADhI4
FAAIIAAODAAPbAAbImNlHAAQOYNLEjUEAC45MwQABDgALzkzIAA_DwEAAiFiOQQABTgAgDViMDE1
YzAxFACjYmIwMjJmMDIwYhAAFWEIAHEyMGEwMDk4BAAIIAAPGAAFD0AAPQUIAAS4AADIAAfUAH8y
MWMwMjFkCAA4YDQwMjE1NBABMzFiYwQAEWIIAAREAQgEAA9EAAgOGAAPnAAzDxgAAA94ABxUMDQw
MjAoAAQ0AAIIAARoAQABAAQoAAwMAAQBAA8gAAUIRAAPKAAJCUgB5zI1MDIyNDAyMjIwMjIzEAAX
NRQABBAADwgAFQ44AA8YABEFwAAEoAAfMEAG-yIaOUgFDxwAGWtjZDAxZjYcAAh0BgAYAAw8ABZh
JAAuY2M8ACZjYzwGLmUzHAAPOAAFI2ZhjAAfNsgACwQ8AAgEAA9QAAEmZTMEAA_kAAEBEAARY7QI
BNAFDwQAAgQ4AC85M0AGYwAUBRM1CAAlYmVEBggQABAxPAUlNTDoBQGTUg8YAAYSZBgABCAAL2Jk
KAAKBBQABhgACzgABYgAAxAAB7gACdQAAUQAAggACgwEDwgAJgc8BgK8BiAyMQQAEmJwAC9iOfgE
AQ8IAF4EgAAPBAAxCFgAD0AGQ11jMDIwZAwACIQABmwBB_gGDwgAPW40MDAyNDEIAAsoAAXAAASg
AA9ABv8fBAwFB1QFDJQFJ2NjBAALHAABBAAfZRwAAyZlMwQACSAAG2FAAA90AAAmZTMEAAwcAA84
AAUmZTMEAA9UAAkqY2MQACJmYQQAL2NjUAAHDBwAImZhEAAvZmFABggSNggAE2Q4AC85MwQAAwRY
AC85MwQAAx9kQAYtD_gLAQ6IDAKgBQfsBQO4DAgABgEYAARIAAnYDA5AAA8YAA0PCAAGB7gACdQA
AzwGLjA5DAwPCAAdNTA5NjwGIzAw1AYlNjGYCgFwAAx8BQdEADkwYTYQAAbcCwQQAA_cACghYTaY
AQksDG9iZjAxNDcQADYAaAAKQAYP_AUELzAwIAAKCEQAAhwAALwAHTcMAAhIAXYxNWQwMTVlIAcm
YTaYAAfgBg8IACpuNDgwMjQ5CAABDA8GKAAPQAb-NwCcEiZmZBgFDNQLASQAH2E4AAAfYRwAAyZm
YXwFImUzJABhY2UwMDkzwAEFEAwEXABmZDYwMWQ3GAAvNzEEAAIAbAIzMDkyUAAaY3QAJmUzBAAq
ZmEcACpmYRwACBAAJmNjFAAFNAALRBMMHAAFfAAPgAwFFjcMAAQ4AC85M2QGAQ8gAAwOQAAPwBIf
A7ADYjEyMDIxMywFAXQLAkQGMTBhNQAMApwFCOgFArgMBBAABRgAA1AABCAABGAABCAACUAAL2Jl
QAAKANABCogMB9QBPGJkMNQADwQAeS4xMRwMD1wAOQbsBQ8IADwOgAwP_AUHLzAwIAAKCEQAD0wB
hQpoABU1DAAOBAAPQAb-JS5lMygFDxwALSZjYxwAImUzaAUA8AQmODMsGA8EACQ3MDgyRAYP8AUE
KmNjkAArZmEcABtjvAACFAAG4AYGFAAFDAAE5AYEFAADEAAPgAwHAwQAImQ2KAUvOTNkBgMEqAAB
FABaNDAxOTUMAA8gAAYPQAYGD1ADGBVlDAAPBABlASwFLTBigAwBIAAiYWEEAA-QAhUDaAsPCAAt
AXwAD1wEDAjEDQ8BACImYjkEAA9cAAgJ-AUPCAAtEDCEGh85gAwATmUwMjAMAAQBAA8gAAUARAAA
3AICqAAOTA0OLBIOpAEnMjHMCA8BABUtYjkoCQ88AAwBcA4POAIFDogBDwEA-wwJXAUmZTMEAC9m
YRwACB9jHAAHG2PMBSZmYRwAI2UzmAUTMCAAA-QSAQgAGmE8ACJjYxwFImZlCAAnOTNYAAY4ADMw
OTFEBgccAAdwAAEQAAisACpmYRwACBAAI2NjVAAO4AYPBAA5APgGHzFIBgEEqAAAgAAEoAEIDAAP
IAAECBAAD1wDAQyoAw8IAIcCPAQMgAwByAAEAQAHvBIPCBkBBDQADGQLDwgAJQF8AA08GAckAAUY
EgK8AAZ4AAMgAA9kABwPdAUBDVwADwgAMlcwMDIxMYAAAvwGIDIxRBIdNwwABAEADyAABggECARo
AA-sAAAILBIP0AAFD5AHGiZiOXwABFgAD3gABAjoGg6UAA9ABv89L2NjHAAHL2ZhHAAIB2AIASgA
A6QLJ2ZhPAYDIAAmY2M4ACJlMygACDwAJ2ZhLAYfZTgABgFEBgB8ESJjZuASDlQAD9AGAypjY0wA
D6QAASJmZTQAJmNjCAAEHAAFFAAE2AUG0AUPBAACBSgAABAAHmZEBgkgAA8EAAEfMAQABg8BAAIF
QAYOYBgPCACHBjwED0AGAw48BgAIAAVsBQWcBB9kjAUAAhQfDiALD4QYBQ_AJRkZY7wAD2QAJg-c
AAAEBBQGXAAKQAAJCABTMjcwMjMEAAAMACsyNggAAxwAaTE4MDIxOTQBAhQGAOAUDgwABAEADyAA
BQREAA8EAREIcAAPmAQGA0gADwEADi5iOUAGDegBANgOFmE8BgeMAA2UAARQAA8BAP8VCVwFJmUz
BAAIGAUMJAYvY2NABggWYfwRImNj0AUAsBghOTaYBTYwMGYIHiZmYTgADXQAAzwGI2NjDAAPQAYH
NTExN9wLCQQAK2NjVAAD2BkNXAAbYTwGB_AAJmNjaAAqZTNQAAQUAAX4BR8wXBIABwwABSgAFTNE
BgH4BgMQAAHcEg_YDAEFRAATMAQAHTEMAA8BAAIDDAMKWBgDsBgPEAAGE2MwAB9lIAAACEgAH2MY
ABAICAAPSAAFCBgAEmI4AgQ8BCZhNdQDAwEAATQKAKwKBzwKCAgABoQKHzXEKQ0PJAwnDyQAAQw8
CwMQAA0oAA9cAAwCNAYMBAAROSgABVwAC0AACggAH2MEABIChAEZZTQBD0gEMi9iYgQBBwMQAA9w
ABUPiAwSLmI5gAwO6AEPeAwGBAgAD0AG-y8MKAUvY2NcBiIP-BEKEDEcBR83dAATAQwAE2NsAAMM
AAUcABZkNAArZTMcAAc0ACpmYRwAJmZhFAALDAAFPAYPNAABJmUzBAAvY2NABg4EAQAMDAAGKAAD
GAYvNjXcEgMmNjUkAAlEAA8EAAcPAQACLjg34AsPCAAADZgxC1AlDGAlAjAAFjkwAA4oAAk4AAYw
ABo5MAAHCAAAJAAI1BwNkBkFAAsGNAoPBAwCA2QBDyAAAQx4AA8gAA0MCAAA4BoMNAAPhAACD4QL
EA_ADA8ZOAwABqQACFwAHjVQAAUYBQNoDA8IAAQIBAEO0AUPAQAfBkAGBDQBDwQBBw9wABUITAEG
QAgKyAAFOAEnYjn8AQRwAA94DA8PgAz-NyZjYxAFDeQYD0QFCCJmOBAACcALCLAFAwASLmZhSAwm
ZmFUACJlMxAACTwAA8wFBQwADzgAFQT8MR5jUBMEVAAHWAAGuAAHGAAPbAARBBQAC0AGDwQABgUo
AB8zXAwACKArD9wSACM5M2AAD4AMGACsBxJihAMOCAAfZdgxCANQJQgwAC81ZjAACw0oABZlEAAP
MAAJAggABeQDD8QeBgiADC8yNIAMIgR0Cwh8Cw8gAAkMCAABQAYLNAANCAAEZAsEQAUMhAsPgAwW
CAwAEjgwAAtcAC8wYUAGAAQIAC8yYwQACwOEJw_ADEME3AEPBAEBD4AMFw-wAAIpMmMEAA9ABgID
aAAPeAwRD4AM-zcnZmFwBQtEBSNjYxQAD9wrARo5hAUJHAAADAAWYwQAKmZhIAAmY2OEBSJlMxAA
CBwACTQACxwAJmUzBAAvY2O0BgAHuAYFHAAIwAAeYzwGJmZhHAAPbAARBRQABPgFFzDsBQ_AJQEE
KAAGFAAPoAwHD0QGAR8wBAAGDwEAAiNhNwwKCoAxDCgMDLAEBBgADwgABQQoAA8wADEIIAoIGAAJ
QAAH0AMJJAUPCAAABEQBDyAAAQ_ADBUCEAAD9AQFCAAfZIAMFgQIAA_ECwkPgAwDHWI4Bgw0AQWs
AAegDQnUAAQQBQsQAAQUGA8EAQEI0AUgMjJ8Bh1lDAAEAQAPIAAFBUQAKzk55AEOBAEG6AUOTAAI
WAABnAAESAAD8AAM0BkPgAwDDngMBlgBDwgAAw9ABv8nBIwqLmZhRAUEHAAqY2MgACljYzgABNwY
BTwADDgABBQMC-AqAhgAB1gALmY2HAAPOAAFJmNjGAAIHAABFAATNgQAAygACBwABTQAGja4AAsc
AAU0ACdmYYwGA1QACRwABxAAJzkw7AUPQAYBBCgAFjMkGi85MyAAAgREBigwYSQAHzCADBsQYkAG
BAwKF2WMBAMYDAEYABNjRAMaOSAAFmKkCgioMQYwABM4BAAXOZgMCCgAFWVAAAowABc4kAAGvDcC
BAAKOAAFUDIHjEgBDAUvMjSADA8E_AUIZAoLUAwGJAADIAADcAAGNAYKCAABQAYDLAAPCAAOAzQA
CjwLDygAAC8yNEAGEBc52DgH7AAFqA0EPAEWY6QFCxAABBQYCPQzBFAACIAMPzIzNgQAHgpABgew
AARoAAsEAQQsAARAAA8EAAYlMjRIAARkBwR4DA_ADAkIWAIARAAAaAMEmAAPCAAFBTwABFAADwEA
-xUBbBcPBAAxJjE2DAAPBABPD7gArg8gLBEmMDgMAA8sAA4PAQABL2I5BACOIzExYAwPBAANBAEA
L2I5BACeCCwMDwQAMA8EAfAOWEYPWAIFDig4DwQAEw8BAP--jC85MAEA----VAmYRg8BAP------
------8oLzRjsAH---9ODwEAVT81ODABAHIvM2MYA3cMFAA-M2QwAQDCDvwADwEA-8AP5AEVPzRh
MAEA--8MBKSPD3wCPS80ZAgGGwiwBh82vAYILzNkcAAGDwEATA8okLsPQAQTDsQBD4gAQw9MAa0P
2AACDwEA6i8zY0ABKw5MAA84AB8OJAAPAQD---8iD1gHTQ6gAw4ICA8YBbofZIwBQy80Y2wAAQ9w
ARsO9AEPAQCrDuwADzAADQ9YABYPAQD-------8wLzEwQAb------------------8UfMXwD----
aw-EAv--sxI4BAAzMWRiBAAAmF4APFETZAwAAIhXAxgAAwQABfxwBCwAEGMgS1Y1MDFkYUQABQwA
F2IUAAtcAAwEAA0cAA5EAA8EACMXYgQAFzgEABdiBAANFABSODFlYziQAF80MDFkNXwDBn4yNjcw
MjU4BAAoNzEEADA0MjYsABFiBAA-MTQ2BAD-gzIyNzmwAQfEAQn0AQVMaw4QUg4IAAgMAA8IAFEP
kJEUHzBABv--Tg8EABAJRAYBQAYSZgwADQQAD1gAGg9EAGAPGAAFFThUBA9ABhIBBAASOAQAJjcx
CAAEBABmNWYwMjZhVAAPGAb-XgCAASM3MpABDwgACRY5wAEfNkAGCAfQUQ8gUgYLrFAPCAAJDDwA
DwgAJAc8BgRoWA_QkQAPQAb--3IABAAFRAYAQAYlZWUYAAoEAAREDB84BAAHEGUEABY5EAANBAAe
YkQADwQANQ98AAkPQAYYBAEAAXwEArQDQjQyNTYQAANABgVQAA9ABv9mAUQGHzEEAAwSOXgMB8QB
D0AGAgxwkAcQAAUYAAWwWQ8IAA8MPAAPCAAdCHxXAAEABmhYD5CRAA9ABv--RB84BAAWBYRdBEQG
AXB1kDcwMWQxMDFkMr4CEjQMABs4BAACIAA6MWQzIAAFJBMPIAAEBYQGCyAADfwFCyAABRgADyAA
CAmgEwxgAB9jQAYdAjQGArQDAgwAD0AGaxI0NAUSMhQFDAQAAXALGjEIABU1PAAPQAa8ABgGH2FE
BhASOXgMB8QBDkAGDgQAKzExEGsPBABgD9RZFQ9ABv--RQBEBQRIBQ88BgwlODM4AABsXQZEABc5
tAseY_ALDyAAAQkEAA8gABwJ-AUPQAAEI2Y3HAAPIAAEL2Q4IAAIAGAAH2RABh8mNTgEAA9ABnID
kBEqNTgIAC43MQQAD0AGxQCMCyI2MqABBfAAHzMMAAADgAwPABkMDAEABexjDwEANASYYwbsZA_Q
kTgPAQD--zsPQAYYAngMFTAQAAUcBiJjNoAMKjQ2BAAM4AsEGABrZjEwMWYyXAYDiQAmMDkgACpk
OAQAKmY3QAAvZDggAAMEBAAqZGGYGQVAABM1IAADGAALgAAChAASMkAAL2RiQAYfJDY4BAAPNB9t
AEAGAkQGFTWUAAYEAA9ABtgBZBIrNzRABg_ADAQELAEvNThABgYOqAUVZEQGBEh2DKQSDwgZGQ8Q
bAQPCAAmBLgAD0AG--9NGTgEAAqoEgO0cAcgAAUcBgxABgngBRViXAAEnAUEAQAJXAYqZDg8AAVA
AAggBgCsAyQ2MAEACYwAByAACUAGLmVmIAAECAAqZDjEBiU0NoQACGAABCQBD0AGBi80ZAQAYgWw
ACU0NhQADBwADBgADwQABA9AAB4OIAAOGAAPKAAQDxQAIg4YAA8EABMjMGHgBy83MQQACBI5cAcW
NkQGD0AGAwNgdg0IAAa4dgZUcQ8IGR8GQAYP8BgBD5CRLA8BAP--OwMcBQyMBQ6oEgAEABk0JAAF
oAsDQAYGKQACAQANlCsvNDYABgsHHAADIAAHRCsSOKQfD0AACQMgAAlABi5kYiAABAgAKWQ4xAYC
vAAeOWAAIWM21IkPQAYGLzdiBABjIzVkBAAWZRQACRwADhgADwQABA9AAB8OIAAOGAAPKAAPDxQA
Iw4YAA8EABQASLQTZSgGD8ASBAIoGQlEBg9ABgMTYhR4F2IceBpjiAwFPAweNEgMDBAACzAMBix9
DyAAAQ_QkSwPAQD--zsDNwUIiAsCeAwMAAYaYowFD0AGAAYYAEM4MDBhBAAEYAAJTAAGKAANBAwL
KAAEQAAJSAAPBAAJDWQAGmKsAA8EABYaOEAGHzlABggmNTgEAB82DAAkITY57BIC7B0A_CMfYggA
CYIwMjY0MDI2M6QSIjYzTAUvNjQIADQSM1QADRgABwgADyQADgNEAA9AABMPCAA7CBgBEzaQEgEk
Bh4xRAYMBAAIKBkhNTgEAA9ABgMMeAwMCAAGiAwPKAwYD4AMEgxsAA8gAA0PkJEBDwEA--84BJgF
A0wSD6gSAi9kOFgFAwSsBQ5ABg8EABsHBAwPBAAWDHQGDyQACw8EACsAQAYfYUAGCBc2DAYqNjgQ
AB81DAAMAAQABVw4E2H4BBBhDAAPCAAMH2IEABQfNQQAIA9gABEOiAAPIAAkDwQAQgZIAQegAQAg
BhM1DAAPRAYGFjAoGR82QAYJAKgFH2OIDB8LEAwPgAwhAlwAH2WQkSoPQAb--z8MqBIMlAwPQAYD
AyAAD0AGBQlAAA8EADwOdAYPmAYzBgQABjwTAEAGH2JABgwOBAAFUAwBVAwoNjAcAALEBBY2PAYE
KAAPBAARD_geCAJ4EQSQKxQ1EAASYXAABEQFDwQABgAoAAMcGg8EALgGfAEDnCslNTiIDAEciQnM
EgtABg-AEgULDJIIAAwJSAwOiAwPgAxWAhAACkyLBJCRDwEA--84BRgSCCAGAwwADoAFBlQFCKAF
D0AGBg1AAA-IBSsuZDgEAA9YADwEEAEPBAACDwEABAGQBBc2BAAaNTwGCcgEIjU5qAUAKAAOPAYN
CAYHFAAGSAAPQAYOFTEkAAlwAAsYNwEkAAkQAA9ABr8EPB8PBAABNTEyOAwAD3gfCh8wQAYABQyS
ALAFGWMADA4QDAfIjwTIBQcgAA_ADAoOMAAPkJEtD0AG--9GBDgGFTgMAAQcAA8EAPYPQAYJJjU4
pAUBDABfYzAyNmQIAAALYBcNIAABCAAHCAYSMhgGIzcy3BcWNBwGDzgACgQkAAdwAAsYNwEkAAkQ
AAJABg5YAA8IAKgvN2IEAC4OQAYPBAAfD8yQeg8BAP--------------------8pDEAXD7gB-3AP
JHz---9mLzRjIAAjAAApDywAAw8YAEcOvIIPkAALDkwADwEA-8AfNoiPdA9oAisPvAIGDwEA--_o
LzRkiI33DgEAD7AEgw8UAAE-NmIwxAL-Hw5IAQ8BADMvNGNwAAYPAQD------9svNjmACVUPbAYG
DwEA---------------------34vMTBABv-----------9AQMmVWF2Ek4BJi1OAnY2MEAAscAAS4
2Q8cABoSOBQADxwALSpmYQQABCwAJmNjBAAFHAAaYyAACBgADmwADszTDwEA2Rw4xEUPAFIQLzQ2
BAA6D0AGCQmoAQMYAg8BAAF-MjQ1MDI0NiQAAgQUAAokAAooAAQUAA6EJQ9sAA8CCAAAWF4AlFBf
MjAyNDMEAAAVNCgABjQADJQAGjgcACY1MQQACSgAB3AAKjUxMAAJKAAfOOgABA8MAQFfYjAyM2ag
ABAOCAAIKAAFJEQPKET-ziAzMdXdB6ADEjhcBQVgBR5jHAAiY2MIAC9mYRwAFANcBg8cADEIBAAm
YTksACZhOBgAImNjBAAPIAABImNjCAAMQAAuZjhABhg42F0LUGMJVAUWYgQABCgALzQ2BAADADAA
JmYzCAAvNDYEAHIJ7AAlZDhEUQwAUgggAA9ABmkA5AQP1AUNDCQABBQACCQADEwAD0AGMwAcAB9h
NAAEGWN4AA_gBQEAGAAEHAABDAAmNTAEAA10ABU4HAAJMAAHKAAKTAAGbAYBEAAJUAAGDAENOAAN
eAAKIAAPQAb-5wCADCoyYUgFJmNjaAUqY2McACZlMwQAL2ZhHAAFDzgAJw8cAA0EBAArYjAsAAAU
ABIxCAAPIAAJL2NjIAAEA-gAD0AGBS9kOFRXCAiUaQMgAC80NgQAAypkOAQALzQ2BABfDMQGL2Q4
7AAGBBQADwgBAi80NgQAFwgoAS80NkAGKg8BAAkEwAQIFAYFHAApM2YkAAD0AQ8kAAEOGAAPAQAD
CEgABJwFAQwAD0AGDh44NAwPlAAABCQAAVAABAQABSgAF2J4AAMcACYzZjAAD1AAACMwMCgACCwA
BygABSABJjUxIAAEBAAPeAAACAEABRgAD4AM-_ImMzL86wnwCwJwfwa8AxY5zAUiZTMoAAUcAA7s
BQ8cAEouY2MQAC9jYyAABypmYRAAASwAGmPcACZmYaB1FjA0BQ04BSNkOCwGBzAGKmRhEAAvNDYE
AAMOHI8OsAwPBAARDgQGDggAB_AMAIUFBVR9LWQ4BAAPQAYFBtgABAQAFjgEAC80NgQAFRE46AAi
ZDMoXi80NkAGKC84MAEACQXABA9kBiQAAQAOGAAPSAAPAmgFBJgFD0AGCwUkAC01MOALCJQADgQT
GTTIBQQsAA8oAAAOUAAPKAA0CHgACaMBC8gAD0AGhT8xNDEEAGAPwRvHBLQRDwQACTMwODIgmxZj
zAUuZTPsBQ8cABYfYxwABx9jHAAVD8ASAg8gACcBHAAWY6B1FjBQBQ5Eag8wBgADFAAFbIMqNDYE
AAQoBg48jw_MBR0CBAAuZDhkdw8EAAEmNDY4BhBmlJYPzAABD0AGCRM46AAEoBMHPAAPtAAXETSv
ZwG4AAMIAA4EAA9ABhIOvAQKAQAFwAQPJAAQDwEALQRIAA9wBQAPQAYLD6AFCACIBgYsAB9hPAAA
BMgFLzgwKAARAtgGBEQMDygABwoYAA94ABMPdAcBBVAAD0AGhh8yBABiD0AGzghIBQXw_BVhtAUF
ZKEFFAAM4AsAjAUKnP8GHAAWOAQGL2UzHAAzImIwaAAFLAAEoBIPIAAELmNjIAAqZmEgACZmYaB1
FjBQBQJABgiwEghEBh84bIMCBugFAmgMBUgAKjQ2BAAEQAAvNDYEABsPPAYRAwQADAEAD8wAAQSg
AA9ABgMXYUAGBzwAD0AGHS9mN0AGLgwBAAUcBQtoEQ8BAAkOXAUPIAojBUgAD3AFAgoUAA8cAAkC
FAAElAAH1AAPKAAJB0gHD1AADwMEAA8oAAgIAQAPeAAVDwEAAQVQAA9ABoYPBABjD0AGyipjY0gF
JmUzBAAHZAUFZKEiZmEoACdmYfgSGWEEAAD4EgK0DANcBg9UAAQPQAYmLmNjEAAvY2MgAAcqZmEQ
AAQwBgQwDAEcABZjoHUWMFAFAlQFA0AFJmQ4BAAHjAsEzAUFMAAqNDZoDASADCNjNAQAC3yVLzQ2
BAADImVkIAAqZjMIAA_EAAACsIMDeAEJpBIIOAwLxAAEBAAjYzaoBR03VAANRAYiZGIUACZlY6gA
D0AGEh9mQAYjJjAwjAQLBAAFHAUEBAAEwAQP5AQQBTQAB7QFBFgABmAAHzEEAAcESAAPcAUCChQA
DxwACQIUAA_UAAAPKAAKCIgAD1AALwgBAA8oABUPAQABBSgAD0AGhS81NAQAYQ9ABtcmZmGwBSpl
M3QFIjE3MAAvNjX4EhsvZmFABnMpY2MQAAQwDA24AAQBABc4EAYmZGE4BQQEAAVsgwI8BgUYAA8Q
BgEDGAA1MDBmBAAIGAAFYAYMCAAvZDgEAAsEhAAnODAEAAN4AQj8BQMoAALIAB84QAYMBCwAHzgE
AAApYTREAASMnA8EAAUmZjVABi9lZUAGMwcBACsyNQQADugED_QEBgU0AAcEAAwBAC8yNQQACARI
AA9wBQEQNQSpHzMEAAAfNDAAAw6UAA8oAFwRMZQCD5AGBA9YARICLAAPQAb-4SpmYXgFJmUzBAAL
dAUFGAAPHAAUCfgSCAQADiQGD1QAAB85HAAIDEgADxAADCtjY0wNA-QFDCAAD0AGBh84fAUADzwG
BCVkOBQFDEAGAoQGCAQAHzgEAA4FJA1wZDhjMWVkY1wGCpgAFzhQABFiqAAFeAEvZDgEABMIQAYF
SAAfOAQADwSEnA9ABgYEKAcWYgQALjQ2BAAPnAQMANygBNwgAeQEDzAMAAIkBQ7oBA-kBAUAMAAN
QAADWAAFcBkvNTAEAAcESAAPQAYCHzEEAAEPoAUOBVwALzUwhAYACCgZHzAoAEAfMSgADgoBACxm
MAEABSgAD0AG-9omY2NIBSZmYbAFImUzEAAIZAUvZTMcAB4PRAYCLmNl3BIPcAAZAQwAGmMQAC9m
YSAAByVjY4gFBZyPLmNjMAAPQAYKDNgFHzQ8BgMlZDgUBQ9ABi0IVBkBiAAuNDYEACdkOOAGBuQG
D0QGEQVYAAlABgtkDA8ADQoWZYgACJgTBAQABCAAI2RhBAALQAYlZWYEAA9ABg4nOTfkBAIEAAgB
AAEUAA7oBA-kBAYPQAACAwQAD0AGGg9wBQEvNTAEAAEPoAUOBiQABNAFDHwGDygAbR8xBAALD4AM
--8LDRwAH2QcAAcIVAAuZmFEBg84ABIWZBgALmUzOAAMEAAvY2NwDAsIrBIiMTYIAAyABg5ABg8E
AAwMLBIBBABSNDFmMjT4JAzkrgNEBQUIAB84PAYLITkwaAUA7AkBMAAqZWR4GAnkEgs4uw9EBhIf
YiSEdw8BAAgiMWLcIAbkBAQEABcxBAAL6BIPBAAMBEAAD2wMAQ4UAA9ABgkfMQQAAB8wBAAIHzGg
BQgfMAQACQ8oAI0PgAz-6AwIHwcEMgkcACpjYwgADRwAHzYcAAMnZmGAHx9jOAAAH2E4AAAfZBwA
ByJjYwQABSwAGmEQAAcwAAVwDC9mYSAAAgUQAC9jY4AMGgbEEg6kBTkwMDcEAApUGBthCAAOBAAF
tAABTAARZYUAADAABZAADiAZDzi7ABY4RAYlYTUQAAl4DA9ABgAEJAAPBABdD0AGCwLcIA5ABgoE
AAzQswgBAAwcAAU0AA9ABi4fMAQAEQ9MABEPKACiANQPD0AG-_sPBABVDoAfD3wAWANwDA8EAAsP
QAYiDEQGBDQADwQAGQQQBggUAARoryQwMAQSB3AABCQACBypKjQ2BAABMAAZOFzCD9AAAx9hHAAD
CIglCAwADQQADvgMDxgAGgNcAA9oBAcPWAwYLzllBAAXL2I5BAD-LzUxMTUMAA4EAA9ABvcPAQD-
4wxUBQhEBQgMAA9EBgAPBAAfE2FIABM4CAAEDAAWOFgYCSwAHjgEACZjNCwAB0AGBlAAF2IUAAoE
AA3sACpkODQNCAwAL2Q4_AwJDxgAHwNcAA8BAP_dAejTDwEAEA9ABrxfMzAxNTEEABUSYzAALzQw
AQD------7oCBAYMBAAXNgwAD0QGFC80YgQAFV9jMTUyMAEA-78uNTh8eQ8CC-_fH2M0e---IAYs
BggIAB43GAAPBAAOAJhEH2MEAAAXZQwABgQAD4wDzx9kEAAODwEAPi80ZBQAFg_sBrYOqAQP1AQj
DxAADQ60jQ8sAAc-M2QwAQD-Aw5UAQ8oACsvM2R4AIsvMDB4ABYPQAanGzc0BgAAOxJmBAAjNTYI
AB81BAATLzRkBAAAE2ZEBgpIBg_cC_YPAQAJLzZj6I0BD3iSBg8BANYvNGScAyoPAQD-My80Y1wB
-yAPIAELD1ABsgLYBRdmBAAfZQgAABtkBAAEFAAOHAAKJAAPTAABHmVABg8BAP---_wvNGMoAGQf
YXgAYw8BAAMPJBCmAtgFBNwFCAgAG2YcAAgEABdmCAAfZAQAAAQcAAwEABVlBAAPAQD------7oG
3AUMBAAXZQwADxQAARdlCAAIOAYEGAAfZgwACC9mMAEA-----------------1IEdD0_MTkzBAAD
xEEFEAAPIAA1DxgAFQ8oAAUvOTMkABsLBAAAKFAPeIpaDxwAECswMLw3L2Q4qDgABwQALzQ2BABn
JmM3iAAEgDgOPDkPpDgKAQQAD0AG----tC85MwQABwTsBC85MyAAOw8YABUPKAAFLzkzJAAbDkAG
D3iKfiowMEAGBQwAB-g9CCAAD0AGfQ9EBhEFOAYEBAAPQAb----JEjYIABNk7AQvOTMEAAMEDAUu
OTMEAA9AAAkfYxgAFA4oAA80AA8EvAAPgAwKD3iKfwEBAC84MHAFCg_ADCYIIEUvNDZABkYORAYP
QAb--3kFeAMvOTMEAAIArFQPOAAHDwAfDQ88AC8PLAAJAqAAGTHwBA9EAAkFCAAfOUAGYRY3DAAF
iAAfM2QGAQ8gAAwOQAAPGAAeDigADzQADAe8AAUYAgL0Yw6ADA94insvMDAkBgAE9AUFBAAWOAQA
LzQ2-Ig6DwQAGg0QUQ9EBgwDhBMBNAYIBAAPAQD--1oyMTk4eAMrOTMgBAPoWg_UBQwPdAApDgEA
D2gAGwasAB8xKAALD0AGcgcEABNkSAUvOTNkBgMFqAAAFABaNDAxOTUMAA8gAAMPGAAUDhAAAIwA
AZgELzkzJAAGDAQACfRjBAQAJjkwDAAPiFcJBNxjL2NjJAYyDniKD0AGDRc4PAYIxHwOQAYPfHwO
LzQ2PHYKAQQAMWVkOBhXAAxYLzQ2BAALBBBRB5QABawHDDReBCBRKjgwBAAPAQD--1oFeAMHHAQx
MTllBAA_MjIwvAUOBAYPdAAmDgEAD2gAGwawAAREBg_sAAYPQAZfLzY1SAUSHzFIBgEFqAAoMzDs
AAxAAQwgAA8YAAYM8BIvNjXUBQctOTNMAAwEAAFYCAcQAAZgAAdABgRAAA94imwuMDBABg2EDAcM
GQ9ABh4P-IgMBigAHzUoAA0EbAYCKAYiMGYcBgOsBwEYBik4MDReBMAAD0AG--_BX2MwMTdlvAUL
AzgADwEADA88AC4PLAAJBrAAFjOUBA_ADJEFiAAAEAAeZkQGCSAADwQAAR8wBAAkD2AACwXcCgck
AAicDAWUDi85M3ATBANABiZjYxQAL2NjgHcLI2E1FAADJAYF_BIfYXiKMgGMASpjN2QMD8gSBw8k
DBMJGAYP-IgLDygAGAU8BgQEABQwrAcBEAAfYgQAAB1hZGQBBAAPAQD--1oFeAMlOWUEAAEYABM5
BAQLGAAPBAYhDAEADjwADywAICc5NcQEHTOUBA9ABnMHRBIPUBIJEjn8_whQEg_YDAIFRAATMAQA
HzEMABwfM4AABAMEAC8xNygNBwgwag9wEwYPQAYAL2Zh7AUHLzY1BAAaBSQNL2ZhQAYgB2QMDQQA
D-yIRw0oAC9mN0wAAQIEAC9kODwGBBc4MAYXYgwAD0Af--97Ezl0DALARQEQAA_8BQUHOAAPAQAh
IzE5UJMPoAAYCQEAJWEx1AYMBAA_MjIxDAcF5AAVOOgEDwEATQBYBQ8MAAUGkAAPuAUHBbQFBCQA
CUQADwQAJQMwDAzQEg4EAAeUEgIQAAGYBwjgEggEAAxABgjQBSljY9AFARAADlwGDxwAFgWIACpm
YQQAD0AGDQV4BR84BAAPJmZm1AUPQAYCAyAAJmRiBAAvNDYEAAcmZGIEAC9mZkwAAy80NjwGAQ8E
AAkPQAb--3wBDAADPAYMHAAEjAUPBAAVALwVAcAVCRQAAgEACRQAL2EwoAAaAQEAJmJh4AYlN2X0
BgYcBgoYAAGoDA_ADGYPBAAEBYgAHzNcDAAIvAUP3BIAAQQAHjBoDA8MABIMMAwHdAAMhAAOpAAP
RAYHBSwAD4AMHCZjYxgADxwAGA9EBgIuY2XcEglABg-8iGMBBAAIKAAmZWUYAAEEABZlZAAmZDgk
FAEwAB84QAb--54fORwAAg2UBQ8cAAUHIAAEUAAMFAANFAYeYnASDywAAiU5NjwGBRwAATgGHWNU
AAQYAAGAAAewBgjoBA8BAE0FXAUP3AsQAAQACTgABagAHzNEBgQfMAQAJANAAAiAAS8wMIQAEA9E
BgwFLAAPgAwcD3iKUAEBAB84BACdFzQMAA8EACAPAQD--1oMTAQPHAAFCJQFDxwAByxjMAEACDQA
D1gAAQxwEg_wDAkBECYJHAAfOVQAAgkYAAUMIBlj6AQPAQBNBVwFD8ArBAEkHgGQBR4zzBkHIAAP
IBkBAagFDmgMDwwAEA9gAAUOyCsPJAAFBUQGL2E1UAAAB4AMBBQABeAFBgQyCRwAKmNjCAANHAAf
NhwAAy9mYXiKEgEBAB44DBIPBAB-H2IEAB0PgCX--3wOAQAPlAUHDjgADiAADhgADzwACwHkBQPo
BQ8sAAEPIAAFD1QAAQBkBgEEAAO0swaMDA8AGVgvNjUUHhQOUCsO5IgO2B4PBABFBXgZD5AADw8E
AJIrMDBABgdYMQkMAA0EAAvMiA-8iCQNGAAPQAAFBTAAG2EQABo4zBIJKAAPQAb--5kEAQARMaAK
HjI4AA8BABgGCAwCTAAG5AUfYywACA4gAA9UAAkIbAYExAYGJAAfMAEAcy85MAEAgwDYCw8BALkJ
QAYHiCUIDAANBAAO5IgPGAAaBVwADDAAD0AABAyMAAwQAA8YAAYPwCv--3dKYTAxOeyLBrALBhwA
BaAFAxwADwEAAQQwAAAIAA8YAAIFdAAIQAYvOTAsAAIHaAAMJAAPyAADAlQADmwGDkAGDwEA----
--82MzE2OQQAGzgIAAwMAA8QAA0fOBQAAAwYAAQMAAQQAAQIABc4EAAEBAAXOAgAFzgQAAQUAAQI
ABc4EAAEFAAICAAOGAAPQAb-5w4MdA8BAIcvNjlABv--lhNhBAAbOQgADAwADxAADR85FAAADBgA
BAwABBAACAgADwwABRc5BAAXYRQABAgACAQADxwAARdhEAACCAAeMjksD0yDhw8ABU0vM2SogwkP
4IT-BA8BADMPUHsWDwEA----7S80ZDQESy8zZHQAAQ_cAC8vNGQsABc-NmQwAQD---9dD58cnQ_U
Ci0vNGRUCWsO-AQPAQD-----ry8xMPgB-_YPQAb-----yy80ZLALGy81ODAABz82YjDYDD4OqBEP
AQD---IPiAr-------8yD0AG----ywUkNg8EAKFTZjQwMWW8Pw4IAA-gAHcMWFcOdDcPBAAXBNg9
LzQ2vABXBbAAH2FIPgIFIAAvNDYEAHomMGKcWwHMKCE5OAQAcTIwYjAxYjnU1A0IAG81YjAxNWMQ
AAUPCAAKGzAEAAXINQu4zg8IAA4POAB5BxwABEABBCAADBAACDAADwgBAXEyMTQwMjE1_MG1MWJj
MDIyNTAyMjQIAAJQAB05GAANVAAPQAb-e0g0MDE0uFUEEAAMCAAOIAAPGAALDygAAg8YABgPIAAF
FTYEAAQoBgIEABM1CAAVNBAAASAALzQ2QAZ0B-wFL2Q4EAATDwQAAQSsBQQY2y80NrwAUBNiBAAD
hAAJLOEGWFcObAEPQAZ3AOfMAqAEAGA1AIzUAEQGH2MIAAMQNeAEV2QwMWJlEAAEIAAHGAALEAAB
3AQPOAUACGQGDwgAEg84AHkOEAYPBAAKDjAACcQHBjwGEDEEAB9kCAASDVQADwEA-3kgMTc8CBYz
tAUEEAAMCAAOIAAPGAALD0AANQwgAAhcBidlNwQAEzZEBhU0DAAPQAZ-A-wFL2Q4EAATDwQAAgLM
BQUY2y80NrwAUyNkYQgADkAGBjRkDtBqD1wOJxM1CAAaNxAADyAADQQQAAtABgQ8BgVEBg9YDAwg
MjCoDB85iAwaPzBiYjgFAgZsBg_EBgEeZSAADzgAAhtlOAAESAAHIAAUYzgADygABQQYAAsgAA1w
AAcgAAUcAAQYAB9jKAADBBgAD0AGBw54DA8IAAMPgAz-nRIzhEsPCACdKTdkLAYGBAAVNAwAD0AG
dgWEUANoBQF0BR84EAAQD5QMAR9hQAZbDEBRD0AGAh5hdGoPBAAtL2ZmCAADLjQ2GAAOKAAPQAYP
A1gMAMxZcjE1ZTAxNWQIAAMUBRAyH5gnMTEYAAIwAGMyMTIwMjF8cyliZSAAD0AGBwZkBgBIEwwM
DQJQExZhKAAPOAAEANwRBDgABogTDzgAFR85OAAaBQgABRwACxgAL2JhMAAKCAgBNzA5NngMAcQS
AUABDGgMD4AM-6sF4AsEoAULGAAPCAADD0AAWBJjNAYDCAABvAADLAYgMDE9ER85gAyHBYRQG2Eg
Bg8QAA0PlAwFFWFABgDdUg-IEg4mZjUMACJlY8B8LzQ2vAAcHzhABggWOHRqLzQ2BAAzL2VlCAAD
LjQ2GAAPKAAEBXAEDwQADDUxMTQMAA4EAA84ACcGfAUEqAsZZTwGB0QGEjQgAAMoAA84AAAIAAYH
BAADOAAAEAYfYzgANANIDAQgAAUcABdjWAAXYhAACxgAD4AMAAIsARVhDAAMQAEM8BgPgAz-qyo3
ZKwFDCAADggAD0AAUg8BAAEELAYOQAYfNUAGbwhkggSsGAQQAAEkBhdiEAAOBAAPLAANBkAGD4gM
EAeUCyMxY5QSLzQ2BAADDFgZC7wADURwDwQAiSpiORwLDwgABiBiMCALApgLCBgADwgAAxcwBAAC
WAsGIAAPQAYDAzwACTwGGTncBQKUGQ8QDAMIKAAOBAAfOTgAPgkIAAUcAAbUEwXcEw7UEw9ABgcI
ZB8lNDcoAAR4AQCUDA_ADP_kGWO0BQ8gAAQPCAAFD0AAVg9ABgUBCJwDQAYB0K4PgAxxAzwGBOhq
BAEABZxdDmgMDgQADywADAQ4BglABgRsdio0NgQAB5QLBUAGL2VmMAACCLVfJzFmgSkUOGBeGWKE
JQJ4DAhkExtiBAAXOAQAG2IEAA8UAAUfOBQADAgMABtiGAADNAEDgAwBFAsJNAsfYkQLABtlRAYK
GAAGKAAACAALpBIDOAAGKAAHCAAFvAsCFAAJvAUhMzQEAAYUABY4PAAFOAAbZDgAAgQADzgACicz
ZXAADkAGCEAABeQABXAAWmIwMTNm-AAFVAAVY9QTBdwTA9QTDvQADkAGdjIxYTAyMWJsBgMoAARA
AQBgbQFwDBIxzHsPgAz-lg6wBW9hMDE3YjBAAJECQAYQMkEWEjDVAhMyQAYCZB8BJAAvNDYEAFIE
UAUOBAAXMgwADwQACAeI8w8EADUOFPQPKAAID8gADAakBQ9ABgEIZBMuYTCMag8QAC0TOAQAAnwA
BmgAH2IsAAADEAAAzAAfYiQLBAGcCwNMBQkYAAhEBggYAAoIABcwBAAIOAAPvAsGA4QABHQAAtgF
DtwFBawABVwFCqwADgQADzgAPAQQAAjgAAVUAAAABlU4MDIxOQgABGgAD-QAAiJiOeQUBGz7YTIy
MDIyMywBCLQGAWAMLzFlEPQCD4AM-5QAIBIXNQgAXzgwMTc5IAAGDBgADAEAD0AABA8QAA4PgAAF
DzgABQABAAVABhcw0K4iZTSgJSFkYhcABfSBCQgAFzQQAAccGA8EACEDpAUCzAQPBAADAehqAHB3
L2RiBABcHzgEAAgXYgQAHzjIABAItAULQAYFBABeMTQxZDOMag8QAC4EHAYXYYwAD2wADxMw3AUr
MTVUCwfUCwQQAAgIAAQQCwYYABllQAAIgAwIgBIGOAAZZYwLBIQADMQfDAQABCgACTgAB6wADzgA
FwKsAAQgAA9wABoUNUAAA-wABRwAF2MEARtkPCAEGAAIMAARZEAGAUgMAzQfCNgYBsASFDRkBgBk
HxE0RAAFdAYCMAAPQAb-jAAEcRc0CACTNjAxNzcwMTcxBAAMIAAMGAAbMQQAD0AAAg8QABAPgAAD
DKgANzI0YhQAAkx8CAwABDwGAAQADwEAFQ9EBioC4AQE5AQIPIkDDAARYZwFBkQGCBwACQwACBQA
DxwABQQIAAwEAAgYAA4kAA8EAB4VYUQBBgQAChwABkAGBSwAVTQxZGM0TJYCCAAPBAA3J2RjgAAa
ODgGDwQABAJABg4kCxswBAABGAAEJAwqYjkQCwQYAAV0BQtAAAdIDAg4AAgEAB8xEAwVDpAYD0gM
EB85OAAkD3AABwkIAAy8BQ8EAAQMMAAEgAwIyBgICAAIgAwPGDIED4AM-5M-MDExBAC4EzYEAAMQ
ACMwMGwEHzgMAAoFqAwvNDbkBDAELAsXOAQADkQGDwQAjxNiBAAEwAAI5BgGjHYFIAAmZGIIAQ8E
AEUmZDgEAC80NkAGEwhgKwF0KxliTAsEkCsGfAsKIAAMPAwOgAwEBAAWOBQACwQABIQADxAMDwN0
AASEBQU4AANgAA0EAAAYAAfkAAQ4AAHEAA84AAkfODgAAwQQAAc0AQEcACI2McwALzllBAADBOQA
KTYxhAACQAYEfAwD0BgDEAAEKAAYMNwrA3AMDAgADoAMDwEA--9ZCfgECQQFCkAGDogMD-AEMQhM
BgO4Cw9EBgAKjAUPBAAZDvwXDxAAKxc4BAAIQAYOSCwOtAACtB4PBAAuBPAlJmYyFAAPQAYoDAQA
ATQqKjllBAAHIAAPHAAADwQA8y85ZQQACy9iOQQAJg7cKw8EAAIPQAb--2YH_AQHBAUEkJAMAQAF
GBkvNDZ4ETwDlAUMiAwE1AYPCAAFD_QFAgQUABs5aAAPEAAtFzh4ABNisAAEEAAfOPQGBwQkAC5m
MfgFDhQAD-QFCwcBAA38IAmEMgOoAQ8IAAUPQAYFBOAYD-wEBSo5ZQQAL2I5BADzLzllBAALL2I5
BABXDwEA--9aBQgFJ2Q40B4HLLobMQQAD0gGAQuYBA8EAB4vZDjMEgcE1AYPCAAFD_QFAQgUAA8E
ADknZDh4AAOUEgWIAB84QAYIAiQADPwrADgGBgEAETgYAAYIAA8MAAUGAQAGRAACIAAmMWQEAA8B
AA0MjAYJHAAERAYPAQD--------------wwO1GwPAQAHD2B5Kw9oABoPAQD--1QvNGPMAf-YLzU4
QABLPzY3MGQB7g8BAIE-NGEwAQD--------4LzRjJAArD0AAES8wMEAAQy80YVgAKy80YxwAGw4w
AA9YDyAPeAj-----sA8EBS0vNGRgAA0PfAAzLzRjOAARD1AAcw8gACEOJAAPAQD-----kQ-8hhoP
AQD-------------------------------------------------------------------------
-------------------------------------------------------------------------ygi
YWEEAA8BAEz-ADFhZjAxYWMwMWFkMDFhZRAAVAoEAAnsABI4BAAOWOYPBAD-DCAwMNh0BzC8BcSX
ANSwHzUQAA8hYjgEAACHrj8xZTEQAAsPRAAFCxAAACwADwEAjTAyNjcEACA0MiDV8AE3YTAyNzE0
MmMzNDI0ZTgy2LUkNzEkAAYEAFBkODAyYwQAUmUwMmNmSACRYzAwMmVmMDJkEAAAQAAUMAEA8gQy
YzMwMmRjMDJkYjAyZTYwMmMxDAAgZDV4AEY0Mjc5XAAmNjcUAAEEAB4xBAADkLsFEAAKBAAKvAAE
BAAA4AApNWGomQ9ABv-_AP-DTzFjMjABABkgMWKYyi80MBAAXQ9ABgUBYMcIZJsvNDYUBugAzAEQ
M48EAHWLBRgADywAAgBcqA8BAAAIzAUACAYPEAAHAzgCBSgGChAABQEALmI4RAAPQAYGHzFABp0O
PAYkNzEkAAUEAAE4AJ1jODYyZDk2MmTkAABAADAwMmMoBgIUASAyZBAAFzdQBiQyMAEAASQGANwF
B2AABRQAJjc5hAAGBAAdYxwGDzwGA0Y0MjYwyAAvNTlABv--DAI8BhMxBAAPRAYXDuAFD-AFBBBi
XL8fNhAANw9ABgwBwKEPWOaADwQAEipmNQgAD0AGJgAUARViXAwPbAADAvCuD-ABBQjMBS8xZXAM
AAQQAA8BABgPRAAFDFAGABAADwEAjQn0Cw88BgEkNzEkAAtABoIwNjJkYTYyZHwBIzI00LQDeAwC
nAxTZDAyYzR0DJdmMDJjOTAyY2EEAB9igAwLAzjOBYgADwQABAFMrC85NrwAAwQEABA2BAAfMkAG
--8KANisEzkEAA84ABgPQAYVb2EzMDFhNBAAOA9ABg0DBKgIQNoPBAAtL2ZmCAADLjQ2GAAOKAAP
BAARDzgAKw1UDADwAxIzXAwiMTUYAAgUry9mMUAGGA9wDAMNIAAPCAARC3QGBkQACiAAAAwADwEA
jQS4BQyABQBwvAF4EgF8BR83QAYAVDUwMmU3sBJCMDI0ZAQAIzc4dAwWN4AMFGWIDBI2CAAWY8UF
PDI3OUAGBhQAD6gSCwOoABkxfAACCAAfMQQAAABsAB80QAb-9wZwDB8yQAYGDCQADwEAAQ9ABocS
OEAGCEDaDwQALS9lZQgAAy40NhgADigADwQAEQ84ACsPRAYCAMy-AIAMGWXkrgEcAA8BABAPLAwX
A-wFDwgAEQ5EAA8QAAQfMUAGlgmABQMEAAD-DQBEBggBAAKYEhJjXAwGQAYGNAwjY2MEABM0gAwV
NrwSBMgSAMASBDwAD8ASCA_oEgkMrBIOBAAPQAb--xAbOCwGDkAGDCQADwEAAQ9ABhZmYjIwMWIz
EAAASxUfYSAAGA0QAF1hMDFhYkAGLzA4BAC7DgjbDxgAFg8EAC8WYTAGDFAGAegFLWUw-AUPOB8K
DTQAChAAD6QGAS8wMcASlgIAGQYIAALABQcIHwEwADRjYzABAAdABgYIBlBkNDAyZDAfETMcGQRk
HwrIEhQxPAAGeAYoNjeMAAIUAAEEAB8xPAYrBBAHBzwND0AG--9kBDAMDjAGDyAAEwwQABA5BAAR
NUQGCewALzgw-MAAG2IEABc4BAAbYgQADxQABR84FAAMCAwAG2IYAAdQEw8EAA4fOAwABAwkAAQE
ABtiBAAPGAAJHzGADAsfOAQACAMBAAjcBQEABgz8BQs4HwQQAAEIAAQUAA9EAAUPZAAALzAxgCWe
CHgYBUQGBcwSADQSDkAGBoAMBGglIGRiHBlANjJlNQQAA-ASAwQAJWM0PAAFeAYmNjcEAAQUACU3
OXQABXwADugYDwQADApgAA9ABv-bDwEACAwcBgYsBg8UAAEuYTABAA9ABiwPEAAeCoAMAmAAACQA
CywHBUAGA8ArBbwFDMzHDxAALRM4BAATYgQACCQGDCwADxAADQQ4AANIAAn8BgRUAAQIAA48AA8Y
AAYFSAATYSAAB8ASD-QYARQ4QAEWNfgFBNwFKjgwEAANDAYvMjABABUORAAPUAYDAAwAD0AGogp4
GA1EBg9ABgAFqAUBDAAEKB8kZTAoHwPwEhY1DBkuZWaADA8EABUmN2MMAAwEAARwDASoDAtgAA9A
Bv-XHjjsAQjQGA8cBhIHJAAIPAAJJAAJ0AUCEAAF0AUEBAAXMyQMDwQALAaADBI3kAwPwBIAAlAF
BAQAD_zlAg8QADAMwAUeOGwAD0wAIhs4-AYfOFwACQAUAA90AAQKSAAC0AEvNDABAAoUOEABDgwM
AQEAGzgQAAwgAA8BABQPRAAFATwGKWUwUAYPQAaiIjU4BAAvNzFEBgIPQAYJCfAYI2MxVAAC3AIE
QAYTMsgBADwABTgAJjY3BAAfNAQAKARQACM3ObwAD4AM-_UeOewBChAGBgwADgEADzAAFwTQBQWY
BAU0BgIEAA4QOA8QACcGRAYCoAwAeCgPQAYDD1jmhw9MAAgDRAYUOLwAAwwAAAQAHzFcAB8LSAAP
AQASD0AGCAHYBQDgBS9kNCAACQ8IABMPRAANBxAAD0AGphc2QAYC0BIFRAYGQAYfZkAfAAPwGAQI
DAEMGSE1MAwZJmQyGAAkNGR8AA4EAB80BAAmBogALzc5gAz-7B9hQAZgKWFhQAYIgBIPMAACDxAA
HSZhYQQAJjgzDAAEBAAUMAAFFjhEBi80NgQASyZkOAQALzQ2kAY4H2I8BicjNDY8AB9iQAYHAywG
JzAxBAAXOAQABAEAHzgEAGwfMEAGoAwEAAbQEgZEBhJhQAcOgAwDfCUBTAAUYWg_MDAyZBwZGWG4
DAl0DAgEAB80BAAoBIgAIjc5vAAPgAz-5gB4BS85MwQATwTgBQ88BgEuYWYQOA8QADEvOWSgDAMY
MEAGA4gFLzQ2BAAvBygxD6gFAwMEAC80NgQALwkAGQ88BiQNSAAPiQUUEzgEAAcBAA4cDA8QAAwP
CAARD0QADQUQAC8xMEAGsgQwDAUUAA-8BQgEHAYEcAwDCDIEgAwIQAYBDAAuNjcEAB80gAwqCEAG
BhAAD0AG-94vYWEEAGMIPAYuYWbQMQ8QAC0vOWSgDAcDBAUJPAUE-AUIXAUOFAAPBAAKCAEACBgA
BagFBAQABKjhDwgADggMAAsIAAwAGS80NgQAGwTcAAtIAA9ABi8M-AUMEAASMhAAL2UxCAAGDjAf
AxwADxAABh8wQAazDAQALzY3QAYQAnAMApAMH2SADAIBDAAPzBIBHzQEACgvNzlABv-zBcAFBQQA
BjAxDxwAAwPgJA4kAA4YAA80ABIDBAAFAAYLEAAMkCsPIAAOEzA8Bh83QAYUAjwFD1jmeQ8BABEO
eBIVOIgADWwGAwgAAH0SDNwADkgADwEAEARrAAcBAAjMBQHgBQ8QGQ0EGAANCAAInAAPVAATABAA
DwEA-------------zQvNmT80AsfMyAADw-IAf90LzcwAQD-7wycAw8BAP--1w4s6A8BAP--UQ0I
CR9jAAaHLzRjLAACDwEA---UD5Ds-0ovNGMoAC8vNGM0AAYPAQDqLzRjFAECDwEA-----------y
BIArDwEA---nP2JhMEAG--------LA88BgEvMTABAP--kAnwMC9hZhAAbgA0AwXoPQQgAA84AAUE
BAAJMAAM9DcfZgQAEwQwAA18AANQAA8QAAwO-AYPeAz--zIfMUA4LCo2NwQAA7xjDAEABEyDBRAA
I2MwtEQDuEQBEEsYMdhdARgADUg4BiRFDMRKCBwABgQADxQAFQgEAAuIJzMyODXoSxJlDAAICAAB
BABTMjAyN2QsABIzHAAHBAA2MGIz_DoPBAAQIDI3XAAAFG0OoAEPAQDhAQQFDGwFD0AGbQ2kBQ84
AAQFBAAOMAAPLAACDRwGDjAADnwADwQAEwdABoxjMTYyMDE2NAQAEDgYAA8BAAAONAAPBAALAUgA
BwgADAQADxgABQ4gAA8EADcM3AAA0AAPFAABD5QAEFM3MDE2NgQAHzcIABQMBAAeNwwADwgAAAcB
AB80nAAIBKAACMAADBAADAgBDywABUY0MTYzcAAhZDg8BgNsOgg0AAEEAAEMAwAIAA8BAAwBWAUu
NTZABgd0BQ0EAAUkagMIBiljOHhXBkwGHjUwgwg0BggMACc3MQQACUQ_DwQANwq4AUZjMjg3MAYm
NjgIADA2ODgcAAjAQQEoAAxwBg5EBg9ABv-ABPgFDDgABQQADvQFCFQADygACg0wAA4kAA9ABhwI
QAQYOAgADwEADAhABAQ4AAwEAAQYAA8gAA0OBAAOIAAPBAAZDzAFBQ-cAAEDjAUGFAAANAUEEAAH
OAAMQAADYAAE4AUK7AUPCAAPUWMwMTZkCAACaAAMIAAMCAAbN7AABZAAD_AACQwYBwO0AA0oAAf4
ABc0EAATNAQABDQAFjUEAB5lfAgPQAYuBkRqBXwFBkAGGmNIDCVjMHhXBAEAAlAGE2S0dhYyvHYP
QAYRG2WADA9ABkMGGAYIFAYACAASNzlACwBIAnAGLzdlRAYBD0AG-zESYQhEBRAAXzEwMWEyEAAI
HjAwAA8gAAoMYAAMIAAEQAYEBAAL_AUHKAAFbAArYWYEAAqEAC8wYYwSBAU8cAMcAAVcAAp8AAVA
AAUwAB9iEAACC0AGCAwEDVgEDwEACAWgBAREBAcEAAGgBA-MBQQPGAAJBAQADzgAJQ8EBQQOHAAI
NAUCBAAbMpwFHzJAABAK5AUPBAAVDAEACkgADAgAETdsBgc8Bg8cAQkfMLQBFQ6EAA9ABgUABAAF
eAAEgAwXMFAAD0AGJgCwAgQkag0MEgdABgY0BhM1KAYCCAAIAQAA_EoCJAYSNsASBLx2D0AGBSE1
N8SJAQgABIAMCBQAJjRmBAAJLAAfMVSDABk2EAAFDAcP7AEABRgGBoAMAXwMAXQBCkAGCogMIjg1
NAAORAYPQAb-FwX4BA8EAHwBxAUFpAULZBgNLAAE7AUfYQQAAxM4aAYjYjIcBhkwPHAPPAAKA0AA
DTAACRAAC8B2DwEAKwVABAzIBAQIAA4oAA8YAAYPIAAMAggADzgACAUEAATEBAQQAA8cAAEBEAEv
NjUEAAkOZAAJQAAXMEgMHjf8BQ8IAAgMAQAGHAAKKAAMMAAMhAAEEAALNAEPAQAiD1wACA1gAAQk
AQgsAA9ABhYEGAYLNIMFfAUPQAYGEjhgDCZjYwgACGRXL2Q2sI8BBTQGBNBQDwQARQnIAAQMBwO8
AA8BAAEDCAYEPAY2NDI3MJIVMsQDCSwAAkAGDkQGD0AG-xcADAUIgFwMkFwPEABVCQwGA_gFCqQF
FzAkDB9mBAAaQTBhYTT4UCdhZhRRAwgABiQACoQAAQgAFDAkAAJAAAcwAAZAAAIkAA9ABjgMzAUE
HAsP5AoBDhgAD0AAAwOUBBAxgBcbNCQMHzBQAAEGIAAZNMQEBBAADxwAAAPMCx83sAUCBAgAAmQG
GzQEACwyMAEABkQGBEAAHzcQAAoPQAADE2YgABk2LAADfAwPJAwJBTQBDwEAKQhcAAQMAAcEAAgM
GQUADQY8AA9ABh4EwBIF4GMNRAYmNjcEAA00HxI2nBIIZFcLiHAEAQAFQAYqNDcEACg2N4wAA8AS
HzEEACUPyAADDuwBDQEAACwGKjI4CAYmMjjsAA-MEgITNrBxDkQGD0AG-xADmAUFFAAPEABgCrwF
A6AFJWEwGAAJOHYvYWZABh0FBAYANGcMHAAMBAALPAYEBAANQAABfHAqYjNIACswMFAFD4gEJhJj
VAQvMzBAACgECAUDjAAfNAQABA6kAAYcAAIEAA8YAAUEQAAEQAsCoAUbN7QFBAwAEzcsAB80hAAU
AAQGE2UIBhdlDAAXZKgMAggADwEAAQIsAAiEAAIEAAokAA-gAAMPAQAxBigGD-QABSc0NKQBAzQA
BEgBD0AGJg0kagh8BQUEAAFcDBc4kI8SZZwSCUAGBhAZD0AfBQKoDANEABc2BAAuNzFAHw9EBjEL
QAYEXCUEdAMAdAwALAYARAYO-AUAHAAGyAAOjAwORAYPQAb-Gg2oHg8QAFgGvAUWZgQAIjk3yAUr
YTBIXQQgDAJ8GA8EAA0FXAAmMTkMAAswGQQYAAIcAAN0ACphZgQAB0AAD3xwAgAEACswMLAFKDMw
IAQJfAEvNjMgAAkPNAA1B4wADwQACRsyYAAZNAQAD0gACxMxqAUEBAAErAUfNwgAAB80hAAOCvAA
HTdABg8BABUKZAYVZgQACiQAAuwACAwAAgQAAagNCdwFDwEAHQZMABg02AwA2AcP6AwJBvgHD0AG
JwEEAD8xMjhsdgcBxHwVMNQYBgwGAkAGAhQGBlATD4AMAQYQAAJEAAfQEg7AKwIEAA90iRgGmKIB
KBkEDAcLQAYIGAYBoCslNzJwDA_4ZgEBXAYKdAYOjAwHRAYAdAAPQAb-FwRgHg8QAGAO2AUMKBII
qAAeZuQFD0AGEApgABdhRAAL6AwFGAAWZuQGJmFmBAAEDBMHlAAHQAYDaAUZMxgFAhAAFzJcBAIQ
AAgkAAgBAAIgAAk0AANYAA80AAcOQAAFwB4MuAQHBAAfMgwABAwEABczDAAIBAAXNQQAFzcEABs2
BAAEGAAELAAfNAQABBMykAYTMsgAFzdABg4ABg8BABUCPAAOgAYD2AAOJAwO3AUPdAAgHzNUAAUG
JAYFLAACGAEJAQAPQAYsDwQAAgIsAAY0DCtjNOQFEjNABgEUBhdkYAwWMuQSBjR9A0AGGDWIAAIE
AC83OYAMLgGYogVQAAYwcQxABgUYBg50DA8EAAYP_BIDEjVIBgOMDCAwYXAZH2UEAAQPGWbzCAQF
CNAFD0AGag_0BQEnYWY4AAIAJQLAAAuEDA48AA9ABgIEEAAPBAABATwGAfwMFmakAA88BgEPQAYD
CzgEEzMEABcyBAAEIAAEEAATNAQAAaAYAyAACBgAGzIUAAgIACsyMAEADAwFCAgFFmOgBQgEABc0
BAAJPAAPBAABFjg4ABMx4AUIIAYMEAAfNggAABhmUAAPBAAGAkwBFzf8BQ4ABg8BABUGRAAAQAAG
BAACWAEfNAQAABUyJAAPBAAMA3ABHTUEBggUAAuIAQ_gAAAA6AAKHAUiMDGwAQ8BAA0EWAUFaAwv
NzEEAAcELAAENAwjYzTgCwIEAAXAJSZjNAQAASwAGjLQEgtABgEoAARcAA6ADA8EAB0PIJYHD0AG
BAREBg8scxUFtAwOjAwKkAwmODWYDA4gLA8BAO4KmAUG0AUPgAxrAxgAKmFmBAAFOAARZvh8AcAA
AaAlF2YEAA48AA9ABgEEYBkEHBMJJAAvYjNQAAMMPAYPQAYGHzUEADAXMkAMGTUEAAL4BAboBAdk
BAg8BgV0DA_UACMBRAAHEAAPBAAFHzcEAAQbNgQACBgAFzdAAAxwABs03AAbZIgSH2QwBwQXNQQA
BCQgMzI0MAEADkAACSwBD4AABg8BAAwHRAAI3AAEuAEIFAATNAQAHzUEABACnAdPMDEwNIQAEA_A
DBYBDBICLAAC9AUsZDf4BQEEAAb4JAcEAC9jMowlAg9ABgQGAK8vNzk8BjcvNzFABgEPBAAmBHAG
AUgGIjgyPBkHUAYBLAYEOAYMCAAPQAb-AgQsEgQQAC9hZiAAGw8wAA4EsAUOMAAPQAYeBCAZJmIz
EAAPQAYZC0AADyQABi9hZjwGBw9ABgYENAQPCAAdDHAEJjI4iAQIHAAXMuAEE2YQACsyNDwGARwA
MTAwZkQGAjgACEQADwgACgfwEhg3GAAOCAAPBAACHjYMAA0IABs3EAAUMdgMAwgAEzQEAC8yMLQF
Axsz9AAFTAASNJASLzQ0QAAEC-gFGzQ0AQSkDS80MEAACA9EAAAFgAATMMgADxQABBNmEAAbNyAA
CAwAGzUwCA8BAAsBsAUIgAwmNGRwBQMQAAkMEgRABi9jMEAGAyYwMHAYA0AGJjA5iAAIDBkAbngA
jB8JiAAmNjfAEgzwMQgMAC83MZiiDjcwOTMEGR9mQAYjCXB5BwwACfwSGTicDAmIDAc0BggEAA_A
DP8AH2YQAEsOgAYPQAYEEmEEOCphZgQADDgADwQAFARcAAZgAA8kABwPPAYFD0AGBhM4BAAbOQwA
BBAADAgABAwABBAADwgABQQMAAQQAAwIAAQMAAQQAAQIAAQMAAQQAAQIAAQMAB85DAAECAgABAwA
BBAADAgABAwABBAADAgABAwABBAADAgABAwABBAADwgACQwUAAgMAAgIAAQMAAQQAAQIABs5FAAE
DAAEEAAECAAEDAAPEAAFBAgAGzgUAAQMAAwQABM5QAYINAYEBAAfNhAABg_ADCgE0MEEJAAEBAAB
9AUBgCUE1BgpYzYYHwh8HwAsIgEIAAVABgJUBw8cMgIvNjcEACsmN2PAAC42N-gGCxABCRAGAQgA
HTQUAA8ACAYBJAAINAAVNQwADUQGLzdlQAb-cA4QAA9ABgAWYagMDdwYCzgADwQAOASAAAKEAB9m
PAYTD0AGBhM5BAAbYQwABBAADAgABAwABBAADwgABQQMAAQQAAwIAAQMAAQQAAQIAAQMAAQQAAQI
AAQMAAQQAAQIAB85FAAIBBAADAgABAwABBAADAgABAwABBAADAgABAwABBAADwgADQ8MAAUICAAE
DAAEEAAECAAbYRQABAwABBAABAgABAwADxAABQQIABs5FAAEDAAMEAAXYYAMHjYsBg8EAAQPdIQU
DEAGCgzILzY3ADIABqQrATw4C1glDITUBAEAC4AMBhgALjY3gAwkNzmQAA8EABkKvAApNzEEAA8B
AP------ygU8Bg9AH0kPQAb--98vNGMUfRsHKBAPTIIHL2IwkAA6LzRjJAAPDhgADwEA-ygPSAFF
LjRkZAAOdAAPAQD--_kuNGQMAA8BAP---8QP7Ab--zsvM2NwBjMPAQABLzRlMAALDvwVDjAADyAB
iQ_gAF0P7JARAJg1DwEAdS80YxyFIy80Y1QACg8BAKIPuAAtLzRkfJEKDwEA--------SA4cCg8B
AP_gD88g-----28PQAb-----------9gByAyD0AG---------1AEREIPBACNdTBhYzAwYWQQAA8Y
AAAPWAA6DzgAHREwFDsfZiAAAAqQXA8EABUMYAAPOAApBBQABKQABBAANjIzOCgDAAQADwAD4SE1
OQQAXzIzYzAykCIEQjIzZTQEACJkNCgAAiwAAxgAHzA0AANSODAyMzlkAQ9UADQBAQAPdD0BL2Fm
xEMUHmEkPg4gAA_oPQIPmAFeAHwABQwAHzcQAD8AXGoPIAAICQRrDoxxDxAAGyZiNOhLJ2IysD8f
MABMAgKIAQQwAALwSw8EAAcDKAApYWa4AQpQABpmIAAPsAANBxAADgACD0AGOhU0BAABnEoO0FsP
BAA1DlAFDhgAD1gAOQ84AB1gMDg5MDA4QEpXYzAwOWQgAB4zRAYPYAAZAHRMBxgADzgAFg8UAAEQ
OAQAFTcQAAHcBC5hYSQCDwEA2DExNWEEAA8MBgsCHAAQMmRGrzI5MDIyYTAyMmI0AAwVOUQGD1QA
Jh8xcAwAA6wBAugDDzwGDQswBgTQSi9hZgQABATUBA9ABsgiOTYgAQ8gAAUOQAYOLAAPEAAgAVgB
DHwBCUwGDxgAAg_wAQwILAAK_AcPIF8GD7AAFAUBAA9ABkcXNDwGFjTYUCcyMBgABBAADwQAHgSI
BQ-QCwMVNAgABhgAHzZYACwfNgQAGgyQAAE8BgBEBgMYAAa0BVViMDE4YzgADwQAEAE4AQNAAASU
Ug9EBg4OuAYHHAAIFAAfOIAM-wYHuAUP7AUDDxgAFgIcAASADAEPAA88ABYPQAYVD0QGAQUcBQHM
UBphWAQJvG8KcGMKjAQKiAQPHAJmL2FhBABHFzjYAA8EAAwECAEFiAUIEAYvYTAgABgOCAYPBAA2
JmIyYAAFgAAPoAwJDxAAFw9ABhAfNPAFJAg8BgM8ACU0MPAEAhgABLhXDlQAD6AFFgoQABEwVA0X
ZggAAygAKjYymAAjNDaUAAcYAAaYBQ9oAAcEiAULaAYMBAAKYAwWM4AMAxgABkAGFWU0AA9MAAYG
bAADtAAaNNgAD0QBEA14AA8cAAAMEAAPgAz-Hg8YABUCHAAeOYAMD1QAHQ9ABgwPBAABKzEx1AEP
pIgJJWFhKAQBMHwjYWJEBgZIBA8cAmYvYWEEAC4-MWI4BAAqJzAxAAYEiAUOIAYPIAAUBWgBDhwO
DwQAOQ1wAAOYAAcgAARcDQYoAR80QAAGD0AGFgXwBRU0rAQ-MGI0RAUJBzwGJzQwRAYEGAAD_AQf
NAAFEg3ABQ-0BAQF0AsLjBECaAAfMtAAACIzMAwAAogFBTAADFgAC2AGD4gFAQ6gAA_QAAcBPAEj
YjWgDB82BAAKBmwMEzLIAAhABiQzMBgABHwADJQAAUQAA3AACQgALDlk5AAPQAYBDwQAZgUsBQcU
AA_MAG4P7AUlDRwABIAMHzhUACcPQAYICuwDA6wEL2FmBAAZAWCCBxAACkgAD0AGbAKAFweUFydi
OJgXDxgAEC9hYxAAHA4EAC8wMSAGGQ8gAA0GWAACpAcATGsSNlBrD5wMFhdhJJEPfAYECXAAEmFo
AAEEABpiIAAEtAwFMAASYSQABRAAA6wOHzMAAgoIbAUDcAUEBACSMjAwYmMwMGJkwAQCfAQVNAQA
AdQEFDMwBgM0ABc0TAAmMjTYfAQkAAVoagRQAA0EAA7ABQr0BAnQCys4ZnwFAVwAEzQEAANwAASc
ABoymAUPvAUED4AABQ6gAA_QAAoGPAEPABkQBiwGBDABHzIUAAAO-AYKQAYCcAAMCAABHAALOAAP
QAYBfzIzMTAyMzIIAFwCLAUPHAADHzKcAFwHuAUP7AUhBEBZBRAfFzlEBg6cHw9UABIPQAYVBAwE
L2FmRAYrCEgAD0AGbAgBAAGMACJhZpAADxgAFS9iNBAAHgUEAS9hMkAGAAKIBQSAAQ8EAB0BXAAI
BAABaAAfMLgBAg84AAYUYhxpEmY8AC5hZgQADmAMC2wMB_wADzAAEAUEAA9ABgUnNjLgBQUIAAEE
AATMCgIQACcyMDwGADQABDAAFzT4BBY0RAAEEAAIFAAFCAAEUAANVAsNoAUPwBINA6QADRgADggA
CTAABPgWDAQABiAAE2EUAAIIAA5wAASgAAocBgUgAAxIAAMoAAgYDANMAQYsACU2MyABBhQAEzQE
AAgoAAYQGQVQAC81OdQADgYIAQZABgDgBAAoAyAyM6gFH2IIAFwEQAYIFAAPCAAEDWgeCyAAD4wA
NA4BAAvUBQ8YAAx3MjM0MDIzNTwGFTgUAA88AA0FrAMEBAAPQAYVL2FmBAAAA1AKBQgAH2ZEBgoB
uIQJ6I4PQAavASz0LzkzEAAXC0QHCUAGKWIyOHcP3AwaBFwADAQAJmIyDAAPXAYUARwADhgAByAA
HzeQAA4JABsPMAAMD0AGDwDUBRg03AUHxAQDxAojNjQEAAUQBgfsBCczNBgACBwAAxAAGDIMAAMk
DCIzMCgAB2gLBBAFAxAADxgABwDEBRZmCAADpAANGAAPCAAFBNQAJzVhBAAVOQgACiAAFjkcACs3
ZHAABKAACmAMBSAABUgAA0AAAygABRgAAzwGB2gBBRAAACABBSgACCwBBSgAB4AHBCgALzVhBAAG
BSQAIjdkCAEPQAYCBOwEDwgAWQRABggUAA8IAAUXMHwFHjMgAA_MAEoEHAAEHAYEHAAPQAYBAmwM
BiQAD4AMCwxkBggYAACYAQEEAAtABgLkAwP8Ay9iNIQECwUEAA5EBg-ojhITM6yhDwEAaALkBA9A
Bk8B6AAPBAAMBSwAC2wADxAADQVgHyphZgQADxgAGhJh9BIvYTAYCAcPkAAMCAAbDzAAGg8BAAUi
YjaUCiNiNgwABKQKDggADwwADwQQAAcIAA9UAA4CzAQFEAAFLAsEIAAPGAAMK2FlDAAMCAAIDAAP
CAARBAwABBAABAgABAwAD5AAIQQMAAwQAAQIAAQMAB9mDAAABBAABAgABAwABBAADAgADwwABQcI
AAO8AApABgIMAA8IAAIN-AsLIAAPCAAmBCwFD4gZWw_MAAEPHAAJBqgAAwgGK2FhUAAMMAAPCAAP
BDwABkQABHgGBxQBD0AGASY4NzgEBJwEL2FmRAYPDrQKDzQyEgSgAA9ABsUF4AAPBAAUBTwABVgB
DxAAFQMgGSthZgQADxgAFRZhVAAPRAYJBXAACxAABAwCBiAAArwUCTAAGzIQAA8AAhAiYmZYBA8I
ABEPDAANBBAADAgACAwADQgAAkAGDOALBRAAKWFmGAAGOAAHCAAIDAAMCAAIDAAPCAARBAwABBAA
BAgABAwAL2FmqAALG2EMABdiDAAMEAAECAAEDAAfYgwAAAQQAAQIAAQMAAQQAAwIAA8MAAUJCAAC
vAAFzAQvMTD8C2QCLAUOpAIPAQBIBbAFD9AFAwgUAAyoAA8YAAwPCAAcBDwADxgABwE8BioxMAEA
CISCC_wDDwQAAgVEBh9mPAYYBpgED5wBAA_oAVoPBAApASwGD0AGOAHYEQV0ARIwBAAiYjfwEwcQ
AAwgAAIQAA8UsAMPGAAdDwQABQK4AQgUAgPEAQUQAAwgAAy8FB8xIAAAH2EAAg8vYWEEAP--dQ8B
AFkEVCIPBACND0AGARNhdAsODAQPBAAnCTwGAjgEBKQGD0AGZQFYJQ98KykiYWEsBg9ABjQiMWG8
WgwgBg3wEyNhYSAAGmYUAAMwAAJgAQ5wGA8QACsGBAAIdAAPBAARCbwUDwQACA8BAP---7kfYoAM
AQScBBZiSAolYTFIJA8QAAMMcDgWZggAB7QMD0AEZQGIAA8EACgFuAAPBAAwJjFh_GAJQAYuOWTQ
BQ8QABEtYjRQAA8QACoOcAAPEAA_DwEA----uS9hYQQAOg9wOBYPAQBcBEgMDwQAaQhQDAGUACdh
MLwMAGAFDtAFDxAAxQ8BAP----_hAvgKDwQAawhABgXkDSZiNzwGBBAAL2I0EAAEDpAFDxAApQ8B
AP-------wgO-HsPUAP---9WLzRkQAAjLzRjTAABD0gAAg8BAP97DvABDyQAAQ88ACcPOAA5DjyQ
D3gAHg8BAP--tC80ZGSFGw54BQ8YA8sOkJQPVAQYLzkwAQD-Py80Y5QCBg8BACgPVAAGDwEA----
-5IOcAcPAQD-Jg9ABv--2S81OBSQIy80Y1QAIw6wkw_IilYPAQD---_5DiQ1DwEA--------JQ9A
Bv----9pAKArD7wB-6gPQAb-----dx8xvAH-qAGkMwAgWh8x9AT---8fDNQ2KjlkEAAvYjcQABQD
LDcPEAA1BHRcDiAADxAAhi8wMRgCvRI44AAOhEQPEAArDlQ4DyCLcg-AAQFzMmZiMDJmYwwAjjgw
MmY5MDJmbA4PHAAJDzwAGQRwAASo5QEEAAQUAAfAzADYzAZs2RY2GAAfNzAAZBc3sAAQN4jmAZB4
DwQAFggBAAFAAAUw2gP07A8BAP_CADQDEjNABgXASg4gBg8QABQTZhwEDxAANQI0Vg4gAA9ABv9Z
LmFmkAUPEACZBdQCDyAABAMQAAUEVQ-4BQIIQAYVOQQADLQuDxwACQ88ABkFnAUmNmUEAAeEAAo4
AA8YAHwPQAYkDAEAAEAGBgwAD0AG-40PwEoADiAGDxAAEQ5gBQ8QAAkBLBAvM2JABv_XAWxYLzkz
EAAmDFwADwQAVQ_UTRYABAAPAQAACCwFBuQFHzkgBhoPPAAZD0AGDQ6sDA8YAHgPQAY4BAAND0AG
-5IOEAYPEAAhA5RXCSAAH2IQAAgMgAUeYTAAD0AACh8xQAAMDJAADBAADlAADyAAAA_gABgvZjAY
Ar4uYWYQBg9ABoQCbBMP4FIoD-wHBAosBR45BAYPIAYQDzwAGQ9ABg8XOQQADxgAfA9ABjoRM0QG
D4AM-5oPBABZAZwEJWFmEAAPBACyDwEAtQ9ABjQO-H4O6AUPCIsADxgAHy9hYxAAHA4EAA88DgUP
LAUEDyAGGg88ABkPQAayARTzFTMgBg9ABiIF_OwPQAb-iA5gAw8QAP8kD0AG-wIMDGsFIAwqYWYE
AAAsACswMIRkDxgAHC9iNBAAHgacZh8yQAb-OARg-wEU8wJUgw9EBiEBQAYASAAPQB--jQJEAw5g
Aw8QAP8eD0AG-gG0Hho4BAAMOAYFEBQGTAEPQAYpCYAADxAAEQRABi9iM0AG-zYyNDI4nXwEWPkE
VPkPQAYiHzWADP_SHmYwKw8QAP8hD0AG9QXwJC5hZgQACQx-E2FAGh8wKAYbDxgABQ6QAA8QAA4E
5AAJBAAPwAEAD0QFBA8gBhoPPAAZD4AMqQQBAA74GA9ABiABfAwfMUAG-5gN8CQPEAD-GA6ABA9A
Bt8I8CQObAwDBAAjYjMwEhMxPAYSMzwADBAGL2FmGAAbD6AAEC4xOVx_D0AGiQ_EABEPGAB9AQEA
FmEUBg9ABikBCAAARB8PQAb---_rDwQAmQEsBg9ABkwPAQAV-wMxMjMwMTI0MDEyNTAxMjYwMTMd
EwIPcAAWCBQACLAFDxgAOi82ZQQANjUwYTAYBg8EABUQMnyQAwEAcjI2ZjAyODEMAA9ABv---6MF
tBgPBACUAQQ7D0AGeYAzMjAxMzMwMeA0SzNjMDHwnw4BAA9wAAsIFAAG9AUfORgAOyI3ZQQAJjg1
CB8qN2UMAC83ZRwACyU1OLgYNTBiMxwGD0QGFi04OEQGD8AS-5gTMFQQBBAAGmYgAARsHA8gAAsP
UAAnDUAACzAAK2EwEAAPUAACDyAAJw8wAA4P0AACD0AGwy9hZgQAmgVAPg8EAC0PAQAABFQLDwQA
zl84NWMyOKgFKhFjsDEHVAYORAYPiAwcLzg0QAb-mA9gBQMPEAD3DyABAw_ADP9zDwQANQ8BAHkF
iAUHkAUJBAAvODUUABMMHAAuODUYAA88Bh_CODI2ZDAyNmIIACo3ZEQGBFgAD0QGJhI3OAYPQAb-
mi9hZhAA-xIPgAz-gw8EADUPAQD-FRA0MAYI8AULOAwPRAYBD0AGLg8BAP----------Ki81OOx3
BQ-QhB8PCHkdDxx5ES80ZSAADC9kMCAACg5YeQ8BAP------AA4wBQ4gAA9whf--Wy82ODAABg8B
AP---------------_IOBA0PsA8zDjwADywACQ8YADMPAA4dLzRjBJoGDwEA----------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
---------6XxFSIpLGhpZGRlbj1mYWxzZSxwYW5feD0xMDMxLjUwNDc2MTkwNRUAYHk9NTc4Ls-e
8gEyMzgwOTU3LHRpbGVfaD04CQD-G3c9OCx6b29tPTF9LHtibXA9dXNlcmRhdGEoImkxNiIsNDAw
LDI1OCwiMAEA----------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
-----------------------------------------77xFSIpLGhpZGRlbj1mYWxzZSxwYW5feD0x
MDMxLjUwNDc2MTkwNRUA8gt5PTU3OC4wMDk1MjM4MDk1Nyx0aWxlX2g9OAkAwHc9OCx6b29tPTN9
fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIyIDE0OjI4OjE1Iixtb2RpZmllZD0iMjAyNS0w
Ny0wMSAyMzoyMjo0NiJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIyIDE0OjEwOjE2Iixtb2RpZmllZD0iMjAyNS0w
Ni0yNiAwNToxMTo0NiIscmV2aXNpb249NDgyOTFdXWx6NABLRwAAgooAAPAjcHh1AAMoAAAEAAQP
QBACDgABoAEgAqAOAA8QAA3wygMGD5AwBA8PkA8nDykPKg8rMAENABEoDQDBLDACDw_QCgsPDA9C
JQByCQ8NDxwPQTEAcQ4PFQ8bDyIxABIMDACpQAyQDQ8WDx0PIwoAgA8RDxcPHg8kCwBwEg8YDx8P
JQsAcBMPGQ8gDyYLAPAMFA8aDyEPJjACDJAPCA4EQAQHkA9ND04PQw9FHwDwBE8PVQ9ED0YwAQyQ
D1APVg9DD0cXAHBRD1cPTA9ICwBwUg9YD1sPSQsAcFMPWQ9cD0oLAHFUD1oPXQ9LVwBwZg9oD2oP
XhcAcGcPaQ9rD2ILAHBsD3kPhQ9fCwBwbQ96D4YPYAsAcG4Pew_OD2QLAHFvD3wPhw9jewBwcA99
D4gPYxcAe3EPfg_JD2ULAHBzD4APiw_RCwB2dA_BD4wPkhYAEJMLAFJ2D4MPjwsAcXcPhA_VD5Sc
AHCbD6APlg_mFwCWnA_hD5cPpzABDAAAFwB7nQ_iD5gPqAsAe54Pow_ZD6kLAPEOnw_lD5oPqjAC
DKAPug_rD7NADw6QD8QPuw_rD7RZAIrFD7wPrA_1QAsAXcYPvQ_tFgAPIQADUscPvg_uCwBwyA_-
D68PtgsAf8kPwA_wD7cWAAdwyg-BD7EPuAsAcMsPwg_yD7kLADDMD8OnAAELAXHND9EP2Q-VpwBw
zg-SD9oP1iMAe88P0w-bD9cLAHfQD9QP2w-YCwABRABw3A-dD98P3hcAcegP4g-gD_VPAHDpD_MP
4A-mFwBx6g-kD_EP5y4A8QTrD_wP7g-tMAUMkA-vD-AP_w-3LwCK8Q-yD-wP_EALAHDzD-QP-Q-5
CwBx9Q-2D-4P_kUAYC4PLQEPOxYAYDAPNgUPPQoAYDIPOAcPPwoA-wYvDzoPMQIwBAyQDzMPNQ_N
QAMH8P8BAOXzObQBEAYPGRABIAEgAfAAAhACDxwQASAPISABIAQP-AAOAA-98L8PKA--8MYP_AoP
-w_AD-cPDQFwD3MPUQ9VD0EPUg9FoAEQAkQAoQUPgOAPEhAGDxhGAJAP1BABMA9-8MNCAFoADynw
xEUAoG4PTw9JD1MPRbBDABAaQwAAOgAAiQAzBg8giQD8FDAPmSAP--C4DzsPDA0wDQ94AA-UD88P
xA_5D7QPr9AP--CwmwDTYQ93D3Qfbw90D2iAAUsABeEAFR1YAD__IAPdAA7wBA8gDzUPMA8lDyAP
ZA91D3QPeRCsAAFSADsP_BDxAABWAHSCAAIAAvC-8wCvEwIACgkwj--wkPwABwqiABMISwAgD-iA
AT-E8MOjAAwSCKIA6AgPYg9lD24PZBABEAYI8gAVFJwAfuHwww8eD7hNAOBxD3UPYQ9yD2UIDzIP
NU0ABu4AIAYNTQAoEA6eAOADAA4BMA_BEAQPfwABQGUAECElAOIGAA4BEA4AD4EgDzzwmLIBWA9L
D-8JswH-BlACYA-ZD7QPmg_ED3QPWg9FHzXwqMMBDAXQAEIPEhAEgwBiD9IQATAOHgFKDwvwxUIA
hGIPdQ9yD27APAAEWAI1Ag8oDgF83PDDDx0PiA4BAXUAUg9lD3IIiAA0cA8RRQC0_gAOBRABwA8S
EAKSABHJ5wF-oAHwBwLwoOMBBPkBCA9XD0EPVA9FD1JQARAGDFABJgARUAFPIA94YE0BAerB8JcN
AQAPDjAPDA8lAE0BPwHwtz0BCBIIFAIfQKQDDhi7YQAPqgMHA1AAGHCUAQUWAhUgkQEKrwIv8Akv
AP---z0f-wEArPEAyA4ADxgIMA8mDycPKw8qBADwEikPKi89Lzo-Nw--DzcPOg89Dg9DLk8---8Q
8wILw-sQDmwM-0IOD1QOBw9VD08POQ8kD1YPTw82D0MPOg8lDxEPXQ9HD0gvNg9FD0kPTw9YD0gP
Mg8RDw77EH8_EAlAH3YAGRAJDzwfdgA08FAOAA8cQPsQBwsCAApP_xEBCwIACk-7EQgLAgALT-AQ
CQACAAph8BwP0PAEkABJDxUNDAIA-wt8G0z7Ef8HCBtF_xH4CBtI_xH5AJAZEAnwUUABA-UBDxMP
Fg8ZDxoPHw8iDyUPJggA8TsrDy4PMQ8yLyI-IfsR8w-7ES4PMA4GDg9gbgJuAi42_xH5AQApABkP
PEAJ8BMNEA0ADfAoDgANDxggC48L_yePCfsnj1D7J4nwZ6kA8wAHCxcfJCcLFxobBwsXGicEAAAz
AQAGAPEA1xoBCx8MQQsUERsBCxRBAwAwIQsBBQDzAvQADgseH1AmCx4cGwYLHhwmBAAxBgsGBgCA
3hwJIEkgGRAGAPIVSSApAAkgKfBBDgAEDy8wD0sLDz8LDzMLBQsPSw8-BQsACwALFQABCAASCAoA
AXYBMQ8nAAsAwQ8-BQALAPsBDwQLAwIAPyMLAwIAAhQjBgDxA-sBD2ELAgsPbwsPYAsND2sPZAwA
cWYLD20LD2MMADFrCwcIANBuCw9iCw9nCw9jD28CDABgAgsPaA9tGAAzbPsB3gFPACkACQIAAhQp
BgAj8EGMAkkPVAsKAgCK2h8k_xAPAQsCAGrxAPsQBgsCAC7WHGcCQPkA8DBXEPEpDw0wDg8-DzsJ
Dz0POQ88Tzv7JL8D_yQPUg9HBg9cD0QPPQ9cD0EPPQ87DzoPOPskaTAJ8CR98Cg8AMAgMBsPOwsE
CwkfQisGAJBDCwgPQg9BD0JmAfIXHzobFPsSDwYLBQslKwULJQs1CwULBR8DGxP7Eg81CwcLHzQP
OisHAPQDCx80HzMLDzILHzEEGwIPPfsQsQASIAgAFDkOAAGcA-AREA8cMB8-CwoLD0ELChkLCQsK
CwkPPAkKCQoPQVj7FBVpACELJQYAQcX7FBYFAREmBgA5xvsUYgH0A2lACfAXDAAMABwPIAAMAAzw
Il8A-wg8CwELCQsBHzoLDQsBCw0PNw0BDQEJWl4AFAQCAAJgAFPwKA8DIFkASQ8MDxgEADgWDyIE
APkGHxQLHyILXwz7FP8HAgsTC1P7FAYHAgD1BxcGCwcGC1b7FPkCABlQCfAU-yAA8CCRAfEXNgsE
Cw87CTsECwIJGwoJDz0JCwkLCQQrBPsTDwMLCAsYOwgLGBuNAfEVCCsI_xMPOQsPOgsPNw84Ow85
CwIBGw84BA0ECw83Cx0rDfsRiQFgGTAJABkQhQEiGSBfBPANDg8gMBkLAQtCCx8yDzQHDzcvOS8y
HzkPN1H7ESIB8xpFC-gE_xEfIAsMCzwPEAsMA0wDHAMMA1wD_xEZAAlACRA5EAkQCQAZQE8AHwxO
AANSbzD7EBBPAEAF_xAcTgAVA00ASWwD_xBNABJQHwLxDA4MMBsJGw9FGw9ED0UPRA9BWwYJGwcP
MgsGCQIA8Av7EggbCBs4WxgbGAto_xIMGwwbPFscGxwLbHgCpBAJEDlQGRAZAGlNAJMvPS4fRi9F
JhkJAPECGfsT9Q37Ew8kDxsDDBMcDyUIAGIMAw8jDxoJAJEiDxkPHQwD_xOYABoJBgBLAAnwU1kA
MC4vQwkAry9HH0n7EPUQ_xBcAANgDyUPFQMMBwAxGQ8dDQA0HPsQVwAKBgAi8FJjAGAfSrkbDy4r
A0AyJw8wGwKhNC83_xAVCKUbBVgB4gULNfsQPJMbDAsMCywDBgBB_xApkEoAQQAJEBkGAAVZAQBQ
ABEKTwCzFwsEKw8tFPsR1RsRA0QrJfsRSgBlCwwrLPsRRwAEywME7QEgHzlhAhBN8wOiARQhGgsR
BD37EzgCcAgLeAto_xPsASAMM-EBIBMM8wFBHCP7E_0BALwDERCaABUgSQEwGw858gHwAT0JAg88
Ow9FCwYPRAsHD0OVA2EHCwcK_xPxAQD5AjELGAsGACH7E-cBcTsMCxwLHAsGAADsAgD9AQDsAjEA
GQAGAASwAJEvOiIeKS85HzUJAPIFDzn7FPUM_xQPFQMRAwEDEQMRAzEEAET7FBAJgwEFBgA-GfBU
RgAAMiIuGuwBL-EQxQEFFQB3AWAWvzkbDym-Af8BLi8yDysLDQsPMC80_xAVuMcBIwBQABEETwCE
HzILDfsXFbjFASP7F0YAaRwDCwz7F8IBIvBXPgDwLgcLJysHC1cPCgsSDxYrHwwPGE8M_xAPBwsq
KwoLagsqK3r7EA9QCyErAQthCyErcfsQCQApIAkAaQApIHmDABADswEhFxs8BQEGAPACDxILBAsU
Gx8JGx8L_xIKGxrjBgIGAPEMCwoLGhsaGxr7EgkbDzAPLwsPMAsPMRsfMgsPMwahDzALHz8bHRsf
LUcBFhnvAADDAUAQGRAZcgAVB7YAEAK1AFECCwILAg0IM-sRCrcAEDpqAABwAADYCQK8AFIxCwEL
EcoJBMIAAQUFEwDLAvEABwwwXwwbVxtTG1f7ElobAgCG_xI-MAwDGzUEAFH7EkAJYAIAKPBSNAAn
XxU1AAcwAC0bVTIA8wQHCwcbBw8MCwdrAgsCSwYLBvsVIQFQawoLCku1ANAVAQsBGxELAWsBCwFL
swATFQkBImAJNwMm8FVLABYGSgBrCw8JFvsRTgBbCwoU_xFRAFsLARz7EVQABwkB0A9LCx0PJCsN
Cx0IHQsGAPAAKx0ICyj7EQ8BCyMrAwtDQgmwKyMLI-sRDAscASsFAAF5A2QBKxwBCyFhARBJ3wPx
AiApACnwFQ5gDmAOQA4ALvARYQABVAAKXwABwAEZA2AAPwMLA2IAAgfFAQRkAAC8AAVmADUOAA5o
ADk9CAsFADIY_xBhAAQEAIlT_xAFCzUBCwUAMhH7EFwABAQAMVnwFl4AT2Ae8BBaAAMQCAMAJvsR
WQAABABZEwsT_xFaABABbwp2AQILAQL7EV8AE0mjBBEXZQBhIA4QDvASZwAAGAFhDQgbCAtdCgAQ
OAUAECjDAHMDCxMbAwtjaAAwM-sQFwFgBQEbAQtSCgAQAu8CIAIhxwAAOgMA7gICZgAQOcAAYA4Q
DhAOYAgAUz4ADhAu0wCEDzwPQw8-D0MIAO8JBg9BBgkGCgYPPAYPPwYAAP8B_xDwEPsQ-hD7EPkQ
8BACBQIACwZmAJBECgQPPAQKBA1FADENBghlAAAEABMNBAAPWQAg8QQADwQgNvssPwP7LD8V_ywg
CfBsFgDwBhAgD1RrDyT7Jw8BawP7Jw5rD3D7J40DYScFYAzwJ5MA8AJ-DH8Lfwx-D-sQ-wcQ_xD-
JQUAwnYQ8BgPUPAHHwbwDiYAMBF-EygADCYAEVDWC34fLQ80HzkrBwA3Dzk7DgAMHADxAw8vDzQP
OA87TwUrQStBKzE7QQgAaHEfFS8QKwUAOB8QOw8AuA8QDxUPECt-FSlAAgB_GVAfUBIwFAMAAqUA
8ApfOQ87DVgPOQ83vzk-OF85CA1YCg83Cq8yhQChCAn-AzAPFU8QLwQAU28QDxUvBAACFABQ-xUC
8Ae4CxELBQCQD3AgBvALBiAGfQybHA8oMB9FD0QLBQCAf0UbTyH7ES9zDQACAGFzG0P7EQ_-AIML
BQ8QBQsFBwQAhGcbJRf7EfAK9Q7xAxxAPgkNCAo_eQ0POgovNz82GhAAgj9BDgkdCgkOAwDxFA84
CA4MCA4M8zAFJ0UnBScFJyUHBQcFJwUHBTc1JyUH9QDg7AFRAmAC8BhVAEoPJAsBAgAgb1S0BFkT
DwELBAIAmoQLJPsTD1ALBgIAmm8wBgsm_xMJAAIAMYkAKcII9jAcQM88CQ0JzQkNCc4PQQ4KzgoO
D0PzMAW3NbdFpzW3JQ2wPbA98E8OAAEADyBADxgfGy8dHx4PHS8eDx0PGxARAAAEAADWD-QH_xDP
ByPII-sQHh8wBwwHHAccByweHAoAASIDQBLcENwFA3gPDkA-RT9EBADyAv9FARt-IUvzIRtzS-ch
G3dLiwYyYAnwxQnAIAnwNQ4ADxIADyAgDgFJD1YLAgIAMkILAnAFLgQLAgASRAgAIPsRGgFJDyAL
CgIAMEoLCjEBAOgEDgIAFklxBvABDxxAPzkPNw81DzQPMn81PwoAcjMPMixVPzUWAIEFfzUPOQkO
DQMAAC4DAgUA8gsN8yD-BQD3IP8IAPAJCSAJwAkw-2QA8CDzAFQABj4ALgsNPgDxBQ84_w-zAAvz
APsP9wAL9wD7D-BwOADwAM0POw0IzQgNCD88OD0POI4OETIJALECDvMw9zDwMArwLykAAxYAAB4A
4gEJAgn7EPMQ_xD3EPsQSQBgMAseGRIYBACAchtPKPsR8wj8Aqr3CBtH_xEPZAAEAgAQgPgCWBEv
BQAGAgBBgBbwFGwA0X8VfxN-Ej8RNw8VCwwCACEPE7cOQwULDxFwAQCWEQARAF--BxELDQIACm-8
EA8lCwECAAoBxABCDkAsCwIAEyUCAEEvEgsoAgCfKgsqCycLJQstAgAMTy8gCyICAAoCLQHxBUAK
CzobDxYLMxsPDws0Gw8OC0kLEwD2AAwLRgv3AA0LHwsdGw0LEQUAJi0LCgAg8QBJCmBQDh8wGwwI
AFMcGwwLCAYAcywLAgsIDhIMAHH_ADAfPlAVAgAzBWAlkxFhCgsqCwor_w_yK-cE_wgNCy0LDSsG
AKL9BPsIAgsiCwIrBgD-DfIE_wgQFXAVUPUE8EgOAANAPxU-EzoHDxQPFwkLAAjxAzf9MP8VEM8l
LxX-JQDwEMUg9bYRFAe1ERcFtRHyFwX7JA82Dy0PEg81DywPEw82TPskZTAF8CSOCB4I8CMOAA8I
D0FwBwIQDGMDAwoAChAAIQ9UCQACBAARBBcAIQY8BwAlPwlsEiIPBOADBQIAAPQDBggAAgQAAwIA
ETEHABJMXQDDIAsPcAsDCwwLCAsMAgA1CAsDCAAVCAgAAKsIvwM8Cw_QCwkLRQAFAgAcATIAIfAx
8wC0NzAMCwwrBisGKwzYAEMPGA8k4gARBggAdQwPPA9ICwwCAAEiAKOLAQsBKwIrAisB0wAXItkA
IAELshQEAgDwBiKLDgsOKwgrD1krCAsPSAsICw4LKJwKMQsPWAcAVQ4LLgsOAgBhKIsFAAUgAgAS
AAIAEyUIAA4OADAl8DnMFTBABg-jCA8CACig-TD_MPUw-yAQ-PQFahgPIDAWGgIAv-sQ-RD7EAwP
FQwHAgAJT-sQAAUCAAtP8BEMAAIACgB3Bm8GQA9LCwQCABgTJAgAQQQLDw8gAk8PCgsJAgAYOSkL
CQIAEAePAj8HCwEEABQWEQsAIQ81BAIvBQACABkbJSQBEisMAQAJAS8ECwIACT8TBAsCAAdfAwsT
CQv2ABkKAgCfGQELDxALAQsIBAACRA8YCxIMAA8EAAFfAgsSBQD0ABgLAgCUFfAOHPAMDAAcBAEV
A9UABggAFQMOAAIQAAwIAAQgAB8JAgAsANoBEwzgAQgIABUMDgAMIAApDxIhAC8FAAIAKrVADGAM
YAwgDAAMgAoAZEAOAAYBMOoADwgAA18T_xAJCwIACZMZ_xAPGAsKCwzwBw4IAG8MAvsQBQCqAQsR
FJUAZ2AMABzwEK8BEQOWAx8UDQASA6kCERmTAh8ZDAAOECmdAGMBCwoMCyqXEQ8NAA8DjwIRFXkC
HxUMAA5nJTAMEAywBAATUIsCEBSxAAkFABsTFQBgAxQLAwQzXwMPAgAHQFkKCxqXAAkFACsBDBYA
YAwaCwwKPCwDDwIAByVVMH8BAgoAEAAgAh88rQAFBgUAERPkExEEhgEPrgAGRBkbCQsCAB45tAAJ
rQARAfwVAjgCD7UABhcVTwISNbEABL8AEZC3ADAKCDDQBgkCAKD7IP8HAPsg-gD75QghIPHSGI8K
ATB7DyQPJQQAGfEB_xj-Awj7GPwI_xBw9QjwUEYAJPsAHwAPNwAG8Qgg-wYA_yB-UH9w_xDwAPUA
8Cg_P2DwED8A8QkfNAuPMTssJy80Jx83Hzb7EB8DC4I78gAvB8QLDARoOwwEDxIMBAMDAKAMBPsQ
BRAFYAUwawICAgCjBfARH1AACbAJEAIAQQAJ8BFfAAFZAPABHBcmLzYvNy82HzcfO-sQ8owHKQQD
VAAECgAHZAADXAAE1QIFagADYwAByhEDCgAFcQD0AQgwLzovOS88bz37IPIA_yBRAGMDDARI_yBH
AENABfAgNwBBMAnwIagA9xQnGwcLBy82Gw0LDS89GwYLBi4bDgsubzwOCx77Ay8DGwILMgQA9gCi
CxL7AwwEDwgbDAscBAMGABAUXxbhBAwESAwECwwE_wMFAAXJAAwGAIAFAAVQBfAHCZAXBwQAAT8I
8BAKATAOC2Y7Bh8-DgvW_xACC2I7MgvS_xAMCwxYOxwEYQCBOBMYDxIECgHeBDFABTAkAdHwHQkA
CZAZAAwACfAdRwCACwYeCyYLD0IsGtALL0JvRBsPOQ84DzcNBw5CDzP7EXIMoJIbYPsRLAsMBAPc
GAEsAUEbbPsQUwQSBVkEQXBl8BGUHgByASRwaTwC8A0xC48rOy8qLysvMR8rCx8xHy-7EB8GC4c7
pws35AECQAIRFAIALwQLPAIAAMAAP-ARGTsCABJAVwBQLysfKh8IAPcIMy80LzMfNE83LS85bzj7
APcg_wAMBAcDAAACAB8HEAAFKEP7RQIPDAABT0AF8ABbAgQWAC4CEAGbAOAfNwsdCx85C284_yAX
CwIAEGdrAhQLAwAAawIREAIAD2sCASAvLWAC4C8xGwILAi83GwMLAy89eAIg_xCFAhc3BAChDwP7
EA8wFBsMBFkCBgUAEQz5AQVOAggGAEcF8BAJUgIGVgLxFEANCz84DzYPNAsvOAsYCw0LMw82Cw80
AgtD_xAPAwshIAsgEBhhIRALEAtAbwKBBA8QLgsPNR5GGgAOAPEAHgsPNQwLDg8yDzMPNA81hgAy
ADVARgFRJRAF8BYuARZwhQLwAEALHzYNCyYLHAYLLF8vK3cCwA8yAgwPLw8u_xEhCwIAMYErYX8C
ERR_AnoPCAwENytsfwI4MAUggQIyMAkggwJgDyAwHw0rkR9gEysDCwMYCwABCgBA_xAfB7AOBwQA
UA37EB8l1A5UKwYLFgQFABAG9AsCrQwMBgAh8BGrCB0ABgAAewCuDwxACAsfGQgLEgMAXw8KCx8W
BQAQAFAPDwIACU8dDAseAwAaLxAVAgALARchfwxADwYLHxIFABBBBwsfFB4MAQMAH_uvAAYQ6wQO
DwIAAj-rEBUCAAPF8EAOAA8KQI8kGwkL-iEfCQgAFyCPATgDDwIAH0OPcBsEqw4-DgsECAAXEYXq
Ag8CAB5jjyAQBgAMAgAfBggAFwEdAQHqACUJGvkABAYAAggACBAABAIABBAAEQoCAAPYIw8CACQA
9wAlBB4GAQQGAAIIAAgQAAQCAAQQAAAIABUOuwMPAgAjAAUBJQYcFAEEBgACCAAIEAAEAgAEEAAA
CABbDA4ACEAOATEJCyoKAA8GAAsbAwIAHyMGABAK_QAxBAsuCgAPBgAKKwAFAgAfJQYAEArkADEG
ACwKAA8GAAoBCAFxDxsLAgsvS98REwEGAALnEQoIAAQCAAwYAADkEQLxEQ8CACEAhRJgLyULBwsG
XRARIgcAEQYGAAoIAAQCAAYYABANCAAHAAEPAgAhAC4BAPAEIRBA3BcXQNkdFwAQAAEoAWAKCw8k
CwNuAwYCAB8DCAAYKQ8ByREPAgAdEA4-FBAMcAMGAgAfDAgAFQ9wAy4gDzAsATcRAAECAB8GCAAX
AEEBBAgBDwgAHQIEAA4KEg8CABobFA8BDwgAFgIEAD8cBQACACkbFQ8BDwgAFgIEABEWgAIRKgoB
IRoD5R8mISQYFDH7IS6nABAejxFWDPsgACXtATHwISFNAAEGAABWDmEIQC9LCwO5AwAPHx8iDAAQ
MSgLBKsDPxQbBAwAEhEnFhIgBwtOGA8MABECrwARBewLDwwAEREhFwFfAQAWEAYMABIA9QD0GKsf
LRE-Mp8tGx0bfR8yEd8uGwmr-wMCGxob_gobCqsBBgEGASYBBgIAERsDAAcCAFYWDxUBBh4AFbAI
CgICAAfPFgsaAFDgDxAAAtgLoAhACRt5HRE-Mp2EAGATEdkbCQp9AAKCAA9vAAsLHgAJAgAvGwF8
AAYPlgAIFAKVAKD7A181HzQ-NT83CADzBE81K1QfNDQPN-sD_g0ryvsDAQYCAEMvFQEnCwBjBgc2
KwEGAgBPJwHwBG8AADUwBTAWAACNGPEBCEAvN1QfNEQrVBw0PzdUHAkAQA36ACtnAA9ZAAQPFwAE
HhBlAA97AAzAqw8JCw8MC-8OBHsDCQCw_AGrDwcLCQv5BHv-B1D5AasPYO4CQf4DewIIABAAYxuQ
CEAoex8JHwzzNgAANQBDKXv5CDEAbS57Ag4CDjEA8AcPLhuUGxQ7PzwbXzs-Ohs-OR8tER8yEAD4
Ak87ChuaGxo7MBuQG5A7MBtA0wGyGwEGOxEGBxsRBicHAIMHDg8lDg0ODRYAFxfeAFMgBeAFgAwA
IPA-dQAVC2oAECtqADo-Oxt7AEE-OxswdAAVMAgAMAEGFwQAcw4GDgEOATsOAAMEAFgHDxAOARgA
QwswBUBxADdgBaAMABJAXwFzDxEwC086C4MAsPsgQAuQ_yABBicLyAABSgA1_x9AlAEg8F_0APod
nzIfLREvNQtfMh8tLzILHzUfLRFPNQsfLRFfNTQ-MT8y_gELqguqC5qwAQYCAE4HCwEGDAATJwoA
yDcPVS0DLQMPNR0ABQIAAGoPCgoAIjAFGhERIAIAv-AkAhAPUAIQDAIgnwALU581NT88nQA-_gYB
nQAGLREGnACfdwEGFwEGFwAFmQAREoCXABAwjgDwBR4ZHzcZFD80PhkUGRRTHzIfNR85BAAlNT8L
AFVV_jABBgIAhBYHARYPEQEGAgA5NwEGHAA0BwEGAgA2NwAFWgIGZgIE5QEPGAAAFAwCABAgRQoD
DAA3QAwAGAACCQ8CGADgDgAIUB4ZBB87FCMLLgvCACZDC8MAIiULXwEBDQCQRRu6CyoLygvKBgCA
G7cLJwvHC8cGACEbALwQACQBEyAmAQQoAS4ABRgAAvUD8AFfMlN-NT9BP0M-RVFfMnM_CwCQ_gS-
BvoEvQFGAgBQFxEWAQYFAHBGAQYHJgFmDQChFw81BhdABUAFYPcAKCAFDAACjgH1B18uUX8yNT4-
QV8tXy--MQIb_gT9GhtTACERFlIAd0YBZlE-NRs-APsJFTAVMBXwAAXwEgFAAUAB8AMOAAgFMINy
owDPLy76Ab36BL0q9zBwhgADEDOGABlchQBzAwv6BP0bC4UAIQEmAgARRtMGTWZRQguGABIBJAHT
BjBZXzLzA-sR-Q-7EbUAREL7EQUkABBR3gNjLzAPMgsEAgAgDy31CxIrDQBwDAsEKwILDAQeECsG
AFkC_wEKCwIAEysIAAUKABIqCABJ_wEGCwIAEysIAAUKABImCAAi_wFZBfABLzdSE1I7TgtPPwtF
C389WwoAUPoBO0oLAgB3eltKC0ovFSMGIgY7dwMEBAAjV1sMABcQ1gLwAAAFcAWgBXAFkAXwBg7w
H2cApA8-RQtvPWtOC18JAJFPP1oLamtKC6oGACJKB0gAIkdrCAAaNw8AMScFMCMFE1AIACDwNlUA
AbIAcvsiSgt6_yIoAJBX_yFABXAF8GEfAEIfOR84BAAwFBJZ6QOpMhkUHV88FB38AtUDA70DDQsA
MjYPJQoAYj8QNzY-It4ACOYACgoAAtoDI-ABzgKiGR84GRMZFBJZHXkAflwUHZw-QT56ACMPEAoA
NQYBFtsEIAcWfQBxBy8JCyY-JcgGbxcADz4ABYEAD0CABfA4gACAHhwdHB0-ND4HAIBTFBIZEhk1
NAYAiFX-BTD3MAAFSgAGTAACRAAOGABC8AQPUMoBfT--HR87HTNYAM9FT---BStP--srCkBXABYE
UwQyUl15rgMxU1J9rQNR-wMEvwUFACEPMHwDQAcLFhsCAAFNAxGGCwABTgMQUNQSNSUAFQwAIxUQ
gQExVFNyyANSPVX_AhpQADEGDhpbAoY3AQZXAQYLBwQAAxUAV18lMhoFSwAyFUAFWwQQMlIAG42l
AEMk-wMBpgCfLwP3Abv3BKs3WwQJD5IABGFGATYRRhflAQEDAAIvBASJAAJCAAmJAPQABjBeX0H-
QwL6Ev8GDvoSMQAg_hJzAACBAhBSbgDgyBoYHwk6DAocWhw6DAoCAGAPCwoPDQoOAPQAHErPBxo5
OgkKGVoZOgkKAgAADADyABlKzhoPYA4NDjoNCg0OWggAgQoNCg4KDQoeFAASSjoEFApXAFEICgkK
LAoADAYAGg8TAAhrAB8pBgAQcw0OOg9QCgQCAF0kCgQKAQYACRgARfABJUACAJHwBREGAAQABgAH
ABYEBwAqIAQTAADNAG8PDgoPGgoGABePDAoPGAoMCgMEAARPDw0KCQIALD8NCgQEAChPDQrwcNgA
IxoDBAASKgIALwkKAgAcEioCAAaSAA8EABMiBCoCAAK_AAG3KQECADYPEwoNAHIHCg8OSgIKAgBF
DxEKAg0AZQcKCUoJCgIADwwAEEUESgQKAgAPDAAQApkAIgIqcAAQApsAKBIKDwByBQoPDCoBCgIA
AZ8AFwEPADoGCglMAQ8OABZHDioOCgIADw4AFgOxAB8KAgALHwECAAwfCQIALBEOQAQfDggAJgLG
AC8ICgIACx8MAgAIHgGVAw-HAF0ClQPxCQUOMF8YHxsaHx0aEx8eGhMXGh8qHykfJxUAEBMQAAAT
APMEKR8rHy4-Az8GGhQaNBo0Gp8DNAoAUFsPUA8QBABRDgYOBhoDAAQFAMMPMAYCBgIGD1AGCAYW
AEMaDgYCHgARAh0Ao38_EBwQPBA8ENwIAKNcchASEDIQMhDSCAAA4zdxCg9HMAovCfwBECE8AVYM
_iEvB5wFgPohKAoICgIKBgDxBgj6IAAsQCzwJRIPIAAIIBINUAjwHUcZLwUKAgALHwF2AlAhD2AH
AD8OCgMIACAAsAGxDxhADxoPGw8fDx4EAPAHHQ8eXzc-MQoHPzd-K-oQcJsKy-oQLrYQ8AgInQpd
HxUNJAb6EHwQDBAMAB92DBAcAAgqMXYMRZ0xQApAD1RPARUk4gAPCAAfTw8BCgMCACoA3gAhD3AH
AD8OCgcIACAvDAACACt-AgACAA0AAggAJgFJAQQPAQ8IACM-GQMKAgApFBMLAQ8IACM-FwwAAgAp
FBwJAQ8IACNPHQ4ACz8BLD8JCgOFAjAOGQEPCAAVHweEAmwvDQBEAQsAIgEQGTlAEUuZBjwJCggI
AD86AwoCAAkzEwoD7ggPCAAAHzoVAQMEGwEQFyIJESWvCDwHCgQIAD86DAACAAkA_x0PAgAGHzAO
AQMEFAFBHQANYAIAEFAeAU8PCQoGAgAGvw8MCg8O_hEPBwoFAgAJKfoRxAUeAQQAIfoRpQW0EA0w
zw4PIQ8kDyYIAPIH_hDFIMUg_hDOIs4i_hD8EPAQ8hDwECwAIA8OnQFAHQ8hOvsKUx8fFwoJEQDx
A0oPFS8Y_hEACgAKEDoACgAVCgsAIkowiwAQHnwBERKNAEEeSj76lC5EHDAMAAIAtBxQLPARAgAC
YAIAAgBTElAi8BF3ADAaCghmACIVOgcA8AAaDxYKAwoIDxE6AwoI_hNqACAABXYAJgUaDAAk_hN5
ACQeGgoANA76E3oAJBwQCgAxDPATcABUMAIAEhAKAEIPUPATfQCx-xUAIycfFCMnFPqLKHH6EP4A
-1AAGwFiI0IgUvAPKACwFA0PCAoLGgZqJAsHAJL6FxAVCgUaBWoHAIH6Fz4KDhoOagYA8gH6FxzQ
HPAeElACYBJQAvAXQQAQzD4yENwFAPEKDPoQ-wMQ_hAPJbchxyH6ELA8sDzwHD_gsPs58gMPEA8f
MD8yDzUvORofMg83LzsNAPAHKg8tIvoRfwYa2Co4_hECDxACAx4TGgUAIAIDBgAzKi4DeQEQAGYH
MhwAHAwA8gcgDBAM8BECD1ACBAACBAIQAgQSBAIUDQAgUASEAfMCAw0wLzlsHz0fPB87DA4Mzzqg
APIHl18X9wD6EJ92gMvwEPMQDQ8jHwPwDDAAQDwvOx-ZKPEBOB83LzXPMvoQ_BD6EA4NAgMABQgA
8AIdDr36EPwBABygDPAQAgAEDQMAwQ0ABAANFAANEA3wHE0A8xAaHy8KJj8tWhYKJjX6FhgKaFoY
Cmj6Fg4CCg4TDiNaCAAx_hQQ2gAAOywCCACB8BYNEAIQAoAGACHwF0wAoB8mFR8yBRIPKybvAhsv
DgDyDfoO_BL6DgQeAj4CHhI0Dg9EAg4CHgIeEiQe_g6pAkgAHBA8CgAx8A8EIVaBcAAEARAEIQAO
ABIBDQAh8BBeNLEmDykVKh8mDysWCgwA8Qo6DyEvJPoRbwMqSQppOjn6EQ4DDgMOBAMqBgATCg4A
MjoUHa8BFSzZFvEALDA88BECBAIEIiAEACIACgAgQAKpAlIDQCzPRWFD8QHPQfoQ_RD6EP8VEPoQ
_wAgmwEgDwGnAioDQJcB5b8y_hH-BQ-6Ef8VD-oREgIBPgHfoAzwEwQQBDAEEATwIjsACB-zOgAP
txocCiw-PVocCiw3vgFyEgoOHQ4tWgcAD7wBARASXEs2gBIAvAFAz1QvJAQA8gkPVPoP-wER_g-C
L3DCIQL6D-wR8BwtwC1wAfEgCg9UDyQKb1QKJg8kFgUKVgoGJfoSHwEKaQppClkKOfoSBAEKZAok
ARQBClQKBCG-APEBbABsAFwAPPATDbANEA2ALfYCEEByBUBmCgYlCABwFjoGCgb6E-AEM2kKSfYR
MAn6Ex8GQGQKBCEIAFIUOgQKBGMENWwATF8EICAt6R5yA0D2BSVWFZ0BUfQFIVQRQwRCJS1QHbgA
MRYFCgMAJholCgCR_hApCikKKRpZBgBhKfoQFAEKAwAmGiEKAJH6ECwALAAsEFwGALMs8BINIA0g
DRAtEAgAAlk6Qw0wDwwMB7sLCh8TCg8UCg8XKxAAMPoQDwsHFQcRBxc3DABUB-oQDgoCAFceCg4K
PgwAIQ76UQUCAgAADgIXPAwAAd0DBAIAVxIAAgAyDAAUAqAAJgsKAgAgDw8EEBwLEgBP_hEHCgIA
CgJvBg8CAAgCVAMPAgAIAYgGDwIACSLwEa8AJgcKAgBnDwoKCwoIAgARC6gHD60AcxsDrAAADQkX
BwIAPwYKA6sAeEALCh8YEBKSCwoVGxUICh8WAAqBGRgZ_hAHCiePABNnCAAQV5ICES6BABNuCAA0
XvoQLwUTbAgAEFx_AhEiZQATYggAMVLwEG0AcQ8ICh8UDwj9AgALAJEfCB8UBwofEwf1CT8UFxR0
AEAoCwoCABAIeQAVAQIAAWsBD4wBUgKVAAICABPifAEjDwVoCgNqAAOVABMB1QIfCCcCeCAPVDQU
ESTwCgAzDDU1CgkMAFMJ_hAPAbsLdwQKFAoECjQMABAEwQEFyw8ARDM1PgoLDAAQC8wBD8gEDAK7
C1cdAA0AMgwAEw3gAU8aBQoJlwAEEhKGAA_UAAFPEg4KC5EABR8QkAAHHxKOABYACAAaGQ4ABpAA
AAIARhQaBAoCABYUkgARDo9GCQ4AB5QAJAwATQsFDgAGlgAACAApHRAOAASYABIViQAQFVIHJwUK
DgA1_hMkohgHBgAy_hMegQAQHjcDJw4KDgAy_hEQdgMLBgAy8BMSeQAQElUKJwIADgAv8BGGAAs7
GfoSgAABBgA-FPoShgAFABQBC4AAAQYAPxzwEoYABQQMASYFCgIAAokACBAAXxn6EAQKAgAJEhTR
AhUOnwEClAAYDq8BLwwAAgAJEhzYAhUCpgECowAdArYBVxUJChUZBQD3BhkKKfoQJApkCmQKdAok
_hAeCwoeGwUAMBsKK54IAF8Jp3wALPAQEg0AEh0FADMdAC1aAHOSLysfLA8vBwBU_hAPBgACAFcW
AAYANgwAMAb6EN4MEgECAGcSAQ4BHhINABEOWAkPcQgN8QwDDTDvPP9IAPoRAP8DDvoRwQDxAfoR
wC9z8GAdAPABH0MfPB9BDzwvPx88HBgKAkIy8QQfMgIvMxIfMhL6EA8DAAcABwAnBgBhBwAKMAYQ
mwAAnQChDxUBBQEFARURBQgAUgoyARIRnwAr_hAvAxYsDABC8BAPYLkzIQ0AAgCAECIAEgASCQIC
AAOyAPAKLzgYCj8-HzgYHz8vOhwKP0EfOhwfQfoQF4MABIwACQ0AkvoQBREFAQoFIYwACQ0AAsUD
EzCAAAgMADLwGwmLACLwHXgA8wE3HzsKbCosH0EKf0MPRQ9HcwAzVwAqCADBJ-oQDRENAQohFR0q
CQAyMQVNYAARYI0js2A88BIpYAlAKWA5zABSCA9DD0GnSJEMBAgEDzsECAQJAFdBBA8-BBMAQPoQ
AA8bVA8CAAhj_hD9Ae8lXgEPAgAIHvDJRAoCAAScAA6GAPoACggPPw9BFAZkH0f6EAALAgD-BQoA
JwAXAGf6EP8wAAo9AR0BDQFNjgAAAAkDD4YAAiBNAgYAE0l_AMUPPwwFDBUIJRgcGAUKADX6EEdu
AgYKAJL6EC8lHQ8VHQG4OVUGLyUdBg0ANfoQPF8CGExpAmEiCQACCRB0ACIJAA0AIxkAxzbxCQMN
MCUoFS9BLBQvQyQbL0YvRB9G_hAfA1cCFxcGAHF3_hANAQYNbQAPCAAEAAECAHYADgYAIfASpzYz
EPkG9ADyAO9I_iHn_iEG0foh0AzwYRQAyTf7APoR9w-6EcYA9p0DEAj0SEAICgIYKxxAOwoCGrkS
8gIPJx8mDyQfJwofJB8mHyT6EJQIAr4JkQcafwYKVfoQDVEaES0GAP0DDRovNR8wHzUPMAoPNQ0E
DQQNKAUgECxoBxQQoQMWMDxRUAAJoA9g0ysDNQH-BC8zHzgKOB8zHzgYJB86CjwUGxyYAwsQDUJJ
Yg0PEAoNJq8BRQ0WDQYNAA_cAwkASCw0ARABnAPxBzIfNwpiKiIcClwKLPoQFwUHBQpXBSoIAEBH
BQonkASBFgkGCiYZHSpjAFI2CQ0KLWAAgsAMAAxwLPAtqhAPlAMaLwUAAgALYvoQ-QD-NScTXxAP
MAELAgAKD3gDCFwPNx87vHAAIBUKTgEEggXxBPoQ-zUACj0GHQYNBk36EPwAAKwqAQBOQQkCAFAA
Cy0ACz8BE0FxAPEbuxofLp8sGj8r_hC3GrcaN-oQDakaDQYNiRoNBhn6EKAMEByADEAM8B4Rww-0
Aw0wbykKbysKbywKby76EQBXCgMAVPoRDVkKAwAz_hFQZT0h8FE2ABHk3QIkDdndAnMGCzAfMwpC
AgAREgIAY7L6ABcKRwIAERcCAHS3_gALCQo7AwBzKw0JCgsJCgYAIRkLAgAj_gBsCAcEABEQAgAT
IAgAofAACwYAJgsGAEYCABEWAgCgtvAADgAGDxgwC9k4gg8tDy4PLwsICgBwCAsIBQ8tBQcA8RsB
BQj6GA8GFyADBwMgFzAjIPoYCUYNSQ8lTQ81GyT6GPwI8B5dXl9Q8BjVAPEEIWoRK2obLzJqEi8z
ahX6ACNqQwIAnhP6AA4JBmoLDQYAaPoAEAxwDAQAYPABD1CgCAIAIfAKVgD1BS8oahcvJ2oUJ2oX
LylqEfoAIGoTAwAPWgAJSAAccAwEADnwAQhZAEBfN184BAA5LzcvBACR_gDwIPoACx07AgBkKy0L
TQsdAgBC_gAATAIAKhAMAgBX8AAbCCADAAMCABEAAgAu8AFvARICCgAwAgsCbwEABwDxCgQFAvoY
LwUgJyAnIAdA_hgNSQ1GDTkGXyVqAUMYtm1LaQECLAAPBgAXAtIARQ5NAU0EALFdAT36APwg8AD7
IAwCEkBjPQQqOw8MAD8PhAAQggswPwwaPwsaBgBILwwvCwQAYfoAPwcaMwIAYvMI_gA7GgIAcfsI
_gAgDEACAABFQgmUARJAdwHPDwwPCw8KDwkPCg8LDAARgfoY8wj6GPsIeAEQWB4B8QUZehkfGHoY
Hxp6Fx8behT6ABB6MAIAYRD6ABt6OwIAEBuNAyiADAQAVPAAC4ALBAAg8A1KAHAWehYfD3oVBwCB
EXoS_gATejMCAB8TSQALFwFJAAAEAAO1AV5UGg8kGgYAGQECAH8h_gAPARoNAgAItS36AAsaD3Aa
CxoJBAAKAgAkKfpZBA8CAARyLPADDyBACAIAFhACADIo8ACFAXIBCj9UAQo3AwBR_hgNCk0CADQ9
_hjiBAADADP6GAxiAzM88BhOACEwC-gCV0ABigEKBABn_gENig0KBACk_gEJig9QCgmKBAQAJ-oB
RAECSAFHCIAIAAQAApoDUAwwLy4vvz-wAPoksPokKy4kL2D6JLzwZHYAbb8r_iS-BhYAcwz6JLP6
JL4RAEkPCA8YZxMGAgAQEewADwIAAX8d_hgPYAoFAgAAIB_ABwEPqw0DPxgLAAIAARAYIwG2DwwA
CCABKgcKByrBEQUOAGH6EQ0qDQoEAAYCAAIOAEb6EQkqBCUDBiIUKrMRAEEvBkUvFQAOAILwEQQg
CwALIIIAAPsYBQ4AABcJNgJAAYMAA48ABBAAAAYAFBGQCQ8CAAVGHfoQCY8AA5sABBAAEgkcDw-a
Dg5gCAALAAgABgACAgAGEAAABgAQGAoIbwJADzwPPwQAKV8MD0EMBgIACWDwMPgw-DDiSR8DAgAp
AawAPz8PQwQAKV8GD0QGBQIACQOsAB8DqwAvYT88Hzs-Ok8u9wY3PzYfNT80HzMfMh8x_hDwEPoQ
CyirOwcMACj6EHECCAwAAA4k8AMCQBIaHw4fDxofER8PHw4SGhQMABATDgBRFBoXHxEMAPcCFxQa
FxEaHxQfExEfBxo9Gn0EAGddGxo7GnsEABpbZQAPDAAPACstcgJAFxoRHxNkAPMDFxoRGRofFh8U
GREaGRYaHxYWCQBXGB8WFh18AA_AADj0CwgwHxgaHxcfFhofFRYZHxIaERMaFxQfDfoQcQA0XfoQ
awA4W-oQQQAIDAACVAFgPyQfJj8nUicjHyYMABArDgBpPyYfJz8pDAAQLA4AMfAwDqwBAgYABgoA
DxAABRsOEAAmCwiCAC8ADAwAEQJ1AQCkACI-K4QAAwwAEC4OAACkACg-LAwAEBsNAAKnAAR9AAaB
AAIGAA8QAAAPpwAzkQgwOx8vPy4fLY8AUCofKT8oWQEjHyX5Ah8IAgAFDwEDEoAPKDA-OTwPOgYP
gB88Hjw-OQ86Py3wCD0PQQ4PQ29B_gmPBgoFCsUKBQql_gkL7VMRCrU8FAMMANJLWPoJ8Dw-cLAf
UPASUgAhDzKvCXE3PzkfNC8xDgBgNy81Ci8yZgDyAAYKLzkPPWz6CfUDCiUKBVkAET6wA1FeGAoO
GHUUYAsYG1j6CWcHwfAkP1BwD3ALCQvQH7dJAGEAXwQPGgQBAgAB8A4DDxwDBy8VCmH6Cf8HDwpt
_gn_DCsKDlv6CfwMEEUNIQn7TVsQBQYoAqAYVg8kKgYKAgAdCA4AAQQAAAwAAwIAEg9dJA8tLAst
CSoSAAAnGALsKyUPgK8sAAIAHQQOAAEEACMKApUVFgRrJQS8AQ8OAAUKEgADpgZDCwAPYFgHAgIA
HQMOAAEEAAAMAAMCAAH-BwAvWxAy5hsTN28Hdg81EfohBQoCAHUl_iEPIAoNAgAxHQ8VmA42IQsA
AgAQG7sfAIpAECtuARFDWAGPDyYKDykWCgYSACIXBQIAAkICDw4AExkNqgA3EAoNAgBPHQgKDQ8A
CjHQDOACACHwMc0A8CJXYQoPNQFfOUEKPzVBCkcKTzEnLzmMxQrFCoUKRQr1BAg-FQhpChkIORg5
CggpCDkKAwCgKegPBUAMUAwAHF8MAAIAAGkMcdAM0B9Q8CBXAPAeUV86Gg85DzpPPApPOgo-OT86
GpEnLzmctRplCkUKdRqVvwU1GDkYORoZGCkKAwDhGRgZGhh56AJADHAc8A-wTgZOAI0vQywkLBQc
JAYAQfUw_DC1JT4MQAoeAAEGALIMCvIvCihfCGIoUwMAElIxAPAADz8wLzMvNRErIR85LzMrCABS
OO85GhzTIxEfoQfPCvUfGtUKCBkYCQgJBgAAU9ka2ApA1hDhAAzQDPAGD1BgBmAG8BqSADEhLzkd
IuA6HzwvOi88HC0sHz-8AGIAFB1hAID1IBrS_CAa0w8WCAQAG_ABAwBBBQHICmsPJAoPVAoGAFAf
VPogD9gCB6ggo-ogDgoPIAoOCgQEADwU_iAHCiAgBDRCAKEKAgQAExtvAUC-VA8kMSIdzwgAAGgi
dPcwCw8VCwkCADMOCQ4KAA8QABOULgn8MLALAAvABAAiKwBWA5BUChYPJAomChYHCxAGBwADDAA-
AQoWAwABEQHJFBMnzRQMCgAVJxIAcQQKBAsOCiQGABsODgARDggADwQABQCfLAFHIgEwAQwKABUs
EgBgCwAbBAArBQAeBAwADgMAEgTxAAbjAAYFAEAWASoGAgAAWSMDAgAsIRrTADAnKgcCADQ6BwoC
ADcnGgTXAAgGACAUDtNaESo7ZAMCACwuGsIAISwgETwEThUA4gAWEMgABgUAIBsEX0xUIAswCwAC
AIMkEA4ADUAPE5wEAEMzQwoyDw97KgAHBhIyGgASBQ0AAhgAAxoARQ8HCggCAD9ICggMAA43OA4K
AgA-Kw4KDgAVJwwAAgAAVyUPDgAUAXkD6A1AFQoVSg0PDgIKDxUKDABAEwoTSh0REAOfDsAOChlK
DQkSFRgKGErNMA8IAAFQWBsKG0phJA8IAAGcOw4LHAAcQCwgBgCbXB9QABZAJiAWBgBBNg_QAH8B
0B8KIQoRDx0KJwoXDxyTHf8YDxsKIwofGgUKEQUKEQIKFwIKFw8QChQJChQPDwoTDw4KHxoPBwoo
AgAKjhgLCh8gCwocAwAfDgMABF8QHz4QFgIACk8fUBAdAgAJAgoEVw8KJSoFBABBDw4KIQIAexH6
AAgKKCoEAAKuAGr6AAwKKyoEABUbAwBS_gAQJkACAAKKABAWBxNBCUD6sA4G8wUFDwowKy8YPwz6
Jp8E_iad_iYPPB4dEQY0cPAmCA8JIAoPSw9jD14ODyMPFQ8vD0cPX-onjwP6Jx9DDysPKA4PLg8s
Hy36IABaP2FPcw9j8GZdMPEZCTAPUz9bKg9UP136I08DKk8F_iMPNA8xDx0PCQAqDx0DDxkY_iMG
IAIAYPAjD2BgB8Bj9RUJDxIMIA9ICw9HDzcPMg8pHxoPHQ8mDykPGg8oDzMPKA80DykEAJc1DykP
Mw8pDzIQAKw1_hCfAwAEEAgAAgDxCvoQD2gPVA9KDzcPFwwVDAUMBQMPIQ8pDzFZYEAxDywP_SmA
HA8aDxMPEgV3APIDCw86D0EM_g--KxDwEAcPdhf9Pk-wJQ8PDTAPHS8fPxxPKPojxPojDzgPNQ8v
DyoPJA8hAw8WDxEPDg8JDwYPAfojzyvwIz_gj7DpXXEJAA8GIA8e0ABgMg81BvoqFQXwCRT6Kg8v
DzMPOQ8uDyQPHPoqXyvwKl3wKg0B9RAeMB9bD1oPWB9WD1UPVA9TD1IPUQ9PDQ9OGi9bD1cPFgD0
Mh9RH08PTfoS1BrfBfoSGT8VKQ8IDwYPBQ8EBBofFQkRGQ8JCB8GLwT6Eg88AA9zAAIAchAPPBAC
AILwFA8SAAwJAgAxcAkMPBIgCAkoFUBUDyRqlFyAdw9TD18Pa-o5B-AaBmoPCk8B_iAv8GoFD4AH
BQcP8fogDzwSYFbwIQUP5WAH8CUOAA8LDwZBAPEHMA8YDwwQ_ipfAfoqVfoqBg88IvArDXJh8RIK
YAkvDAAZAA8EAQ8RCV8MMDswe-oI-wEY_gj-oAU_DzpTARApUwGhDx0PGQEPEg8PC1YB8AYE_ggf
LQ8rFg8tBiMWAw8rAwbwIAVUAPAJCQ8GMF88_ipU_ioMHg8wGfoqX3bwKl_qTAH0EQ8KDwhAD0hX
_igPBA8BUPooVQ-QD6D6KAMCAAYCJvBoIgDwDGxPKPopbwH6KTUPkAcPMPopLzw-K-AsP3DwKWEA
8AcEMA8wK-osAB8KDwT6LBUHDPosA-BvPQDyGwtADzAACAAPVA88DyQPGAsQ_iQADwEADSBE_iQP
kAUBFS_APvokDysPPAQAQ29z8CRyXPAcDgALDwUwD1QPSA8YC-osDwUAHfosDggFB-osH3MW8C0H
DvAtDgAPB0AIT1oA8QTwHLoEDQT9IbpFJw4MCBUP0A-gG4CyoAEPgA9wBw9QDjgHAJBICSwpCAks
KboSDCIvczQhBAIAFQYGACMGALEgIdAlaADwEw4PGFALABsiKwIPJBIbEPoc-QT6HPUE_hwPPAD-
cwEG8FwlABFAn3TwAy8PMi8vCg9KD08PUw9WH1MPPGoIgQoE_htvAwphxQjAAfobT1AIDApHCA8-
BAyxIwoPDfobZgBWAwACAHDwGzwwPPAkjgTxFUAPVA9gCh9UChn6KBEKEQoR_igfHgofHAofBfoo
AA9zEAYQBqsB8DALDxNQCw0BDwQPBQ8HDwgPCgsPDg8PDx0PNg9PDyQL_h4AAQDh_h4O-AH6Hg8r
-3MB8B4KsAcAD2APoA9g8B5NAeIIMAhvJA9gbygPJG8mfwoA8QgYbyb6AP0g_gD8CPcI_gAPK2AC
YAJgBtwKsgcFYA_gYAXwBw9gx3cQLH8vAEkFc----wMOAAQLAET----eDgATuQkAHHARAAgaAAB4
AgGuafMPDj9I_ilh_iknD1UPNQwPFfopNhAG8CkvcAcQB-ApKQBTBg9BD0QEAPEHPA9B_igPBgBB
A-ooCA4HCAcIDgf6KHoiQQAG8GkyAPEKFjAPFwgPSA8vDzwPSA80D0gPTA4PWAoIGgIAQvoaoQoX
GJMB_hoPTA_PDz8GAPwLdA_WH3QPlgoPPxoGGg8jGg8N_hoPPA9zDy0GADAADy0iVnAQCfBaDgAB
iXzADQ8aCQ8hCQ86DxoCv3bwEw9Y_iWt_iUP9g-0D-kPWw-8BQcP_Q-2D1cM_iUPPBAGCwADAAI4
BiAPEDQE8R0HDyMPJjoPJA8f_iYPCi06BA36JhUfkDofoPomCR9zBjAJAvAmChUOMBrwJscGoBAw
DwwID0dKDw6CMuL6JSFKIPolD5APmQ_RSgcAwPolL3NQE-AmD6APcOcCEAF2AfEOUA84DycPGg8Q
DQ8FDwL6KH36KA_RD4APhQ93D28XhaFC_igLUAvwKg8QHAPxJwYPITAIDy8PWA9kCA9WD1MPaxAP
Dg8MDwUPCQ8XDwwPEA8MDw4PEAAPEw8hDxcfDA8bHwwPGhUAsBj6Dx0RDSH-CAn6_IWQjw_OD4Uf
jA_Oi3agPSsXFi8-JgcrH8518AM7Cwf6D3BS_QPwFA_QEP9gCfBYMhAEUwXwACQPLx8kCAsPHfop
XQ8C_vQG8QCYDzgPmA80D50PNPopb2H4AREOEQH0Mg8YHzcaH0gACg87Px0PKfogNBokClT6IAUP
kA4PEBoeD-oKH5AfYAgPIPogBgIDBhACFgALMAPwIR_QcAwgDPAg4gIRcH8AIBAwPALxATcPMw4G
D0UPQw9KD0EPUA4df_FU_iHvA-ohDg9FD0gPRsh58gRHDg9OH0wPSA9KD0QPTvohaQIJAgBx8CFs
D5kMAQIAAOhL8DIPCQ8SMA81Cw9BLgYbBn76HvAC_h4PnA_YD1QfUg9eD1YPUQ9eD1cPTw83DykP
Iw8dDygPFQ8E_h7yAvAeD6APsAEFEAUABTUPsAUMAHAfsAUP4A4MNjIACQGOMA4PQgoHDgcEAGX6
GB8DCi0CANEN_hgLDzgKDwsdCg8CCgBiCQ0PAgoNFQAgHwIhADUWACYCABAGExwgDxCcASFICLYI
hTUPMvoqXfoqbgjwASAPF-oqUvAqD2APdh9gH1CPBvIhDQ8QIAoQHwQ6EC8Q_iM-CjpE_iMFCA4F
Og_gCA4fEPojsAbwYw4ADx4PCDA-OT83mwJQNA86D1MSdvAHPw84DzEPBPonCx92BgsTBvArD1Ag
Cf13Ux8IMA9ReAUSKf0QMw36KRAMI-op9gnxDgtQDwx-JPolpPolH6APkB_gDxAOHA4M_iUAFvBt
IgBkJzAPRw9YBAC-Og9XD2MKDy4PMhoKAAqH_gxdOh0KHRoEAPAQ_gwPmA_TD40DD2EPVjoflAoP
ZQ9hGg_MD5QKD18PXDwAIJQKNGcwGg8iey1SFQ8T_gxpPY8wAg9zAB8tEAcAAbDwDFUwCQUACQ_Q
EAcAGAcGAAB4NDAPBQwuA1AYAA8XC8oJNRkPMAQAEBWYCDD6IC3nI0IPBA0IAgDwGvogD18-nx_u
D68PPQ86DzYPMg8uDygPHQ8U_iAPLR9zzy3wIA8gBQDFGAMWDO4FDwEALh8vTwANUP----_F
:: sfx/1.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAyLTIwIDA4OjU2OjA1Iixtb2RpZmllZD0iMjAyNS0w
Ni0yNiAwNToxMTo0NiIscmV2aXNpb249NDgzOF1dbHo0AKEnAAAnWgAA8R1weHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKBQoPDzABDJABBgsNQAcA8CYPEUAMkAIHDwwPEkAMkAMIDw0PE0AM
kAQPCQ8ODxQwAgyQD2YPaA9qD15ADJAPZw9pD2sPYgsAcGwPeQ_FD18LAHBtD3oPhg9gCwBwbg97
D44PZAsAcG8PfA_HD2NvAIAPcA99D4gPYxcAe3EPfg_JD2ULAHBzD4APiw_RCwB2dA_BD4wPkhYA
EJMLAFJ2D4MPjwsAz3cPhA_VD5QwAgzw-wEA6vM5aQEQBg8ZEAEgASAB8AACEAIPHBABIA8hIAEg
BA-8AA4AD-3wvw8oD--wxg-4Cg--D4AP9w8NAXAPcw9RD1UPQQ9SD0WgARACRAChBQ_A4A8SEAYP
GEYAkA-UEAEwD3-ww0IAWgAPKfDERQCgbg9PD0kPUw9FsEMAEBpDAAA6AACJADMGDyCJAPwUMA_Z
IA--8LgPOw8MDTAND3gAD9QPzw-ED7kPtA_v0A--8LCbANNhD3cPdB9vD3QPaIABSwAF4QAVHVgA
P74gA90ADvAEDyAPNQ8wDyUPIA9kD3UPdA95EKwAAVIAOw-4EPEAAFYAdIIAAgAC8L-zAL8TAgAK
Dwkwj--wkP0ABwqjABMJTAAgD-iBAT-E8MOkAAwSCaMA6AkPYg9lD24PZBABEAYJ8wAVFJ0AfuHw
ww8eD7hNAOBxD3UPYQ9yD2UJDzIPNU0ABu8AIAYNTQAoEA6eAOADAA4BMA_BEAQPfwABQGUAECEl
AOIGAA4BEA4AD4EgDzzwmLMBaA9LD-8PCbUB-whQAmAP2Q_0D5oPhA90D1oPRQ8qDx-wqMcBDAXT
AEIPEhAEhgBiD9IQATAOIQFKDwvwxUIAhGIPdQ9yD27APAAEXAI1Ag8oEQF83PDDDx0PiBEBAXUA
Ug9lD3IJiAA0cA8RRQC0_gAOBRABwA8SEAKSABHJ6wF-oAHwBwLwoOYBBPkBCQ9XD0EPVA9FD1JQ
ARAGDFMBJgARUwFPIA94YFABAerB8JcNAQAPDjAPDA8lAE8BPwHwtz0BCBIJFwIfQKgDDhi7YQAP
rgMHA1AAGHCUAQUZAhUgkQEKsgIv8AkvAP---z0f-wEArPMRyA4ACEAPKA80HyUPJg8yDygvNA8k
LzAPIi8uH0MeHz0FAAAiAE8PJA8wJAAJMAMGAAIAeiYAJgMmAwYCAA8aAAUhDgkCABApAgAwDzAJ
8AZjFQ0PMAkLCwAIIAAEFAAVCx4AQA8rAAcCALcgByAHEA8_DzwABAIAGQcdACcEAAIAIPAx9wAo
Hzu-ACkfOQ4AgTsfQh4fPx4cCQD1AhweHB9HH0sfTB9O8zANDwUNAgByDxUFAgUJDQIALwsCAgAL
sikLCQsNDv8_KAQKAgAh8DB-AfIPOQ8tFB4-RQ--D0U-SC9CL-9sIT9BEU87ATr_AAMPKwHxACYB
RiAhYCEwEUAB8AQLDQIA9CMpAQIpAikhWQ0hKQIRKQINASkCDwQPBw8KDw0NDxMPFw8aDxwPHw8i
DyUPKQ8sDy4PMjIB8QIQCjAKsBpAGjAKAAogCiDfdooA8jEPJDAEKgEKX0MBOnQBAg8tDxMHDxEP
KQ0PKCE-O-EHExABAANAAQMgA0ADAAFwITDxBzkBDUkNASkNOR0ZAQ4LAgDiIT7xByAKUAowCjAa
MAdwAIEwCgQa8CEBAAIA9RDwDw4ADQkwJSQqPgokJSQPR3XxECAmoCYghvEQDgsJAwAULgkA8QsP
EQ8XDx0PIw8nDywPMQ81DznxEPoIYArwUD8B-gIoDg8lDz0PJgoPKC4LJP86AhIAAkQBVwYjBvMF
CwDxEwkLuQsPPQ82DzIHDyofOA80Dy0PJgkPGw8YAg8RDwsIDQvXAR9pJQAKA1MCciAEIAQA-3YN
AAMPAJH8AA_Q8A8F8A_nAPoRNA8oDzcHDzsPLwo-Mg--LzQP-x80Ty0P-x8qFx8tHy8HACAPHo0J
8gsHDyEPLQ8jDy8PJw8-DyoPQg8hD0UPIw9HA8cAvzYP-wMWAQNQAQAGAgALMXAJCwIAwjsBKwEb
DgsZDQEPUJUCEhsaABEZ6wBgCR0PBQ0EAgACFgCgCQuQCiAKYArwWcMA8xgLDzwPNA4POQ9FCz9I
EQ4fTA4-SxEPO39HAT9KEU9EAQ87L0fPSBGcAGEwEXARgAGxAvQgARGrESkNKQ0RaR0BKQ0ROQ0B
OQ8VDxkPHAkPIw8mDygPJw8lDyMPHg8XDxIRBwACAPAACjAaIApwCgAKMApQCvBEogLwAiIwD0E-
QxFPRwE-Q09BER9DjgDyEg83D0MPNQ9BDzQO8Q5AEUABgBGQ8Q5JEUkBiREJi-EOMI4CYAowDy0A
DAIAIfBPggL-CS8-Li9CP0MPQi4vPy6PO-EQJiAmcCYghIcCGSUHcIcC8AQPHB8ZHxp-HA8pDxMP
FV8WfwoBFQAyDyUPFwASHRcAUU8KDxYPBAD0Af8HDwH1EA4rDgsOaw5rDntDAwANACKLDKsAgmAM
H3NPdgxyDgACEABQQgwiDAICAANABPIYKB0PEg8qHR8SHRMNDygNBx0TDQcTTR8XHxsfFw8cDR8X
Hx4fFx8YEQAmHxwQAPEF9TD7MAwgDIAMAAxADIAMIAwgDGAGACDwN1kA8SFPFQFPHAEvIQEvFwEW
Xx4-I08RAUYBLx0BHyERFB8fHx0fHB8aEUUBRQElASUB9QEJAOEVEZURSwFLASsBKwH7AQkAQxsR
mxG-AABlABOgBAAg8DvSAfAIIDBPEwFPGgE-Hx8dMQkfHxQaGR8c8Q9WAFBVMaXxD0wAM1sxOxsB
gfEPDEAMQAwgBAAGzQHvCEAmAR8bFh8cFh8eBgEMAAPyATYBHxU2HxwfDR8ODSUBpQEEAHLVAcUr
AasBBAAx2wHLCQECBAAQwF0A8QI5DgAIUEEAIQChAIEPSwECIQsAZCECAQAhABcAMwQBBxcA8QMH
AQchD29BAyEDoQOBD2EBBCELAPEEIQQBAyEPK0AKIAqgCoAPPgAJIAsA4SAJAAkgD6BABiAGoAbg
BgBAQA_AIHMAMSEAAWYAADIFCAwAEAEIAAQMAA8QAAAhIQcEABkHDAAADgAGBAAPEAABQQMhAwGn
ACoBAwwAEAEIAAQMAA4QAADDAAHHADYACgAMAAAOAAYEAA8QAAGABiAPUAAGQA2cBCEgDQoArA0A
BiAGIAYADQAMAA8QASQfQAwBIB83CQEhFjP6AA8GARcUOfgADwIBDRg9-wAvIQAKAAED8QAC9QBS
AAEHIQeSAg0KAALvAADpAAjrAB8hCgACA90AA_EAMAoACdUAHyAKAAEC2wAA1QAB1wBsBgANQA0g
CAAgDSCJBhUN0QAUAr0AVTEAEQABAgA08Q0AqgABGwAkBwECADIA8Q2aAAGeAFUxAxEDAQIANPEN
CooAdCAKMAoQCQACAFEK8A0GQIgAVDAGEA0AAgAwBvANhgAjAQACAAGKAB8BDgAGCRAAEyBBAQIG
ABAHXQEGVwEZIRwAARAAAxoARQEnAQMCAAHEAB8BDgAGCRAAIiMBWwECBgAQCXcBBnEBGSAcAAEQ
AAMaACMAKXABIgYAfgECDAAXBgwAQg0gDQCYAQKaAUAt8P86YRaDQPGw8HAOAAUIABEPCQAU-wEA
E3EaAB--AQAU8ChQDgAFDw0wDg8-DzsJDz0POQ88TzvxJL8F8SQPNgwPEg81DywPEw82TzDxJGkw
CfAkjg0eDfAjHQZhQXAPMAELAgBnDwwBAgELAgATAhAAIQ9UCQACBAARBxcAIQI7BwBhPwkPAQEE
AgAQD1UBFwQCAABZAQYIAAIEAAMCABE0BwASS10AwyABD3ABCgELAQ0BCwIANQ0BCggAFQ0IABAK
AgCvOwEPkAEGAUkACQIAHAEyAAGXDMQPNzALAQshAiECIQvXAEMPGA8k4QARAggAAIoJNUgBCwIA
ASIAIoEEcAYjIQTSABcj2ABVBAEkAQQCAPENI4EOAQ4hDSEPWSENAQ9IAQ0BDgEtAQ0BDQEPWAcA
VQ4BLgEOAgAwLYEJXQMAAgAjAAlcAgIIAA4OABApMwePDxhAAg8NAgUCACmw-wcw-jD5MP8gEPt7
E2oYDyAwEhUCAM-xEP8HEPEQCw8VCwwCAAlP8RAACQIAC0-wEQsAAgAKr-AQDgACQA9LAQcCABgT
JwgAQQcBDw8hAk8PCgEGAgAYOSYBBgIAEAyQAj8MAQgEABQWGAsAIQ81_AEvCQACABkbKSQBEisM
AQAJAS8HAQIACT8aBwECAAdfCgEaBgH2ABkKAgCfFggBDxABCAEDBAACRA8YARQMAA8EAAFfBAEU
CQD0ABgLAgCUGfAOG-AMCwAbBAEVCtUABggAFQoOAAIQAAwIAAQgAB8GAgAsANoBEwvgAQgIABUL
DgAMIAApDxIhAC8JAAIAKrVAC2ALYAsgCwALgAoAZEAOAAIIMOoADwgAA18a8RAGAQIACVMW8RAP
GFsFHw0IAAI3CwTx5AcPqgEDERSVAGdgCwAb8BCvAREKlgMfFw0AEgOpAhEWkwIfFgwADhAmnQBB
CAENC0wFHx0NABIDjwIRGXkCHxkMAA5nKTALEAuwBAATUIsCEBexAAkFABsaFQBgChcBCgc6XwMP
AgAHQFYNAR2XAAkFACsICxYAYAsdAQsNOywDDwIAByVZMH8BAgoAEAAgAh87rQAFBgUAFRrzCS8K
Aa4ABkQWEQYBAgAeNrQACa0ARAgRDQE4Ag_1AAYXGU8CFDm7AAK-ABGQtwBaDQMwAgUCAP8O8SD-
BwDxIP4A8SD5APAg_ADwIA4ADQgwcQ8kDyUEABnxAfEY-wMI8Rj7CPEQcPkI8FBGACTxAB8ADzcA
BvEIIP8GAPEgf1B-cPEQ8AD5APAoPj9g8BA-APEJHzQBjzExKywvNCwfNx828RAfAwGEMfQALgfE
AQsHYzELBw8SCwcKAwCgCwfxEAkQCWAJMGoCAgIAownwER9QAAawBhACAEEABvARXwABWQDwARsc
Ii82LzcvNh83HzvxEPSLBykHClQABAoAB2QAA1wABNQCBWoAA2MAERCPChoQcQD0AQMwLzovOS88
bz3xIPQA8SBRAGMKCwdD8SBHAENACfAgNwBBMAbwIagA9xQsEQwBDC82EQUBBS89EQIBAi4RDgEu
bzwOAR7xAy8DEQQBNAQA9gCkARTxAwsHDwgRCwEbBwoGAEAXEQsBvwCxQwsHAQsH8QMJAAnJAAwG
AMcJAAlQCfAHBjAGABYEAAE_CPAQDQgwDgFiMQIfPw4B0vEQBAFkMTQB1PEQCwELUzEbB2EAgTMa
Ew8SBw0I3QQxQAkwJAHR8B0GAAaQFgALAAbwHUcA8BQBAh4BIgEPQg9ED0UBL0JvRBEPOQ84DzcF
DzUPNA8z8REkAQIA0pQRYPERKwELBwoBKwEsAUERa-EQUgQSCVgEkHBp8BEmAAYgJnIBJHBmPALw
DTEBjysxLyovKy8xHysBHzEfL-EQHwYBjDGsATzkAQJAAhEXAgAvBwE8AgAAwAA-8BEWOwIAEkBX
AFAvKx8qHwgA9wgzLzQvMx80TzclLzlvOPEA-CDxAAsHDAMAAAIAHwwQAAUoSvFFAg8MAAFPQAnw
AFsCBBYALgIQAZsA4B83ARUBHzkBbzjxIBwBAgAQbGsCFAEDAABrAhEQAgAPawIBIC8tYALgLzER
BAEELzcRCgEKLz14AiDxEIUCFzwEAKEPA-EQDzAXEQsHWQIGBQARC-kBBU4CCAYARwnwEAZSAgZW
AvARQAUBPzgPNg80AS84ARMBBQE6DzYBDzQEAUrxEA8DASjKGqEYAQgBKBABEAFAbwKyBw8QLgEP
NR4BGwEOAPEAHgEPNQsBDg8yDzMPNA81hgAyADlARgFRKRAJ8BYuARZwhQLwAEABHzYFASIBGwIB
K18vIXcCwA8yBAsPLw8u8REoAQIAMYghaH8CERd_AmsPCAsHPCF-AjgwCSCBAjIwBiCDAlAPIDAf
DQIPcB8TIQoBChMLABAaCgCH8RAfByEFASUEAOQF8RAfJSECASIhAgESBwUAMgLxEA8QDgYAIfAR
qggdAAYAAHsArg8MQAMBHxkDARQDAF8PCgEfFgUAED8FASUCAApPFQsBHgMAGi8QGQIACyHwMLkA
Xw8GAR8SBQAQQQwBHxQdDAEDAB-hrwAGEOEFDg8CAAI-4RAZAgADsPBADgAPCkCPJBEGmA8Cdwcf
BggAFyCPATgDDwIAH0OPcBEHrA4-DgEHCAAXEYnqAg8CAB5jjyAQAgALAgAfAggAFwEdAQHqACUG
HfkABAYAAggACBAABAIABBAAAAgAAmkQPyoBCgIAJAD3ACUHHgYBBAYAAggACBAABAIABBAAAAgA
FQ67Aw8CACMABQElAhsUAQQGAAIIAAgQAAQCAAQQAAAIACALDn4cCg4BMQYBLQoADwYACxsKAgAf
KgYAEAr5ADEHAS4KAA8GAAorAAkCAB8pBgAQCuQAMQIAKwoADwYACgEIAdMPGwEEAS9LAQgBBAEI
BgAVBAwABggABAIADBgAAlkUHwMCACQAhhIwLyUBkxNBDAEPIgcAEQIGAAoIAAQCAAYYABAFCAAH
AAEPAgAhAC4BAPAEEBA5GTMABkAEAAQCAAQQAAEoAWANAQ8kAQpuAwYCAB8KCAAYKQ8ByBEPAgAd
EA4-FBALcAMGAgAfCwgAFQ9wAy4gDzAsATcYAAgCAB8CCAAXAEEBBAgBDwgAHQIEAA4JEg8CABob
Fw8BDwgAFgIEAD8bCQACACkbGQ8BDwgAFgIEABESgAIRLQoBEB1TBEYK8SEnFxQx8SEupwAQHo4R
VgvxIAAp7QEx8CEoTQABBgAAVg5hA0AvSwEKuQNfGhEKASQMABAxIwEHqwM-FxEHDAASESwVEl8M
ARsRCwwAEgKvABEJ7AsPDAARESgXAV8IABIQAgwAEgD1ANChHywfLz8znywRFRF1hwz0Cd8tEQah
-wMCER0R-QoRDaEIAggCCCIIAgIAEREDAAcCAFYSDxUIAh4AFbAKCgICAAfSFgsaAFDgDxAABNoL
YANABhF2FYcAFJWGAEDWEQYNgAAChQALcgAPjgAYD30ABg_XAAgUBJYAoPEDXzQfMz80PzUIAPME
TzQhWh8zOg818QP9DSHN8QMIAgIAQy8VCCcLAGMCBzIhCAICAE8nCPAEbwAANTAJMBYAAJAY8QED
QC81Wh8zSiFaHDo-NVocCQBAC-0AIWcAD1kABA8XAAQeEGUAD3sADMGhDwgBDwsB-w0EcQUJAEAJ
AaEPORUw9gRxAwhQ9gGhD2DyAkH_A3EECAAxAPBwtABgCXEcHwv1NwCDCgH8ASZx9ggxAG0ucQQO
BA4xAPACDy0RmxEbMT87EV86PzkRPzh6AiAfMREA_ANPOg8DEZ0RHTEwEZARkDEwEUDWAbIRCAIx
GAIHERgCJwcAQAcODyW1JgMWAGMXDz4gBQACAFMgBeAFgAwAIPA-eAASAW0AECr4IwBtADs-OhF-
AEE-OhEwdwAVMAgAMAgCFwQAcw4CDggOCDEOAAMEAFgHDxAOCBgAQwEwBUBzADdgBaAMACFABWUB
dA8RMAFPOQGFALDxIEABkPEgCAInAcwAAWMAU-EfQAUwOAAg8F_3ACCfMaEAwC80AV8xHywvMQEf
NBAAME80AQcA_gJfNDs4PzH9AQGtAa0BnbAIAgIATgcBCAIMABMnCgDINw9VKQopCg81GQAFAgA7
EAUQCgARMAgAMUAFIAIAv-AkBBAPUAQQDAQgoQAOY580Pz0-O6EAT-0GCAKhAAUtGAKgAJ93CAIX
CAIXAAWdABESgJsAEDCSAGAfPx87HzYEADU-Mz8MAIBfMx8xHzQfOAQANT89PwwAZV89-TAIAgIA
VxIHCBIPdgI5NwgCHAA0BwgCAgA2NwAFbwIGewIE_AEPGAAAFAwCAEIgDAAsCgAAECQXABgABGwj
ABgA8AcOAANQHh88DzcfOx83LzQBLgEfPB83BAAAXwFQMh81HzkEAFQlAS8yAQ0AkEURvQEtAc0B
zQYAgBG3AScBxwHHBgBSEQAFABU5ARMgOwEEPQEuAAUYAAIXBPAQXzFfM380Pj9CP0RfL18xfzM-
Pz4-Qv0Evwb9BLYIQgIAUBcYEggCBQBwQggCByIIYg0AoRcPNQIXQAVABWACASggBQwAAqUB9Qdf
LV8vfzE-PTU_XyxfLvgCEf0E9hoRUwAhGBJSAHdCCGJYPzURPwDwFBUwFTAV8AAF8BIIQAhACPAD
DgADBTCPNH81P0E-Qz9FWF8ysQD-AEE-Qy8u-QG2-QS2LfcwcIkAAxgziQAiPz_KAHMDAf0E9hsB
igAhCCICABFCbwZdYlhPNQGMABIBLAHjAjBYXzH-MwPxEfYP8RG8AFRPNfERBSYAEFEEBGMvMA8y
AQsCACAPLSsaJTUhDgBCCyEPNRYAMy81IR4AOvEBDQIAEyEIAAUKABItCAA68QECAgATIQgABQoA
EiIIACLxAYsFECrQBuBfNDFPPwFFAU89AX88UQsAUP0BMU0BAgBnfVFNAU0nWAYiAjGfAwQEACNX
UQwAFxDyAvAAAAVwBaAFcAWQBfAGDvAfaQC1BU89AW88YU8-AVUKAIFFXQFtYU0BrQYAIk0HSQAi
R2EIABo3DwAxJwUwUwUTUAgAIPA2VgACswBy8SJNAX3xIikAkFfxIUAFcAXwYSAAQx84HzcEAHAx
HzRfOB82CgAhPzQQADA2XzsGADn-OwL-AwPnAw0LADIyDyUKAGI-EDcyPyLsAAj0AAoKAAIEBAD1
AR8wigAVXp87Pj8-jAAjDxAKAEUCCBIJOAUQEo8ArQcvCQkiPyUIAhknBQ_SAAVPgAXwOCMFIXj-
BTD3MAAFYQAGYwACWwAOGAAy8AQM-wEhMR-CBDQ-ND7ABP8JXzQbGh85GhQ1OxoUGhRFQf8FK0H5
KwFAXAAWBaEEUjRfNn84oQRUM180fzahBBUFoQRABwkSGQIAAQ4AEYILAAGTA4VQFRAVECUAFQwA
JBUQnAQB9gQBnARQPF89-z_dBFG2-wYOEZkChjcIAlcIAgkHBAADFQBXXyU6EQVOADIVQAWrBBAy
VQAyjzd0ogRRXzRafzeiBBQroQRvAbn3BKk3pgQKA5MALT8-lABhQggyGEIXBgIBAwACegQEiwAC
RgAJiwDkAjBfP17-QgLxEv8GDvFnBTA68RJ3AAC0AhBScgDjzwkRHB8IMQQBFFEUMQTKEDAPDAEN
APQAFEHPBxE7MQsBG1EbMQsBAgAADADyABtBzhEPYA4NDjENAQ0OUQgAAeciMQ0BHhQAEkF9BBQB
VgBDDAEPBjMjDAYAKQ8LEwAIbAAfKwYAEHMNDjEPUAEGAgAAQh4dCAYACRgARfABJUACAJHwBRgC
AAYAAgAHABYGBwAqIAYTAADOAG8PDQEPGQEGABePBAEPFwEEAQcEAAQSDzsgDwIAKQCzEw8EACkv
8HDYACMaBwQAEiECAC8LAQIAHBIhAgAEjgAPBAAVIgYhAgADvgBCD0EJAQIARQ8SAQkNAHIKAQ8N
QQwBAgBFDxABDA0AZQoBC0ELAQIADwwAEEUGQQYBAgAPDAAQA5oAEA5RGQECAGUPEAEKAQUPABAI
ngATDLEHEAIgABcRygdaBQEHAQtOAQ8OABZHDiEOAQIADw4AFgKyAC8MAQIAC08PCwEEAgAKHwsC
ACwRDkQEHw4IACYDeQEvCQECAAtPDwgBBgIABhIEFCgPyABoEQ3IAPEJCg4wXxgfGxEfHREYHx4R
GBURHyofKR8nFQAQGBAAABMA8wQpHysfLj8DPwYRFxE3ETcRnwM3CgBQXA9QDxAEAFEOAw4DEQMA
BAUAww8wAwkDCQMPUAMGAxYAQxEOAwkeABEJHQCjfz4QFBA0EDQQ1AgAo1R5EBkQORA5ENkIABBZ
gRlhD0cwAS8IuAIAuRZmDwvxIS8HoAUg8SF1BREJewXxAwbxIAAkQCTwJRkPIAAGIBkNUP4cIA8K
sQEfCgIACh8CAgAJD7ABNCEPYAcAPw4BCAgAIACxAbEPGEAPGg8bDx8PHgQA8AcdDx5fNz8xAQU-
N38r8RBwnAHM8RAugjfyEQadAV0fFQ0nA-EQdBAEEAQAH3YEEBQABA88D3YESvBQFQEQVFABFSTi
AA8IAB9PDwEBCAIAKhIOchcRDgIAHwUIACAvBAACACsAwBI-DQAJCAAmAUkBBA8BDwgAIz8bCAEC
ACkUGAsBDwgAIz8VBAACACkcFBEBDwgAG08dDgAMPwEsPwsBCIUCMA4ZAQ8IABUfBYQCbC8NAEQB
CwAiAQA5IiEPS30GPAsBBggAPzEIAQIACQCOIgKeBw8IAAAfMRUBAwQbARAVewgRJUYZAHUICwgA
PzEEAAIACT8UAAQCAAcfMA4BAwQUAUEdAA1gAgAQUB4BEA9MLA8CAAWADwsBDw3xEQ-CKA8CAAgp
8RHEBR4CBAAh8RGlBbQQDTDPDg8hDyQPJggAwPEQyiDKIPEQzinOKXknYvAQ_RDwECwAEA-7GuMP
HQ8hMQ8aAQ8fHxcBCxEAYUEPFS8Y8W4zYRAxAAEAGpsyMhBBMIsAEB58AREZjQBQHkE_8REXAUQU
MAQAAgC0FFAk8BEJAAlgCQACAFMZUCnwEXcAMBoBBmYAIhUxBwDwABEPFgEIAQYPETEIAQbxE2oA
IAAKdgAmChEMACTxE3kAFh6DACTxE3oAJBQQCgBCBPATCTIkAU0aAgoAQg9Q8BN9AKD-FQAoJR8U
KCUXCimR_gDxEP4A-1AAGwFiI0kgWfAPKACgFw0DAQMRDwlhJwgAogzxFxAaAQoRCmEHAIHxFz4B
DhEOYQYA8gHxFxTQFPAeGVAJYBlQCfAXQQAQxL4yENQFAPILBPEQ-wMQ8RAPJbUixSLxELA0sDTw
HD_gsDuJAfIBDx8wPzIPNS85ER8yDzcvOw0A8AchDy0p8RF-BhHWITbxEQkPEAkIHhgRBQAgCQgG
ADMhLgh5ARAAZgcyFAAUDADyByAEEATwEQkPUAkHAAkHCRAJBxkHCRcNACBQB4QB8wIIDTAvOWQf
PR88HzsEDgTPOqAA8geVXxf1APEQn3aAw-AQ_BANDyMfA-AMMABAPC87H1gp8QE4HzcvNc8y8RD2
EPEQDg0JAwAFCADwAh0OvfEQ9AEAFKAE8BAJAAcNAwDBDQAHAA0XAA0QDfAcTQDzEBEfLwEsPy1R
HAEsOvEWFgFmURYBZvEWDgkBDhgOKFEIADHxFBDaADMQBFAIADDwFg1SJxGABgAh8BdMAKAfJhof
MgoZDyss7wIbLw4A8g3xDvYS8Q4HHgk_CR4ZNw4PRAkOCR4JHhknHvEOqQJIABQQNAoAIfAPUTyB
D3AABwIQByJdPCIHAg0AAK4B4QhAPyYPKRohHyYPKxwBDADwAjEPIS8k8RFvAyFLAWsxO-ERCRlB
DgcIIQYAEwEOADIxFx2vAVEkIAQAJHMAwCQwNPARCQcJBykgBwEdAAoAIEAJqQJQCEAkz0W0KfED
D0TPQfEQ_xDxEP8VEPEQ8wAgmwERDxo-KghAlwHlvzLxEf8FD-ER-xUP8RESAgE_Ad_gBPATBxAH
MAcQB-AiOwAIH-g6AA_3ERQBJD89URQBJDW_AXIZAQ4dDi1RBwAPvAEBAZ0oNoAZALwBQM9ULyQE
APIJD1TxD-8BEfEPyS9wySIJ8Q-0EfAcLcAtcAHxIAEPVA8kAW9UASwPJBwKAVwBDCrxEh8BAWsB
awFbATvxEgcCAWcBJwIXAgFXAQcivwDxAWQAZABUADTwEw2wDRANgC32AgECDkBsAQwqCABwHDEM
AQzxE-AEM2sBS-wRMAvxEx8GQGcBByIIACAXMX0fAWMENWQARF8EMCAt8Hg7YkD8BSpcGp0BUfcF
IlcSQwRCJS1QHbgAMRwKAQMAJhEqCgAg8RDsPDErEVsGAGEr8RAXAgEDACYRIgoAkfEQJAAkACQQ
VAYAMCTwEpQ3Qw0QLRAIAABfAGMPDg0wDwxGBrsDAR8TAQ8UAQ8XIxAAMPEQD_4GFQURBxc1DABU
BfEQDgECAAB4Ihc_DAAhDvFRBQICAAAOAhc0DAAB3QMEAgAA_ykXOQwAFAmgACYDAQIAIA8PBxAc
AxIAEPH2Kg8CAAkCbwYPAgAIAlQDDwIACAGIBg8CAAki8BGvACYFAQIAZw8KAQMBBgIATwMBDw6t
AHUbCKwAAIYKFwUCAD8MAQirAHhgAwEfGAMBUAFyGhMaBgEfFgAKUBsWG-EQUCoAjwATZQgAEFWS
AgJOOBNuCAA0XvEQLwUTZAgAJVTwMCITaQgAMVnwEG0AcQ8IAR8UDwj9AgALAJEfCB8UBQEfEwX1
CT8XFRd0AEAoAwECABAGeQAmAgHvEh8FjAFUApUAAgIAE_l8ARAPDQIAAgADagADlQATAtUCHwYn
AnhBD1QBCoAnIQEKMww1OgELDAAxC-EQXCcCAgAAdjUXNwwAEAfBAQXLD3UTAQMBPgEDDAAQA8wB
D8gEDAK7C1cdAA0AOQwAEw3gARARwzsPlwADEhKGAA_UAAFPEg4BA5EABR8QkAAHHxKOABYACAAa
Gw4ABpAAAAIAAKolBw4ABpIAAAgAKRMRDgAHlAAkBABNCwUOAAaWAAAIACkdEA4ABJgAEhqJABAa
UgcnCgEOACfxE8smBgYAMvETHoEAEB43AycOAQ4AMvEREHYDCwYAMvATGXkAEBlVCicJAA4AL-AR
hgALOxvxEoAAAQYAPxfxEoYABQAUAQuAAAEGAD8U8BKGAAUEDAEmCgECAAKJAAgQAF8b8RAHAQIA
CRIX0QIVDp8BApQAGA6vAS8EAAIACRIU2AIVCaYBAqMAHQm2AVcaCwEaGwUA9wYbASvxECcBZwFn
AXcBJ-EQHgMBHhMFADATASOeCABfCad0ACTwEBkNABkdBQAzHQAtWgBzmS8rHywPLwcAY-EQDwYA
DAIAVxwADAA8DAAwDPEQ3gwSAgIAZxkCDgIeGQ0AEQ5YCQ9xCA3xDAgNMO88-0gA8REA-wMO8RHC
APIB8RHAL3PwYB0A8AAfQx88H0EPPC8-HzwUFgE0U6AzHzIJLzMZHzIZ-zIBlx0RJQYAYQUAATAM
EJsAAJ0AoQ8VAgoCCgIaEgoIAFIBOQIZEp8AK-EQLwMWJAwAQPAQD2CpLUEQCw0AAgAgEClkNAIs
SQOyAPAJLzgWAT8-HzgWHz8vOhQBP0EfOhQfQfEQ5yIUAYwACQ0AkvEQChIKAgEKIowACQ0AAsUD
EzCAAAgMADLwGwuLACLwHXgA8wE3HzsBZCEkH0EBf0MPRQ9HcwAzVQAhCADBJfEQDRINAgEiGh0h
CQAyMgpNYAAwYARABgCjNPASK2ALQCtgO8wA8QUGD0MPQQ9DDz8PQwQHBgcPOwcGBwkAV0EHDz8H
EwB-8RAADwUAAwIACWPxEP0B7yVeAQ8CAAgPiz8PH-8BAPNQ-----xs=
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA4LTIyIDE0OjI4OjE1Iixtb2RpZmllZD0iMjAyNS0w
Ny0wMSAyMzoyMjo0NiJdXQ==
:: actors.lua
--[[pod_format="raw",created="2024-08-22 14:19:19",modified="2025-06-26 02:50:47",revision=49780]]
--candles and enemies



function add_cdl(_x,_y,_item)
add (act,{
candle=true,
x=_x,
y=_y,
h=8,
w=8,
itm=_item,
offset=0,
life=1,
flp=false,
sp=65,
tm=rnd(2),
tmmax=2,
tm2=1,
harm=false,
store=0,
pts=0,
yoff=0,

 
update=function(self)
if self.x>camx and self.x<camx+screen then
self.tm+=.15

 if self.tm>=self.tmmax then self.tm=0
 self.tmmax=rnd(2)+1.1
 end
 if self.itm==74 then self.store=self.itm
 end

if cur_stge==1 and cur_flr==1 then 
self.yoff=5
self.sp=80

end

if not clock then
 if self.tm<=1 then self.flp=false
 else self.flp=true 
 
 end
 end
 

 

 
 if self.life<=.5  then
 add_flr(self.x,self.y-2+self.yoff,self.itm,123)

 del(act,self)
 
 end
 
 
 end
end,
draw=function(self)
pal()
--print(self.itm,self.x,self.y-16,7)
--[[
if self.store~=0 then
print("("..self.store..")",self.x,self.y-8,7)
end
--]]
 if self.x>camx and self.x< camx+screen then
 spr(self.sp,self.x,self.y,self.flp)
 end
 
 end
 
 })

end

function add_fir(_x,_y,_flp)

add (act,{
x=_x,
y=_y,
dy=0,
h=4,
w=8,
offset=0,
tall=true,
sp=208,
dx=4,
flp=_flp,
life=.5,
weak=false,
harm=true,
tm2=1,
pts=100,


update=function(self)
self.h=ply.onstr and 9 or 4
self.x+=self.dx
self.tm2+=.1
if clock then self.dx=0
end
if not clock then
if self.flp then self.dx=-1.5
else self.dx=1.5
end
end

if self.tm2>=1 then self.tm2=1
 
 end
if flash then self.life-=100

end
if  self.life<=0 then


add_flr(self.x,self.y-2,spawn_item(),123)

del(act,self)


end
if self.x<camx-20 or self.x>camx+screen then
del(act,self)
end

end,

draw=function(self)

 spr(self.sp,self.x,self.y,self.flp)

 end
 
 })

end

function add_debris(_x,_y,_flp,_dy)

add (act,{
x=_x,
y=_y,
dy=_dy or 0,
h=8,
w=8,
offset=0,
tall=true,
sp=264,
dx=4,
flp=_flp,
life=.5,
weak=false,
harm=false,
tm2=0,
pts=100,
hflp=false,

update=function(self)
self.x+=self.dx
self.y+=self.dy
--self.tm2+=.1
if self.dy>0 then self.hflp=true

end
if self.dy==0 then
self.sp=265
end
if self.flp then self.dx=-1.5
else self.dx=1.5

end

if self.tm2>=1 then self.tm2=1
 
 end
if flash then self.life-=100

end
if  self.life<=0 then


add_flr(self.x,self.y-2,spawn_item(),123)

del(act,self)


end
if self.x<camx-20 or self.x>camx+screen then
del(act,self)
end

end,

draw=function(self)

 spr(self.sp,self.x,self.y,self.flp,self.hflp)

 end
 
 })

end

function add_medusa(_x,_y,_itm,_flp)

add (act,{
x=_x,
y=_y,
itm=spawn_item(),
h=10,
w=8,
offset=0,
sp=222,
dx=0,
dy=1,
dymax=1,
flp=_flp,
life=1,
harm=true,
tm0=0,
pts=300,
trvl=0,
rnge=1,
dir="up",
tm2=1,
weak=false,


update=function(self)
self.x+=self.dx
self.y+=self.dy
self.tm0+=.1
self.trvl+=.02

if self.dy>=0 and self.trvl>=self.rnge then
self.dir="up"
self.trvl=0
elseif self.dy<=0 and self.trvl>=self.rnge then
self.dir="down"
self.trvl=0
end

if self.dir=="down" then self.dy+=.05
elseif self.dir=="up" then self.dy-=.05
end
if self.dy>=self.dymax then self.dy=self.dymax
end
if self.dy<=-self.dymax then self.dy=-self.dymax
end


if clock then
self.tm0=0 
self.dy=0
end

if clock then self.dx=0

else if self.flp then self.dx=-1.3
else self.dx=1.3
end
end

if self.tm0>=1 then 
self.tm0=0
self.sp+=1
 
 end
 if self.sp>223 then
 self.sp= 222
 end
if flash then self.life-=100

end
 if self.life<=.5  then
 
 add_flr(self.x,self.y-2,self.itm)

 del(act,self)
 
 end

if self.x<camx-20 or self.x>camx+screen or boss then



del(act,self)

end

if  cur_stge==9 and ply.x>81*8 then

del(act,self)
end
end,

draw=function(self)

 spr(self.sp,self.x,self.y,self.flp)

 end
 
 })
 
end

function add_bat(_x,_y,_itm,_flp)

add (act,{
x=_x,
y=_y,
itm=spawn_item(),
h=16,
w=8,
offset=0,
sp=211,
dx=0,
dy=-1,
dymax=.5,
flp=_flp,
life=1,
harm=true,
tm0=0,
pts=400,
trvl=0,
rnge=1,
dir="down",
tm2=1,
weak=true,


update=function(self)
self.x+=self.dx
self.y+=self.dy
self.tm0+=.1
self.trvl+=.02

if self.dy>=0 and self.trvl>=self.rnge then
self.dir="up"
self.trvl=0
elseif self.dy<=0 and self.trvl>=self.rnge then
self.dir="down"
self.trvl=0
end

if self.dir=="down" then self.dy+=.025
elseif self.dir=="up" then self.dy-=.025
end
if self.dy>=self.dymax then self.dy=self.dymax
end
if self.dy<=-self.dymax then self.dy=-self.dymax
end


if clock then
self.tm0=0 
self.dy=0
end

if clock then self.dx=0

else if self.flp then self.dx=-1
else self.dx=1
end
end

if self.tm0>=1 then 
self.tm0=0
self.sp+=1
 
 end
 if self.sp>214 then
 self.sp= 211
 end
if flash then self.life-=100

end
 if self.life<=.5  then
 
 add_flr(self.x,self.y+5,self.itm)

 del(act,self)
 
 end

if self.x<camx-20 or self.x>camx+screen then



del(act,self)

end

end,

draw=function(self)

 spr(self.sp,self.x,self.y+6,self.flp)

 end
 
 })

end

function add_egl(_x,_y,_itm,_flp)

add (act,{
x=_x,
carrying=true,
y=_y,
itm=spawn_item(),
h=16,
w=16,
offset=0,
sp=35,
sp2=238,
dx=0,

flp=_flp,
life=1,
harm=true,
tm0=0,
tm1=30,
pts=400,

tm2=1,
tm3=0,


update=function(self)
self.tm3+=2
self.tm0+=1
self.tm1+=1
self.x+=self.dx

if self.tm3>=30 then self.tm3=0
end
if self.tm3>15 then self.sp2=239
else self.sp2=238

end

if abs(ply.x+4-self.x+8)<30 and self.carrying then
add_flmn(self.x+4,self.y+10, self.itm, self.flp, true)
enemies+=1
self.carrying=false

end



if clock then
self.tm3=0
self.tm0=0 
end

if clock then self.dx=0

elseif self.flp then self.dx=-1.5
else self.dx=1.5

end
 if self.tm1>70 then self.dx=0
 end
 
if self.tm1>=90 then self.tm1=0
end
if self.tm0>=30 then 
self.tm0=0
end
if self.tm0>15 then 
self.sp=36
else self.sp=35
 
 end
 
if flash then self.life-=100

end
 if self.life<=.5  then
 
 add_flr(self.x+4,self.y+4,self.itm)
 if self.carrying then
 add_flr(self.x+4,self.y+8,self.itm)
 enemies-=1
 end
 
 del(act,self)
 
 
 end

if self.x<camx-20 or self.x>camx+screen+30 then



del(act,self)

end

end,

draw=function(self)

 spr(self.sp,self.x,self.y,self.flp)
 if self.carrying then
 spr(self.sp2,self.x+4,self.y+16,self.flp)
end
 end
 
 })

end

-- Helper function to spawn a random number of feathers
spawn_feathers = function(self, min_count, max_count)
  local feather_count = flr(rnd(max_count - min_count + 1)) + min_count
  for i = 1, feather_count do
    add_feather(self.x + rnd(8), self.y + rnd(8))
  end
end


function add_rvn(_x,_y,_itm,_flp)

add (act,{
x=_x*8,
y=_y*8,
homing=true,
itm=spawn_item(),
h=16,
w=8,
offset=0,
anm=0,
sp=248,
dx=0,
dy=0,
dxmax=1.8,


flp=_flp,
life=1,
harm=true,
tm0=0,
pts=400,
multx=1,
multy=1,
dir="nil",
pass=0,
tm1=0,
tm2=1,
tm3=0,
weak=true,
state="dormant",
follow="false",
spawn_feathers = function(self, min_count, max_count)
    local feather_count = flr(rnd(max_count - min_count + 1)) + min_count
    for i = 1, feather_count do
      add_feather(self.x + rnd(8), self.y + rnd(8))
    end
  end,

update=function(self)
if not clock then
self.x+=self.dx*self.multx
self.y+=self.dy*self.multy
-- Wind burst: Pop raven into feathers
if (self.state == "wait" or self.state == "follow") and buffet then
  sfx(271, -1) -- Optional squawk/pop sound effect
  self:spawn_feathers(16, 24) -- Spawn a random number of feathers between 8 and 16
  del(act, self) -- Remove raven from playfield
  return -- Exit early since the raven is gone
end
if abs((self.x+4)-(ply.x+4))>40 then self.multx=1.3
 
else self.multx=1


end

if abs((self.y+4)-(ply.y+4))>40 then self.multy=1.6
else self.multy=1
end

if self.dir=="level" then
self.multx=1
self.mult1=1
end

if ply.x+4>self.x+4 then self.flp=false
else self.flp=true
end
if self.dx>=self.dxmax then
self.dx=self.dxmax
elseif self.dx<=-self.dxmax then
self.dx=-self.dxmax

end

if self.anm==1 then self.sp=249
elseif self.anm==2 then self.sp=250
elseif self.anm==3 then self.sp=251
elseif self.anm==4 then self.sp=250
end

if abs(ply.x-self.x)<80 and self.state=="dormant" then

self.tm0+=1
else self.tm0=0
end
if self.state=="wait" then
self.tm3+=1
if self.tm3>=100 and self.state=="wait" then

self.tm3=0
self.state="follow"
if ply.x+4<self.x+4 then
self.dx=-.5
elseif ply.x+4>self.x+4 then
self.dx=.5
end
if abs((ply.y)-(self.y+4))<16 and rnd(1)<.8 then self.dir="level"
elseif ply.y>self.y then
self.dir="down"
self.dy=rnd(1.2)+.5
self.tm3=rnd(10)+30
else 
self.dir="up"
self.dy=rnd(-1.2)-.5
self.tm3=rnd(10)+30
end
end

end
if self.dir=="level" and self.pass<2 then
if ply.x< self.x then self.dx-=.04
else self.dx+=.04
if abs(flr((self.x+4)-(ply.x+4)))<=2 and self.pass<=2 then
self.pass+=1
end

end
end
if self.pass>=1 and abs((self.y+4)-(ply.y+4))>10 and abs((self.x+4)-(ply.x+4))<10 and self.dir=="level" then
if rnd(1)<.05 then
self.dy=0
self.dx=self.dx>0 and 1 or -1
self.pass=0
self.tm3=0
self.state="follow"
if ply.y>self.y then
self.dy=1
self.dir="down"
elseif ply.y<self.y then
self.dy=-1
self.dir="up"

end
end
end

if self.pass>=1 then self.tm3+=1
if self.tm3>=200 then
self.pass=0
self.dir="up"
self.dy-=1
self.tm3=0
self.state="follow"
if ply.x+4<self.x+4 then
self.dx=-.5
elseif ply.x+4>self.x+4 then
self.dx=.5
end

end
end


if self.state=="follow" and self.dir=="down" then
self.dy-=.02
if self.dy<=0 then
self.dy=0
self.dx=0
self.state="wait"
end
end

if self.state=="follow" and self.dir=="up" then
self.dy+=.02
if self.dy>=0 then
self.dy=0
self.dx=0
self.state="wait"
end
end

if self.state~="dormant" then
self.tm1+=1
end

if self.tm0 >=100 and self.state=="dormant" then
self.state="take off"

self.anm=1
self.tm0=0
if ply.y+4<self.y then
self.dy-=1
else self.dy=0
self.tm3=95
end
if ply.x+4<self.x+4 then
self.dx=-.5
elseif ply.x+4>self.x+4 then
self.dx=.5
end
end
if self.state=="take off" then
self.dy+=.02
if self.dy>=0 then 
self.dy=0
self.dx=0
self.state="wait"
end
end





if  self.tm1>=8 then
self.tm1=0
 self.anm+=1
end
if self.anm>4 then self.anm=1
end

end
if flash then self.life-=100

end
 if self.life<=.5  then
 
 add_flr(self.x,self.y+5,self.itm)

 del(act,self)
 
 end

if self.x<camx-20 or self.x>camx+screen and self.dir=="level" then



del(act,self)

end

end,

draw=function(self)

if buffet then self.jiggle=rnd(1)<.3 and -1 or 0
else self.jiggle=0
end

 spr(self.sp,self.x+self.jiggle,self.y+6,self.flp)
--print(tostring(self.state),self.x,self.y,7)
 end
 
 })

end


function add_bat_perch(_x,_y,_item,_dist)

add (act,{
x=_x,
y=_y,
itm=spawn_item(),
h=10,
w=8,
offset=0,
sp=215,
dx=0,
dy=expert and 1.5 or 1,
dymax=expert and -1 or -.5,
flp=_flp,
life=1,
harm=true,
tm0=0,
pts=400,
dist=_dist,
tm2=1,
weak=true,

awake=false,


update=function(self)
if not clock then
if not self.awake then
if ply.x+4> self.x+4 then
self.flp=false
else self.flp=true

end
end
self.combined_distance = abs((self.x + 8) - (ply.x + 4)) + abs((self.y - 8) - (ply.y + 8))

if self.combined_distance < self.dist then
   self.awake = true

end






if self.awake then
self.x+=self.dx
self.y+=self.dy
self.tm0+=.1

if self.tm0>=1 then 
self.tm0=0
self.sp+=1
 
 end
 if self.sp>214 then
 self.sp= 211
 end
 if self.flp then self.dx=expert and -1.5 or -1
else self.dx=expert and 1.5 or 1
end
if  ply.y-(expert and 8 or 4)<self.y then

self.dy-=expert and .1 or .04
if self.dy<-.2 then
self.dy=-.2
end
end

end


end



if flash then self.life-=100


end
 
 if self.life<=.5  then
 
 add_flr(self.x,self.y-2,self.itm)

 del(act,self)
 
 end

if (self.x<camx-20 or self.x>camx+screen) and self.awake then



del(act,self)

end

end,

draw=function(self)

 spr(self.sp,self.x,self.y,self.flp)

 end
 
 })

end
function add_ghst(_x, _y, _itm, _flp)
    add(act, {
        x = _x,
        y = _y,
        itm = _itm,
        h = 10,
        homing=true,
        w = 8,
        offset = 0,
        sp = 230,
        dx = 0,
        dy = 0,
        dxmax = expert and 1 or .5,
        dymax = expert and 1 or .5,
        flp = _flp,
        life = 3,
        harm = true,
        tm0 = 0,
        tm1 = 0,
        pts = 300,
        tm2 = 1,
        smoothing_factor = .7,  -- Smoothing factor for interpolation

        update = function(self)
            self.tm2 += .1
            if self.tm2>=1 then
            self.tm2=1
            
           end

            if not clock and self.tm2 >= 1 then
                if self.tm1 <= 1 then
                    -- Calculate desired direction towards player
                    local target_dx = (ply.x + 4) - (self.x + 4)
                    local target_dy = (ply.y + 12) - (self.y + 4)

                    -- Normalize the target deltas to limit speed
                    local length = sqrt(target_dx^2 + target_dy^2)
                    if length > 0 then
                        target_dx = (target_dx / length) * self.dxmax
                        target_dy = (target_dy / length) * self.dymax
                    end

                    -- Smoothly interpolate the current deltas towards the target deltas
                    self.dx += (target_dx - self.dx) * self.smoothing_factor
                    self.dy += (target_dy - self.dy) * self.smoothing_factor
                end

                -- Update position
                self.x += self.dx
                self.y += self.dy

                -- Update sprite animation timing
                self.tm0 += 1
                self.tm1 += 1

                if self.tm0 > 15 then
                    self.sp = 231
                else
                    self.sp = 230
                end

                if self.tm1 >= 15 then
                    self.tm1 = 0
                end

                if self.tm0 >= 30 then
                    self.tm0 = 0
                end

                -- Flip sprite based on movement direction
                if self.dx > 0 then
                    self.flp = false
                else
                    self.flp = true
                end

                if flash then
                    self.life -= 100
                end
            end

            -- Check if ghost should be removed
            if self.life <= .5 then
                add_flr(self.x, self.y - 2, self.itm)
                del(act, self)
            end

            if self.x < camx - 20 or self.x > camx + screen then
                del(act, self)
            end
        end,

        draw = function(self)
            spr(self.sp, self.x, self.y, self.flp)
          
        end
    })
end


function add_zom(_x,_y,_item,_flp)

add (act,{
x=_x,
y=_y,
h=17,
offset=0,
yoff=0,
itm=_item,
pts=100,
w=8,
sp=195,
dx=.55,
dy=0,
harm=true,
life=1,
tm1=0,
tm2=1,
flp=_flp,



update=function(self)

self.x+=self.dx
self.y+=self.dy
self.dy+=grav

self.tm2+=.1

if clock then 
self.dx=0
self.tm1+=0
else 
self.dx=.55
self.tm1+=.035
end


if not self.flp then
self.dx=self.dx
elseif self.flp then
self.dx=-self.dx

end
if camx==camxmax then
if self.x<=camx+4 then 
self.flp=false

end

end 
if self.tm1>=1 then
self.tm1=0

end

if self.tm1>=.5 then
self.sp=196
elseif self.tm1<=.5 then
self.sp=195

end

if self.tm2>=1 then self.tm2=1
 
 end

---[[
 if collide_map(self,"down",0) and self.dy>0 
then
self.dx=self.dx
self.dy=0 
self.y-=flr((self.y+self.h)%8)
else
self.dx=0
end

 if collide_map(self,"right",0) and not self.flp
then

self.flp =true
end

 if collide_map(self,"left",0) and self.flp
then

self.flp =false
end

if flash and self.active then self.life-=100
 
 end
  if flash then self.life-=100
 
 end
 
 if self.life<=.5  then
 enemies-=1
 add_flr(self.x,self.y-2,self.itm)

 del(act,self)
 
 end

if tran or self.x<camx-20 or self.x>camx+250 then
enemies-=1
del(act,self)

end

if level==68 and ply.x>310 then
enemies-=1
del(act,self)

end

--]]
end,

draw=function(self)

 spr(self.sp,self.x,self.y+1,self.flp)

 end
 
 })

end



function add_knt(_x,_y,_item,_flp)

add (act,{
x=_x,
y=_y,
h=16,
anm=1,
offset=0,
yoff=0,
itm=_item,
pts=400,
w=10,
sp=235,
dx=.55,
dy=0,
harm=true,
life=3.5,
tm1=0,
tm2=1,
tm3=0,
flp=_flp,



update=function(self)

self.x+=self.dx
self.y+=self.dy
self.dy+=grav

self.tm2+=.1
self.tm3+=.03

if (clock or self.tm2<1) then 
self.dx=0
self.tm1+=0
else 
self.dx=.55
self.tm1+=.075 
end

if self.anm==1 then self.sp=235
elseif self.anm==2 then self.sp=236
elseif self.anm==3 then self.sp=237
elseif self.anm==4 then self.sp=236

end

if self.tm3>1.9 and abs(self.x+4-ply.x+4)<=80 then
if abs(ply.y+4-self.y)<=8 then
self.tm3=rnd(1.2)
if (ply.x+4<self.x+4 and not self.flp) or (ply.x+4>self.x+4 and self.flp) then
 self.flp=not self.flp

end
end 
end
if self.tm3>2 then self.tm3=2

end
if not self.flp then
self.dx=self.dx
elseif self.flp then
self.dx=-self.dx

end



if self.tm1>=1 then
self.tm1=0
self.anm+=1

end

if self.anm>4 then self.anm=1

end 
if self.tm2>=1 then self.tm2=1
 
 end


 if collide_map(self,"down",0) and self.dy>0 
then
self.dx=self.dx
self.dy=0 
self.y=flr(self.y+self.h%8)
else
self.dx=0
end

 if collide_map(self,"right",0) and not self.flp
then

self.flp =true
end

 if collide_map(self,"left",0) and self.flp
then

self.flp =false
end

if flash and self.active then self.life-=100
 
 end

  if not collide_map(self,"down",0) and self.dy<=.1
   then self.flp= not self.flp
if self.flp then self.x-=2
elseif not self.flp then self.x+=2

end
end
  if flash then self.life-=100
 
 end
 
 if self.life<=.5  then
 
 add_flr(self.x,self.y-2,self.itm)

 del(act,self)
 
 end

if (tran or door) then

del(act,self)

end


--]]
end,

draw=function(self)

 spr(self.sp,self.x,self.y,self.flp)

 end
 
 })

end

function add_skel(_x,_y,_item,_flp)

add (act,{
x=_x,
y=_y,
h=16,
yoff=4,
anm=1,
offset=0,
itm=_item,
pts=300,
w=8,
land=true,
sp=252,
dx=0,
spd=1.1,
dy=0,
maxdy=2.4,
harm=true,
life=1,
tm0=5,
tm1=0,
tm2=1,
tm3=0,
tm4=0,
flp=_flp,
dxmax=1,
throw=0,
move=false,
dist="far",
rev=false,
bones=1,

update=function(self)
if not clock then
self.x+=self.dx
self.y+=self.dy
self.dy+=grav
self.tm1+=1
self.tm3+=1

if self.tm3>=(expert and 15 or 20) then
    self.tm3=0
end

if not self.move then
    self.tm4+=1
end

if self.flp then
    self.throw=rnd(-1.2)-.5
else
    self.throw=rnd(1.2)+.5
end

if self.dy >= self.maxdy then
    self.dy = self.maxdy
end

if (self.dist == "far" and self.flp) then
    self.dx = -self.spd
elseif (self.dist == "far" and not self.flp) then
    self.dx = self.spd
end

if self.dist == "close" then
    if self.flp then
        self.dx = self.spd
    else
        self.dx = -self.spd
    end
end

if self.rev then
    self.dx = -self.dx
end

if self.tm3 > 3 or not self.land then
    self.move = true
else
    self.move = false
end

if self.tm4 >=(expert and 10 or 15) then
    self.tm4 = 15
    self.move = false
    self.tm0 -= 1

    if self.tm0 == 0 and self.dist~="too far" then
        add_bone(self.x-1, self.y - 4, self.throw)
        self.bones -= 1
        self.tm0 = 10
        if self.bones <= 0 then
            self.bones = flr(abs(rnd(4)))
            self.tm4 = 0
        end
    end
end

if not self.move then
    self.rev = false
    self.dx = 0
end

if not self.move then
    local distance = abs((self.x + 4) - (ply.x + 4))
    if distance <= 50  then
        self.dist = "close"
        elseif distance>100 and self.land then
        self.dist="too far"
        self.tm0=10
      
    elseif distance >= 55 then
        self.dist = "far"
    end
end

if abs((self.x + 4) - (ply.x + 4)) <= 8 and self.land then
    self.dist = "too close"
end



if self.dist == "too close" then
    self.dx = 0
    if not self.flp then
        -- Only move left if there isn't a collision on the left
        if not collide_map(self, "left", 0) then
            self.x -= 1.3
        end
    else
        -- Only move right if there isn't a collision on the right
        if not collide_map(self, "right", 0) then
            self.x += 1.3
        end
    end
end

if self.tm1 == 30 then
    self.tm1 = 0
end

if self.tm1 >= 15 then
    self.sp = 253
else
    self.sp = 252
end

if self.land then
self.dy=0
    if self.x + 4 < ply.x + 4 then
        self.flp = false
    else
        self.flp = true
    end
end

if collide_map(self, "down", 0) then
    
    self.y = flr((self.y + self.h) / 8) * 8 - self.h
    self.land = true
end
if  (self.dist=="too far" and (wpncnt~=0 and ply.thw and not (ply.wpn==2 or ply.wpn==4))) 
and (self.x+2<camx+screen and self.x+self.w>camx) and self.land
and abs((ply.y+4)-self.y)<16  then
if (ply.x<self.x and not ply.flp) or (ply.x>self.x and ply.flp) then
self.dy-=3

self.land=false

end



end

if not collide_map(self, "down", 0) and self.land  then
    if self.dist ~= "too close" then
        self.dy -= 1.8
        self.land = false
    end
end

if self.dy >= 0 then
    if collide_map(self, "right", 0)  then
   self.x-=1
        self.rev = true
        if not (self.land or self.dy>0) then
        if self.dist~="too close" then
            self.x-=3
            self.dx=0
            self.dy = -2
            end
        end
    elseif collide_map(self, "left", 0) then
    
        self.rev = true
        self.x += 2
        if not (self.land or self.dy>0) then
        if self.dist~="too close" then
            self.dx=0
            self.dy = -2
            end
        end
    end
end
end
if flash and (self.x+1<camx+screen and self.x+self.w-1>camx) then
    self.life -= 100
end

if self.life <= 0.5 then
    add_flr(self.x, self.y - 2, self.itm)
    del(act, self)
end

if tran or door or boss then
    del(act, self)
end

end,

draw=function(self)
    spr(self.sp, self.x, self.y, self.flp)

end

})

end

function add_rskel(_x,_y,_item,_flp)

add (act,{
  x=_x,
  y=_y,
  h=16,
  yoff=4,
  offset=0,
  spoff=0,
  itm=_item,
  revive=false,
  revivecnt=0,
  pts=400,
  w=10,
  sp=nil,
  dx=.55,
  dy=0,
  life=0,
  tm0=0,
  tm1=0,
  tm2=1,
  flp=_flp,

  update=function(self)
if not clock then
    self.x += self.dx
    self.y += self.dy
    self.dy += grav

    self.tm2 += .1
    if self.revivecnt==0 and abs((self.x+4)-(ply.x+4))>130 then
    self.tm0=0
   end

    if  self.tm2 < 1 then 
      self.dx = 0
      self.tm1 += 0
    else 
      self.dx = .55
      self.tm1 += 1
    end

    if self.revivecnt < 2 then
      self.pts = 100
    else
      self.pts = 25
    end

    if self.revive and self.tm0 > 59 then
      self.offset = 0
      self.spoff=0
      if revivecnt == 0 then
        self.life = 1
      else
        self.life = .5
      end

      self.tm1 = 10
      self.revivecnt += 1
      self.tm2 = 1
      self.harm = true

      if (ply.x + 4 < self.x + 4 and not self.flp) or (ply.x + 4 > self.x + 4 and self.flp) then
        self.flp = not self.flp
      end
      self.revive = false
    end

    if self.life >= .5 or self.revive then
      self.tm0 += 1
    elseif self.life == 0 then
      self.tm0 -= 1
    end

    if self.tm0 >= 60 then
      self.tm0 = 60
    elseif self.tm0 <= -60 then 
      self.tm0 = -60
      self.revive = true
    end

    if self.tm1 > 10 then
      self.dx = .55
    else
      self.dx = 0
    end

    if self.tm0 < 59 then
      self.harm = false
      self.tm2 = 0
      self.dx = 0
    end
end
    if self.life == 0 then
    self.harm=false
      self.offset = 8
      self.spoff=8
      if self.tm0 > 10 then
        self.sp = 40
      else
        self.sp = 48
      end
    end

    if self.life ~= 0 then
      if self.tm1 <= 19 and abs(self.x + 4 - ply.x + 4) <= 80 and rnd(1) < .05 then
        if abs(ply.y + 4 - self.y) <= 8 then
          if (ply.x + 4 < self.x + 4 and not self.flp) or (ply.x + 4 > self.x + 4 and self.flp) then
            self.flp = not self.flp
          end
        end
      end 
    end

    if not self.flp then
      self.dx = self.dx
    elseif self.flp then
      self.dx = -self.dx
    end

    if self.tm1 >= 70 then
      self.tm1 = 0
    end

    if self.life >= .5 then
      if self.tm1 > 40 and self.tm1 < 59 then
        self.sp = 253
      else
        self.sp = 252
      end
    end

    if self.life <= 0 then
      self.life = 0
    end

    if collide_map(self, "down", 0) and self.dy > 0 then
      self.dx = self.dx
      self.dy = 0 
      self.y = flr(self.y + self.h % 8)
    else
      self.dx = 0
    end

    if collide_map(self, "right", 0) and not self.flp then
      self.flp = true
    end

    if collide_map(self, "left", 0) and self.flp then
      self.flp = false
    end

    if flash and self.active then
      self.life -= 100
    end

    if not collide_map(self, "down", 0) and self.dy <= .1 then
      self.flp = not self.flp
      if self.flp then
        self.x -= 2
      elseif not self.flp then
        self.x += 2
      end
    end

    if flash then
      self.life = 0
    end

    if (tran or door) then
      del(act, self)
    end

  end,

  draw=function(self)
    pal(6,24)
    pal(7,8)
    pal(5,2)
    pal(21,1)
    pal(29,18)
    pal(13,2)
    
--    print(self.spoff,self.x,self.y-16,7)
    spr(self.sp, self.x, self.y + self.spoff, self.flp)
   
	pal()  
  end

})

end


function add_bone(_x,_y,_dx)

add (act,{
x=_x,
fireball=true,
y=_y+4,
h=10,
w=8,
pts=50,
offset=0,
dx=_dx,
dy=-3+rnd(0.5),
harm=true,
sp=29,
flpx=false,
flpy=false,
tm0=0,
tm1=0,
tm2=1,
frm=1,
life=1,

update=function(self)
    if not clock then
    self.y += self.dy
    self.dy += grav
    self.x += self.dx
    self.tm0 += 0.01
    self.tm1 += 0.3 * self.dx

    if self.tm0 >= 0.15 then
        self.tm0 = 0
    end

    if self.tm1 >= 1 then
        self.tm1 = 0
        self.frm += 1
    elseif self.tm1 <= 0 then
        self.tm1 = 1
        self.frm -= 1
    end

    self.frm = ((self.frm - 1) % 4) + 1
    self.sp = 28 + self.frm + (self.frm > 2 and 6 or 0)
end
    if flash then
        self.life -= 100
    end

    if self.life <= 0.5 then
        add_flr(self.x + 5, self.y + 4, spawn_item())
        del(act, self)
    end

    if tran or (self.x < camx - 100 or self.x > camx + 300 and self.awake or self.y > 140) then
        del(act, self)
    end
end,

draw=function(self)
    spr(self.sp, self.x , self.y+4, self.flpx, self.flpy)
end

})

end




function add_skdrgn(_x, _y, _itm, _flp)
    add(act, {
       x = _x * 8,
        y = _y * 8,
        w = 8,
        h = 8,
        sp = 295,
        dragon = true,
        armor=true,
        fire = 0,
        flp = _flp,
        itm = rnd(1)<.99 and spawn_item() or 78,
        life = 14,
        harm = true,
        length = 0,
        origin = 0,
        dy = 0,
        spd=1,
        set_origin = false,
        tm0 = 0,
        tm1 = 0,
        tm2 = 0, -- Increment for damage state and stun
        fire_timer = 0,
        move_timer = flr(rnd(30)), -- Initial random timer
        pause_timer = 0,
        max_length = 60, -- Number of segments
        max_vertical_dist =isdemo and 5 or 15, -- Lower limit is now half of the upper limit
        upper_vertical_dist =isdemo and 10 or 30, -- Upper limit is now 30
        fire_interval = flr(rnd(20) + 10),
        sprite_interval = 90,
        pts = 1000,
        segments = {},
        anchor_planted = false,
        anchor = nil,

        update = function(self)
            -- Incremental timers
             self.tm2 = min(self.tm2 + 0.1, 1) -- Increment tm2 up to 1
            if not clock then
            self.tm1 += 1
            self.tm0 += 1
           
            self.move_timer = (self.move_timer + 1) % flr(rnd(20) + 10) -- Randomize movement timer

            -- Stun behavior
            if self.tm2 < 1 then
                return -- Stunned, no movement or action
            end

            -- Smooth length growth if player is nearby
            if abs((ply.x + 4) - self.x) < 70 then
                self.length = min(self.length + 1, self.max_length)
                if self.length < self.max_length then
                    self.x -= .7
                    
                end
                
            end
            

           if not self.anchor_planted and abs(ply.x - self.x) < 70 then
                self.anchor_planted = true
                self.anchor = add_segment(self.x, self.y, true) -- Create anchor as a segment actor
                add(self.segments, self.anchor) -- Add anchor as the first segment
            end

            -- Add remaining segments
            if self.anchor_planted then
                local segment_count = 5 -- Fixed number of segments
                if #self.segments < segment_count + 1 then -- Add segments as needed
                    self.segments = {self.anchor} -- Reset segments to only include the anchor
                    for i = 1, segment_count do
                        add(self.segments, add_segment(self.anchor.x, self.anchor.y, false, i * 2, segment_count - i + 1))
                    
                    end
                end

            local total_segments = #self.segments - 1
local spring_constant = .3     -- How quickly segments' y converge to the ideal position
local wave_amplitude = 4          -- Maximum vertical wave offset (in pixels)
local wave_frequency = 0.05        -- Speed of the oscillation
local phase_offset = .75          -- Phase difference between segments

-- Update the global timer for wave animation:
self.tm0 = (self.tm0 or 0) + 0.1
-- Determine desired multiplier based on current vertical movement
local desired_multiplier = (self.dy < 0) and -1 or 1

-- Initialize self.wave_multiplier if it doesn't exist
self.wave_multiplier = self.wave_multiplier or desired_multiplier

-- Smoothly interpolate the multiplier (adjust 0.2 as needed for smoothness)
self.wave_multiplier = lerp(self.wave_multiplier, desired_multiplier, 0.2)
for i = 2, #self.segments do
    local seg = self.segments[i]
    
    -- Calculate the fraction along the chain for spacing (using original lerp for x)
    local t = (i - 1) / (total_segments + 1)
    
    -- Set x using original lerp to maintain spacing:
    seg.x = lerp(self.anchor.x, self.x, t)
    
    -- Calculate the ideal y position from the anchor to the head:
    local ideal_y = lerp(self.anchor.y, self.y, t)
    
    -- Now compute a dampening factor influenced by both the anchor and the head.
    -- This uses a sine curve that yields 0.5 at both endpoints (anchor and head)
    -- and peaks at 1 in the middle.
    local t_damp = (i - 1) / (#self.segments - 1)
    local damp_factor = 0.2 + 0.5 * math.sin(math.pi * t_damp)
    local seg_wave_multiplier = (self.dy < 0) and -1 or 1
    -- Update y using a spring effect toward ideal_y, plus the sine wave offset scaled by the damp factor.
   seg.y = seg.y + (ideal_y - seg.y) * spring_constant 
         + math.sin(self.tm0 * wave_frequency + i * phase_offset) * wave_amplitude * damp_factor * self.wave_multiplier


end






            end

            -- Only move when at max length
            if self.length >= self.max_length then
                if not self.set_origin then
                    self.origin = self.y
                    self.set_origin = true
                end

                -- Pause behavior
                if self.pause_timer > 0 then
                    self.pause_timer -= 1
                    self.y += rnd({-0.2, 0.2}) -- Small judder during pause
                    return
                end

                -- Adjust direction every randomized frames
                if self.move_timer == 0 then
              
                    if self.y >= self.origin + self.upper_vertical_dist then
                        if ply.y + 8 > self.origin + self.upper_vertical_dist then
                            self.dy = 0 -- Stay still at max up if player is up
                        else
                            self.dy = -self.spd -- Move up
                            
                        end
                        self.pause_timer = flr(rnd(10) + 10) -- Pause after reaching max
                    elseif self.y <= self.origin - self.max_vertical_dist then
                        if ply.y + 8 < self.origin - self.max_vertical_dist then
                            self.dy = 0 -- Stay still at max down if player is down
                        else
                            self.dy = self.spd -- Move down
                        end
                        self.pause_timer = flr(rnd(10) + 10) -- Pause after reaching max
                    else
                        if self.y > ply.y + 8 then
                            self.dy = -self.spd -- Move up
                        elseif self.y < ply.y + 8 then
                            self.dy = self.spd -- Move down
                        else
                            self.dy = 0 -- Stay still if aligned
                            self.pause_timer = 15 -- Pause when aligned
                        end
                    end
                end

                -- Tend towards player alignment
                if self.dy == 0 and abs(self.y - (ply.y + 8)) > 5 then
                    self.dy = (self.y > ply.y + 8) and -self.spd or self.spd
                end

                -- Add judder effect at max positions
                if self.dy == 0 and (self.y >= self.origin + self.upper_vertical_dist or self.y <= self.origin - self.max_vertical_dist) then
                    self.y += rnd({-0.5, 0.5}) -- Small judder movement
                end

                -- Enforce clamping to max vertical range
                if self.y + self.dy > self.origin + self.upper_vertical_dist then
                    self.y = self.origin + self.upper_vertical_dist
                elseif self.y + self.dy < self.origin - self.max_vertical_dist then
                    self.y = self.origin - self.max_vertical_dist
                else
                    self.y += self.dy
                end

                -- Sprite switching
                self.sp = self.tm0 % self.sprite_interval < self.sprite_interval / 2 and 295 or 287
            end

-- Compute head's wavy y-position for fireball spawn:
-- Set up head drawing y-coordinate based on self.tm2
 local head_wave_amplitude = self.tm2>.8 and 4 or 0      -- same value as before
    local head_wave_frequency = self.tm2>.8 and 0.05 or 0
    local head_wave_multiplier = (self.dy < 0) and -1 or 1
local head_draw_y = self.y          -- Default: no wave



-- Use head_draw_y for fireball spawn:
if math.abs(self.tm0 % self.fire_interval) < 0.7 and self.sp == 287 and ply.x + 4 < self.x then
    self.fire += 1
    if self.fire >= 2 and not isdemo then
        add_hmng_fir(self.x + 2, head_draw_y, 4)  -- Spawn fireball using the head's drawn y
        self.fire = 0
    end
end


            -- Handle out-of-bounds cleanup
            if self.length == self.max_length then
                if tran or door then
                    del(act, self)
                end
            end
end
            -- Handle health and destruction
            if flash then self.life -= 100 end
            if self.life <= 0 then
            for s in all(act)do
            if s.segment then
            add_flr(s.x, s.y, self.itm)
            del(act,s)
            
          end
          end
                add_flr(self.x, self.y, self.itm)
                del(act, self)
            end
        end,

        draw = function(self)
          for seg in all(self.segments) do
                spr(seg.sp, seg.x, seg.y)
            end
            -- Draw head
         
           if self.length >= 1 then
    local head_wave_amplitude = self.tm2>.8 and 4 or 0      -- same value as before
    local head_wave_frequency = self.tm2>.8 and 0.05 or 0
    local head_wave_multiplier = (self.dy < 0) and -1 or 1
    local head_draw_y = self.y + math.sin(self.tm0 * head_wave_frequency) * head_wave_amplitude
    spr(self.sp, self.x, head_draw_y, self.flp)
end

        end
    })
end

function add_segment(_x, _y, is_anchor,_delay, id)
    local segment = {
        segment=true,
        id=id or 0,
        offset=0,
        x = _x,
        y = _y,
        w = 8,
        h = 8,
        sp = 303,
        life=1,
        tm1=0,
        tm2=1,
        pts=25,
        harm = not is_anchor, -- Only segments (not the anchor) cause harm
        delay = _delay or 0,

        update = function(self)
        offset=self.id*5
        self.tm1=self.offset
         self.tm2+=.1
         if self.tm2>=1 then self.tm2=1
        self.life+=1
        if self.life>=1 then self.life=1
     end
         end   -- Add specific segment logic here if needed
        end,

        draw = function(self)
       -- print(self.id,self.x,self.y-8,7)
            spr(self.sp, self.x, self.y)
        end 
    }
    add(act, segment) -- Add to global actor list
    return segment
end
-- movement wave testing
function lerp(a, b, t)
    return a + (b - a) * t
end



function add_aknt(_x,_y,_item,_flp)

add (act,{
x=_x,
y=_y,
fireball=true,
armor=true,
knight=true,
h=16,
yoff=4,
anm=1,
offset=0,
itm=_item,
pts=1000,
w=16,
land=true,
sp=46,
dx=0,
spd=expert and .9 or .6,
dy=0,
maxdy=2.4,
harm=true,
life=14,
tm0=5,
tm1=0,
tm2=1,
tm3=0,
tm4=0,
flp=_flp,
dxmax=1,
throw=expert and 1.5 or 1,
move=false,
dist="far",
rev=false,
axes=expert and 2 or 1,

update=function(self)
if rnd(1)<.50 then
self.offset=10
else self.offset=3
end
self.tm2+=.1
if self.tm2>=1 then self.tm2=1
end

if not clock and self.tm2==1 then
self.x+=self.dx
self.y+=self.dy
--self.dy+=grav
self.tm1+=1
self.tm3+=.5
if self.dist~="too far" then
self.tm4+=1
end

if self.life<=3.5 then
self.armor=false
end
if self.tm3>=10 then
    self.tm3=0
end


if self.axes>=(expert and 2 or 1) then self.axes=expert and 2 or 1
elseif self.axes<0 then self.axes=0

end


if self.dy >= self.maxdy then
    self.dy = self.maxdy
end

if (self.dist == "far" and self.flp) then
    self.dx = -self.spd
elseif (self.dist == "far" and not self.flp) then
    self.dx = self.spd
end

if self.dist == "close" then
    if self.flp then
        self.dx = self.spd
    else
        self.dx = -self.spd
    end
end

if self.rev then
    self.dx = -self.dx
end

if self.tm3 > 2  then
    self.move = true
else
    self.move = false
end

---[[
if self.tm4 >(expert and 90 or 180) then
if self.axes>0 then
   
    self.move = false
    end
   if self.tm4>=(expert and 115 or 200) and self.axes~=0 and self.dist~="too far" then
   self.axes-=1
   if ply.x+4<self.x+8  then
   add_kntaxe(self.x+4,self.y-10+self.offset,-2,"left")
   elseif ply.x+4>self.x+8  then
   add_kntaxe(self.x+12,self.y-10+self.offset,2,"right")
   end
   self.tm4=0
   end
end
if self.tm4>=(expert and 150 or 200) and self.axes<=(expert and 2 or 1) or self.dist=="too far" then
self.axes+=expert and 2 or 1
self.tm4=100
end


--]]
if not self.move then
    self.rev = false
    self.dx = 0
end

if not self.move then
    local distance = abs((self.x + 4) - (ply.x + 4))
    if distance <= 50  then
        self.dist = "close"
        elseif distance>130 and self.land then
        self.dist="too far"
        self.tm0=10
      
    elseif distance >= 55 then
        self.dist = "far"
    end
end



if self.tm1 == 30 then
    self.tm1 = 0
end

if self.tm1 >= 15 then
    self.sp = 55
else
    self.sp = 46
end

if self.land then
self.dy=0
    if self.x + 4 < ply.x + 4 then
        self.flp = false
    else
        self.flp = true
    end
end

if collide_map(self, "down", 0) then
    
    self.y-=flr((self.y+self.h-16)%8)
    self.land = true

else self.land=false


end

if not collide_map(self, "down", 0) and self.dist=="close" then

if self.flp then
self.x-=2
else self.x+=2
end



self.dist="far" 



end

if not collide_map(self, "down", 0) and self.dist=="far" then

if self.flp then
self.x+=2
else self.x-=2
end



self.dist="close" 



end
if self.dy >= 0 then
    if collide_map(self, "right", 0)  then
   self.x-=1
        self.rev = true
        if not (self.land or self.dy>0) then
        if self.dist~="too close" then
            self.x-=3
            self.dx=0
           -- self.dy = -2
            end
        end
    elseif collide_map(self, "left", 0) then
    
        self.rev = true
        self.x += 2
        if not (self.land or self.dy>0) then
        if self.dist~="too close" then
            self.dx=0
--            self.dy = -2
            end
        end
    end
end
end
if flash and self.x+4<camx+screen and self.x+self.w>camx  then
    self.life -= 100
end

if self.life <= 0.5 then
    add_flr(self.x+4, self.y+4, self.itm)
    del(act, self)
end

if tran or door then
    del(act, self)
end
if boss then
self.x+=1
if self.x> camx+screen then
del(act,self)
end
end

end,

draw=function(self)
    spr(self.sp, self.x, self.y, self.flp)
--    print(self.axes, self.x, self.y - 8)
--    print("Hello!", self.x-30, self.y - 24)
    --print(self.tm4, self.x, self.y - 16)
end

})

end

--axe knight axes

function add_kntaxe(_x,_y,_dx,_dir)

add (act,{
x=_x,
y=_y+4,
--fireball=true,
h=12,
w=10,
pts=50,
anm=1,
dir=_dir,
offset=0,
rtndx=expert and .35 or .03,
dx=_dx,
dxmax=expert and 1.5 or 1,
flpx=false,
flpy=false,
harm=true,
sp=106,
flpx=false,
flpy=false,
tm0=0,
tm1=0,
tm2=1,
frm=1,
life=1,

update=function(self)
if self.anm==1 then self.flpx=false self.flpy=false
elseif self.anm==2 then self.flpx=false self.flpy=true
elseif self.anm==3 then self.flpx=true self.flpy=true
elseif self.anm==4 then self.flpx=true self.flpy=false

end
self.h=ply.dck and 5 or 12
    if not clock then
    self.tm1+=1
    self.x += self.dx
    self.tm0 +=expert and 0.05 or 0.03
    if self.dx>self.dxmax then self.dx=self.dxmax
    elseif self.dx<-self.dxmax then self.dx=-self.dxmax
    end

    if self.tm0 >= 0.15 then
        self.tm0 = 0
        self.anm+=1
    end
if self.tm1>=(expert and 30 or 70) then self.rtn=true
end

if self.rtn then 
if self.dir=="left" then self.dx+=self.rtndx
elseif self.dir=="right" then self.dx-=self.rtndx

end
end

   if self.anm>4 then self.anm=1
   end
    
end
    if flash then
        self.life -= 100
    end

    if self.life <= 0.5 then
        add_flr(self.x , self.y + 2,spawn_item())
        del(act, self)
    end

 if  tran or (self.x < camx - 10 or self.x > camx + 300) then
        del(act, self)
    end
    for other in all(act) do
    if self.rtn and other.knight then
    if hit_weapon(self.x+4,self.y,self.w-4,self.h,other.x+8,other.y-6,other.w-8,other.h) then
    other.axes+=1
    del(act,self)
    end
    end
    end
end,

draw=function(self)
    spr(self.sp, self.x+2 , self.y+3, self.flpx, self.flpy)
--rect(self.x,self.y,self.x+self.w,self.y+self.h,7)
end

})

end

function add_cat(_x,_y,_item,_flp)

add (act,{
x=_x,
y=_y,
h=16,
yoff=0,
offset=0,
short=true,
itm=_item,
pts=200,
w=16,
sp=204,
anm=0,

dx=0,
dxadd=1.3,
dy=0,
harm=true,
life=1,
tm1=0,
tm2=1,
tm3=0,
awake=false,

flp=_flp,


--]]
update=function(self)
if not clock then
self.x+=self.dx
self.y+=self.dy
self.dy+=grav
---[[
if self.anm==0 then self.sp=204
elseif self.anm==1 then self.sp=205
elseif self.anm==2 then self.sp=206
elseif self.anm==3 then self.sp=207

end
--]]

if self.awake then

if self.flp then 
self.dx=-self.dxadd
else self.dx=self.dxadd
end

end
if flr(abs(ply.x+4-self.x+4))<=40 then
self.awake=true


end
if self.awake and self.land then
self.tm1+=.15

end

if self.tm3>=1 then
self.tm3=1
end
 
if self.tm1>=1 then
self.anm+=1
self.tm1=0

end

if self.anm>=4 then
self.anm=1
end

if self.tm2>=1 then self.tm2=1
 
end
 

if self.land then self.tm3+=.1
else self.tm3=0
end

if collide_map(self,"down",0) then

self.dx=self.dx
self.dy=0 
self.y-=flr((self.y+self.h)%8)
self.land=true
	if self.tm3<=.1 and not ply.ded then
		if ply.x+4>self.x+4 then self.flp=false
		elseif ply.x+4<self.x+4 then self.flp=true
		end				
	end

	else
   self.anm=1

end

if not collide_map(self,"down",0) and  self.land then
self.dy=-1
self.land=false

end
end
if flash and self.active then self.life-=100
 
 end
  if flash then self.life-=100
 
 end
 
 if self.life<=.5  then

 add_flr(self.x+5,self.y+4,self.itm)

 del(act,self)
 
 end

if tran or (self.x<camx-100 or self.x>camx+300 and self.awake) then

del(act,self)

end


end,

draw=function(self)

 spr(self.sp,self.x,self.y+8,self.flp)

 end
 
 })

end


function add_flmn(_x, _y, _item, _flp,_awake)
    add(act, {
        x = _x,
        y = _y,
        h = 8,
        offset = 0,
        yoff=0,
        short = true,
        itm = _item,
        pts = 500,
        w = 8,
        sp = 238,
        anm = 0,
        intercept = false,
        dx = 0,
        dy = 0,
        harm = true,
       
        life = 1,
        tm0 = 0,
        tm1 = 0,
        tm2 = 1,
        tm3 = 0,
        set = 1.5,
        awake = _awake or false, -- Set awake based on parameter
        state =  "wait", -- Immediate state setting
        retreat = false,
        flp = _flp,

        update = function(self)
      
            if not clock then
                self.x += self.dx
                self.y += self.dy
                self.dy += grav

                self.tm0 += 1
                -- Handle retreat state when player is blinking
                if self.land and self.state~="wait" then
                    if ply.blk or ply.ded  then
                        self.retreat = true
                    else
                        self.retreat = false
                    end
                end
                -- Determine if Fleaman should wake up
                if flr(abs(ply.x + 4 - self.x + 4)) <= 100 then
                    self.tm3 += 1
                end

                if self.tm3 >= 70 then
                    self.tm3 = 70
                    self.awake = true
                end

                if self.state == "wait" then
                    self.set = 0
                end

                -- Set intercept flag based on player direction and position
                if ply.flp then
               
                    self.intercept = self.x+4 < ply.x-4
                else
                    self.intercept = self.x+4 > ply.x+12
                
                end

                -- Determine movement direction based on retreat or normal state
                if self.land then
                    self.dy = 0
                    self.dx = 0
                elseif not self.land then
                    if self.retreat then
                        -- Move away from player when retreating
                        if self.x < ply.x then
                            self.dx = -self.set  -- Move left if player is to the right
                            self.flp = true      -- Face away from the player (to the left)
                        else
                            self.dx = self.set   -- Move right if player is to the left
                            self.flp = false     -- Face away from the player (to the right)
                        end
                    else
                        -- Normal movement
                        if self.flp then
                            self.dx = -self.set
                        else
                            self.dx = self.set
                        end
                    end
                end

                if self.tm0 >= 15 then
                    self.tm0 = 0
                end

                if self.state == "wait" then
                    if self.tm0 > 6 then
                        self.sp = 239
                    else
                        self.sp = 238
                    end
                    if self.awake then
                        self.sp = 238
                        self.state = "jump"
                    end
                end

                if self.state == "jump" and self.land then
                    self.sp = 238
                    self.tm1 += 2
                    if self.tm1 > 29 then
                        self.sp = 239
                        self.land = false
                        self.tm1 = 0
                        -- Flip direction based on player's position
                        if self.x + 4 < ply.x + 4 then
                            self.flp = false
                        elseif self.x + 4 > ply.x + 4 then
                            self.flp = true
                        end

                        if self.retreat then
                            -- Higher jump when retreating
                            self.dy -= .9 + rnd(0.2)
                            self.tm1 = 24 + flr(rnd(5))
                            self.set = 1.5 + rnd(0.5)
                        elseif self.intercept then
                            -- If intercept is true (Fleaman is in front of player), perform a big jump
                            if flr(abs((ply.x + 4) - (self.x + 4))) <= 30 and not ply.hrt then
                                self.dy -= 2.4 + rnd(0.2)
                                self.tm1 = 10 + flr(rnd(5))
                                self.set = 0.5 + rnd(0.3)
                            else
                                self.dy -= 0.5 + rnd(0.2)
                                self.tm1 = 20 + flr(rnd(5))
                                self.set = 1.2 + rnd(0.4)
                            end
                        else
                            -- Normal jump when not intercepting
                            self.dy -= 0.9 + rnd(0.2)
                            self.tm1 = 21 + flr(rnd(5))
                            self.set = .9 + rnd(0.5)
                        end
                    end
                end

                if collide_map(self, "down", 0) and self.dy>0 then
                    self.land = true
                    self.y -= flr((self.y + self.h) % 8)
                end
            end
            if flash and (self.x+1<camx+screen and self.x+self.w-1>camx) then
                self.life -= 100
            end

            if self.life <= 0.5 then
                add_flr(self.x , self.y + 7, self.itm)
                enemies-=1
                del(act, self)
            end

            if tran or (self.x < camx - 16 or self.x > camx + 250 and self.awake) and self.retreat then
                enemies-=1
                del(act, self)
            end
        end,

        draw = function(self)
            spr(self.sp, self.x, self.y + 7, self.flp)
        
        end
    })
end


function add_fish(_x,_y,_item,_flp)

    add(act, {
        x = _x,
        y = _y,
        h = 17,
       fireball=true,
        itm = _item,
        offset = 0,
        pts = 300,
        w = 10,
        yoff=0,
        sp = 197,
        dx = 0,
        dy = -3.2,
        tall=false,
        harm = true,
        land = false,
        sound = false,
        life = 1,
        tm0 = 0,
        tm1 = 0,
        tm2 = 1,
        tm3 = 0,
        flp = _flp,
        wall = false,

        --]]
        update = function(self)
            if ply.onstr then
                self.tall = true
            else 
                self.tall = false 
            end

            -- Movement and timing only if clock is off
            if not clock then
                self.x += self.dx
                self.y += self.dy
                self.dy += grav - .04

                self.tm2 += .1
                self.tm3 += expert and .15 or .1

                if self.land then
                    self.tm1 += expert and .035 or .025
                    self.tm0 += .025
                end

                if self.tm3 >= .2 and not self.land then
                    self.tm3 = .2
                end

                if self.tm3 <= (expert and .15 or .1) then
                    sfx(308, 6, 0, 8)
                    add_splash(self.x + 4, self.y - 6, rnd(0) - .3)
                    add_splash(self.x + 4, self.y - 6, rnd(.2))
                    add_splash(self.x + 4, self.y - 6, rnd(0) + .3)
                end

                if not self.flp then
                    self.dx = expert and .75 or .45
                else
                    self.dx = expert and- .75 or -.45
                end

                if self.tm0 <= .2 then
                    self.dx = 0
                end

                if self.tm1 >= 1 then
                    self.tm1 = 0
                end

                if self.tm1 >= .5 then
                    self.sp = 198
                else
                    self.sp = 197
                end

                if self.tm2 >= 1 then
                    self.tm2 = 1
                end

                if self.tm3 >= (expert and 10 or 15) then
                    self.sp = 199
                    self.dx = 0
                    if self.tm3 >= (expert and 13 or 18) and self.land then
                        add_fir(self.x - 4, self.y + 1, self.flp)

                        if ply.x + 4 > self.x + 4 then
                            self.flp = false
                        elseif ply.x + 4 < self.x + 4 then
                            self.flp = true
                        end
                        self.tm3 = expert and rnd(8) or 1
                    end
                end
            end

            -- Collisions and land detection
            if collide_map(self, "down", 0) and self.dy >= 0 then
                self.land = true
            else
                self.land = false
            end

            if self.land then
                self.dy = 0
                self.y -= flr((self.y + self.h) % 8)

                if self.tm3 <= 1 then
                    if ply.x + 4 > self.x + 4 then
                        self.flp = false
                    elseif ply.x + 4 < self.x + 4 then
                        self.flp = true
                    end
                end

                if not self.sound then
                    sfx(314, 6, 0, 6)
                    self.sound = true
                end
            else
                self.tm3 = 1
                self.dx = 0
                self.tm1 = expert and rnd(6) or 1
            end
            if not self.land then self.sp=197
            end

            -- Deletion conditions, unaffected by clock
            if flash then
                self.life -= 100
            end

            if self.life <= .5 then
                enemies -= 1
                token += 1
                add_flr(self.x, self.y - 2, spawn_item())
                del(act, self)
            end

            if tran or self.x < camx - 20 or self.x > camx + 250 then
                enemies -= 1
                del(act, self)
            end

            if self.y > camy + 130 and self.dy > 0 then
                sfx(308, 6, 8, 8)
                add_splash(self.x + 4, self.y - 6, rnd(0) - .3)
                add_splash(self.x + 4, self.y - 6, rnd(.2))
                add_splash(self.x + 4, self.y - 6, rnd(0) + .3)
                enemies -= 1
                del(act, self)
            end
        end,

        draw = function(self)
            spr(self.sp, self.x + 2, self.y + 1, self.flp)
        end
    })

end


function add_pllr(_x,_y,_item)
add (act,{

x=flr(_x),
y=flr(_y),
h=16,
w=9,
tall=true,
armor=true,
itm=_item,
life=9,
flp=false,
sp=143,
tm0=flr(0),
tm1=flr(0),
tm2=1,
pts=400,
offset=0,

sht=0,
harm=true,
active=false,

update=function(self)
 if not self.active then 
 self.tm1=0
 self.tm0=20
 self.sp=143
 self.sht=0
 end
if clock==true or self.tm2<=.5 or not self.active or self.tm2<=.7 then
self.tm0+=0

else self.tm0+=.1
end

self.tm2+=.1


if self.active then
 if self.tm0>=28 and self.sht~=1 and self.tm2>=.7 then self.tm1+=.3
 
 

 
 end
 if self.tm1>=.5 then 
 
self.sp=159
 elseif self.tm1<=.5 then

  self.sp=143
 
 end


 if self.tm0>=30  then 
 add_fir(self.x-4,self.y+1,self.flp)
 self.sht+=1
 if self.sht<=1 then
 self.tm0=25 
 self.tm1=0
 
 end
 if self.sht>=2 then
 self.sht=0
 self.tm0=isdemo and  15 or rnd(15)+3
 self.tm1=0
 
 end
 end

 if self.tm1>1  then self.tm1=0
 
 end
 
 if self.tm2>=1 then self.tm2=1
 
 end
 
 if ply.x<self.x+2 then self.flp=true
 else self.flp=false
 end
 end
 if flash and self.x>=camx and self.x<=camx+240 then self.life-=100
 
 end
if self.x>=ply.x-120 and self.x<=ply.x+120 then
self.active=true
else self.active=false

end
 if self.life<=.5  then
 add_flr(self.x,self.y-2,self.itm)

 del(act,self)
 
 end

 
 
end
,
draw=function(self)

 spr(self.sp,self.x-1,self.y,self.flp)

 
 end
 
 
 
 })

end

function add_rock(_x,_y)

    add(act, {
        x = _x + rnd(2) - 1, -- Random offset between -1 and 1
        y = _y,
        w=8,
        h=8,
        dy=0,
        pts=50,
        offset=0,
        tm0 = 0,
        harm=true,
        blink=false,
        tm2=1,
        tm1=0,
        life=1,
      
        sp = 176,

        update = function(self)
        self.tm1+=1
         self.y+=self.dy
         if self.tm0>70 then
         self.dy+=grav
         self.blink=false
         elseif self.tm0<70 then self.dy=0
         self.blink=flash_timer%10<5 and true or false
        end
        
            self.tm0 += 1
           
            if self.tm0==1 then 
           -- sfx(317, -1)
           
          -- add_break(self.x,self.y-4)
	add_break(self.x+4,self.y)

           end
         if  collide_map(self,"down",0) and self.tm1>30 then
         self.dy=0
         add_break(self.x,self.y-4)
         add_break(self.x,self.y-4)
         sfx(269,-1)
         
         self.tm1=0 
           
          end

            if self.y>130 then
                del(act, self)
            end
            if self.life<=.5  then
 add_flr(self.x,self.y-2,self.itm)

 del(act,self)
 
 end
           
        end,

        draw = function(self)
       if not self.blink then
            spr(self.sp, self.x, self.y+4)
            end
          
        end
    })

end

function add_spike(_x,_y)

    add(act, {
        x = _x, -- Random offset between -1 and 1
        y = _y,
        armor=true,
        knight=true,
        w=6,
        h=56,
       
        pts=50,
        tm0 = 0,
       -- harm=true,
        shing=0,
        blink=false,
        tm2=1,
        tm1=0,
        height=1,
        life=10,
        wiggle=0,
        sp = 309,

        update = function(self)
        self.tm0+=1
        if self.tm0==130 then
        self.tm2=.5
        sfx(267,-1)
        self.shing=8
        end
        if self.tm0>130 then self.tm0=131
        end
        if self.height<14 then
        camy=flash_timer%10<5 and 0 or -1
       end
        self.tm1+=1
        if self.tm1>=5 and self.height<14 then
        sfx(319, 4, 3)
        sfx(269,-1)
        add_break(camx+4,camy+90)
        self.height+=1 
        self.y-=4
        self.tm1=0
        end
        if self.tm2~=1 then
        self.wiggle=flash_timer%20<10 and 1 or -1
        end
        self.tm2+=.1
         if self.tm2>=1 then self.tm2=1
         self.wiggle=0
         end
       
        if hit(ply.x+4, ply.y, self.x-2, self.y-2, self.w+5, self.h+6) and self.shing==8 and not (ply.hrt or ply.ded or ply.blk) then
          sfx(304, 7, 0, 0)
                ply.y -= 1
                ply.dy = -1
                hrttmr = 0
                ply.hrt = true
                ply.tm3 = 0
                ply.tm4 = 0
           
            ply.hth = 0
            ply.vishth = 0
        end
           
        

            if tran then
                buffet=false
                del(act, self)
                
            end
            if self.life<=.5  then
            if not buffet then 
            add_bigscore(self.x-4,self.y,2000)
            sfx(311,-1,0,0)
            score+=2000
            lifescore+=2000
           end
            buffet=false
 add_flr(self.x+rnd(1),self.y+10,nil,126)
 add_flr(self.x+rnd(1),self.y+18,nil,126)
 add_flr(self.x+rnd(1),self.y+26,nil,126)
 add_flr(self.x+rnd(1),self.y+34,nil,126)
 add_flr(self.x+rnd(1),self.y+42,nil,126)
 ---[[
 for b in all(act)do
 if b.pinch then 
 sfx(270, -1)
 b.state="mad"
 end
 
end
--]]
 del(act,self)
 
 end
           
        end,

        draw = function(self)
clip((self.x-camx)+self.wiggle,camy+75,4+self.shing,46)       
            spr(self.sp, self.x+self.wiggle, self.y+4)
         
          clip()
--          print(self.tm0,self.x,self.y,7)
        end
    })

end

:: animation.lua
--[[pod_format="raw",created="2024-08-22 14:16:26",modified="2025-06-26 05:11:28",revision=44829]]
--animation

function anmdta()

 if ply.anm==0 then 

 ply.sp0=67
 ply.sp1=83

 end

 if ply.anm==1 then 

 ply.sp0=68
 ply.sp1=84

 end

 if ply.anm==2 then 

 ply.sp0=67
 ply.sp1=83

 end

--standing and walk
 if ply.anm==3 then 

 ply.sp0=66
 ply.sp1=82

 end

--whip (standing)
 if ply.anm==4 then 

 ply.sp0=69
if not ply.str then
 ply.sp1=82
end
 end

 if ply.anm==5 then 

 ply.sp0=70
 if not ply.str then
 ply.sp1=82
end
 end

 if ply.anm==6 then 

 ply.sp0=71
 if not ply.str then
 ply.sp1=82
end

 end


--whip (ducking)
 if ply.anm==7 then 

 ply.sp0=69


 end

 if ply.anm==8 then 

 ply.sp0=70


 end

 if ply.anm==9 then 

 ply.sp0=71


 end

--duck
 if ply.anm==10 then 

 ply.sp0=66
 ply.sp1=85
 
 if not ply.onstr then
 ply.oy=4

 end
 end


--upstair
 if ply.anm==11 then 

 ply.sp0=68
 ply.sp1=86

 end


--downstair
 if ply.anm==12 then 

 ply.sp0=68
 ply.sp1=87

 end

--knockback

 if ply.anm==13 and not ply.onstr then 

 ply.sp0=72
 ply.sp1=87

 end

--keel over

 if ply.anm==14 then 
 ply.oy=4
 ply.sp0=72
 ply.sp1=85

 end

--lying on floor

 if ply.anm==15 then 
 ply.wo=1
 ply.oy=0
ply.sp0=nil
 ply.sp1=90
 if ply.flp then ply.ox=-8
 else ply.ox=0
 
 end
 
 else ply.wo=0
 
 end
if not ply.ded then ply.ox=0
end
end

--land from a high fall

function ply_stn()

 if ply.tm0>=.7 and ply.lnd==true 
 then ply.stn=true
 sfx(314,-1,0,6)
 ply.tm0=0

 elseif ply.tm0<1 and ply.lnd==true

 then ply.tm0=0

 end

end

--walking

function ply_walk()






 if ply.tm0>=1 then ply.tm0=1

 end

 if ply.wlk==true and not door 
 and ply.dck==false 
 and not ply.jmp 
  then   

 ply.tm1+=.14
 elseif door and move then
ply.tm1+=.14
 else ply.tm1=0 ply.anm=3 
 end

--animation cycle

 if ply.tm1>=1 and not ply.petrified then 
 ply.tm1=0 
 ply.anm+=1

 end

 if ply.anm>=4 then ply.anm=0

 end
 


if (btnp(0,player) or btnp(1,player)) and not (ply.dck or door) and ply.lnd and not ply.wlk and not victory  then

ply.anm=0
end


--jumping

 if  (ply.jmp and ply.dy<.5) then 

 ply.anm=10
 ply.oy=2

 elseif ply.dck  then
 ply.anm=10

 else ply.oy=0

 end



end

function deathanim()

ply.tm5+=.05

 if ply.tm5>=2 then ply.tm5=2
 end

--slump over 
 
 if ply.tm5<1 then 

 ply.anm=14

 else ply.anm=15 

 end

end
:: attacks.lua
--[[pod_format="raw",created="2024-08-22 14:15:35",modified="2025-06-26 05:11:25",revision=43664]]
--attacks
--whip

function attack()
 if ply.tm4>=4 then 
 ply.tm4=0
 ply.anmoff+=1

 end

 if ply.thw or ply.atk  then 
 ply.anm=4+ply.anmoff

 end

 if ply.dck or ply.stn then
 ply.anm=7+ply.anmoff

 end
 if ply.thw and ply.sp0==71 
 and wpnout==1

  
  
  then
 hndout=0

 add_hand()
 add_wpn(ply.x+4,ply.y-4)
 subwpn=true
  wpnout=0
  wpncnt+=1
   if ply.wpn~=5  then ply.ammo-=1
 

  end
 end


end

function atk_state()

--interrupt attack 
 
 if (ply.hrt or ply.ded) then 
 ply.thw=false
 ply.atk=false

 end

--attacking?

 if not (ply.hrt or ply.ded or ply.petrified) 

  then
 
  if not btn(2,player) and btnp(btn1,player) and not ply.atk and not door and ply.anm~=13
  
   then  
 
--bring out the weapon 
   ply_attack()
  
   end

  end
 
 if btn(2,player) and btnp(btn1,player) 
 and not (ply.atk or ply.thw or ply.petrified) and not ply.hrt and not door
 then  
 if wpncnt<ply.sht and ply.wpn~=0 and ply.ammo>=cost and not clock and not victory and not ply.ded  then   

 ply.thw=true     
 
 
  if ply.wpn==5 and not clock  then
  pause_music()
  sfx(312,2)
  clock=true
  
  end
 elseif ply.sht>=wpncnt then
 
   add_whip(ply.x,ply.y)
   ply.atk=true
 
 end 
--begin attack 
 end
 if not ply.ded then
 if ply.thw or ply.atk then
 ply.tm3+=.15
 if not ply.petrified then
 ply.tm4+=.5
 else ply.tm4+=0
 end
 attack()
 
--finish attack  
  
  if ply.tm3>=3.4 and not ply.petrified then
  ply.tm3=0
  ply.tm4=0
  ply.atk=false
  ply.thw=false
  ply.anmoff=0

  
  end
  
  end
 end
 
if clock then
clockt+=.022
if clockt==.022 then ply.ammo-=5
end
end
if clockt>=3.5 then


clockt=0
clock=false
wpncnt-=1
if stat(466,9)~=15 and not victory and not ply.ded then
--music(song2,0,15)
resume_music() 
end
end
end



:: boss.lua
--[[pod_format="raw",created="2024-09-19 23:38:20",modified="2025-05-31 05:33:55",revision=40837]]
 
include "clone.lua"

-- wrap projectile

function add_wrap(_x,_y,_item,_flp)

add (act,{
short=true,

x=_x,
y=_y,
h=8,
offset=0,
itm=spawn_item(),
pts=100,
w=8,
sp=44,
dx=.7,
dy=0,
harm=true,
life=1,
tm1=0,
tm2=1,
flp=_flp,



update=function(self)
self.tm1+=.05
self.x+=self.dx





if self.tm2==1  then

local amp =- .35       -- Amplitude of the sine wave
local freq = .05    -- Frequency of the sine wave
if not self.timer then self.timer = 0 end -- Timer for sine wave


-- Increment timer (controls sine wave oscillation)
self.timer += .2



-- Calculate final position with sine wave offset
self.dy = amp * sin(self.timer * freq)  -- Sine wave oscillation
self.y +=self.dy          -- Reactive sine wave

end

if not self.flp then
self.dx=-1.5
elseif self.flp then
self.dx=1.5

end

if self.tm1>=1 then
self.tm1=0

end

if self.tm1>=.5 then
self.sp=45
elseif self.tm1<=.5 then
self.sp=44

end

if self.tm2>=1 then self.tm2=1
 
 end







  if flash then self.life-=100
 
 end
 
 if self.life<=.5  then
 
 add_flr(self.x,self.y+5,self.itm)

 del(act,self)
 
 end

if tran or (self.x>camx+screen or self.x+8<camx) then

del(act,self)

end




end,

draw=function(self)

 spr(self.sp,self.x,self.y+7,self.flp)

 end
 
 })

end


--medusa snake adds

function add_snk(_x,_y,_item,_flp)

add (act,{
short=true,
x=_x,
y=_y,
h=17,
offset=0,
itm=spawn_item(),
pts=100,
w=8,
sp=245,
dx=.7,
dy=0,
harm=true,
life=1,
tm1=0,
tm2=1,
flp=_flp,


--]]
update=function(self)

self.x+=self.dx
self.y+=self.dy
self.dy+=grav

self.tm2+=.1

if clock then 
self.dx=0
self.dy=0
self.tm1+=0
else 
self.dx=.8

self.tm1+=.035
end


if not self.flp then
self.dx=self.dx
elseif self.flp then
self.dx=-self.dx

end

if self.tm1>=1 then
self.tm1=0

end

if self.tm1>=.5 then
self.sp=245
elseif self.tm1<=.5 then
self.sp=246

end

if self.tm2>=1 then self.tm2=1
 
 end


 if collide_map(self,"down",0) and self.dy>0 
then
self.dx=self.dx
self.dy=0 
self.y-=flr((self.y+self.h)%8)
else
self.dx=0
end




if flash and self.active then self.life-=100
 
 end
  if flash then self.life-=100
 
 end
 
 if self.life<=.5  then
 enemies-=1
 add_flr(self.x,self.y-2,self.itm)

 del(act,self)
 
 end

if tran or self.y>camy+120 or self.x>camx+screen then
enemies-=1
del(act,self)

end




end,

draw=function(self)

 spr(self.sp,self.x,self.y+8,self.flp)

 end
 
 })

end



function add_boss_bat(_x,_y,_itm,_state)
add (act,{

x=_x,

itm=_itm,
y=_y,
dx=0,
dy=0,
offset=0,
divex=2,
set=0,
dive=1.5,
clmb=.03,
sdx=0,
sdy=1,
dmax=1,
range=0,
swoop=false,
trvl=0,
smoothing_factor=1.5,
dxmax=2,
dymax=2,
spd=1,
h=20,
w=32,
sp=227,
sp1=nil,
sp2=nil,
close=false,
harm=true,
life=16,
pts=3000,
threat=false,
pinch=false,
tm0=0,
tm1=0,
tm2=1,
tm3=0,
tm4=0,
tm5=0,
tm6=0,
tm7=0,
anm=0,
targetx=0,
targety=0,
state=_state or "dormant",
shake=0,
tries=0,




update=function(self)
self.spd=self.pinch and 1.5 or 1
self.divex=self.pinch and 3 or 2
    self.targetx = ply.x + 50
    self.targety = wpncnt == 0 and ply.y - 10 or ply.y - 60

    if (expert and boss) and self.life <= 4 and not self.pinch and self.tries~=2 then
        
            sfx(270, -1)
            self.state = "mad"
            self.tm0 = 0
            self.shake = true
            self.pinch =true
        end

        if self.state == "mad" then
            
            self.tm0 += 1
            self.shake = flash_timer % 30 < 15 and -1 or 1
            self.sp = 241
            self.y -= 0.25
            self.tm2 = 0
            self.harm = false
           
            if self.tm0 >= 120 then 
        self.tries+=1
        if self.tries<=2 then
            add_spike(camx+8,camy+120)
                self.state = "moveto"
                self.tm0 = 0
                elseif self.tries==3 then
                self.harm=true
                self.tm2=1
                
                  self.state="swoop"
        end
        end
        
    end

    if self.state == "moveto"  then
    self.sp=225
        local target_dx = (self.targetx) - (self.x + 8)
        local target_dy = (self.targety) - (self.y + 4)
        local length = sqrt(target_dx^2 + target_dy^2)
        if length > 0 then
            target_dx = (target_dx / length) * self.dxmax
            target_dy = (target_dy / length) * self.dymax
        end
        self.dx += (target_dx - self.dx) * self.smoothing_factor
        self.dy += (target_dy - self.dy) * self.smoothing_factor
        self.x += self.dx
        self.y += self.dy

        -- Check if the bat has reached its target position
        if abs(self.x - self.targetx) < 15 and abs(self.y - self.targety) < 20 then
            buffet=true
            self.state = "buffet"
        end

        return  -- Exit early to ensure no further movement logic overrides this state
    end

 if self.state=="buffet" then
if self.sp==225 then self.y+=1 end
if self.sp==241 then self.x-=2 end
  if flr(abs(self.x+8-self.targetx))>2 then
  if self.targetx>self.x+8 then self.x+=1.5
  elseif self.x+8>self.targetx then self.x-=1.5
  end
 end
  if flr(abs(self.y+4-self.targety))>2 then
  if self.targety>self.y then self.y+=1
  elseif self.y+4>self.targety then self.y-=1
  end
 end

 
end

    -- Only override self.dx and self.dy when not in "moveto" or "buffet"
    self.dx = ply.x - self.x - 16
    self.dy = ply.y - self.y + 4




if boss then
enmy=self.life
 end
  self.dx=ply.x-self.x-16
  self.dy=ply.y-self.y+4

self.tm2+=.1
if self.tm2>=1 then
self.tm2=1
end
if not clock and self.tm2==1  then

if self.dx>=self.dmax then
self.dx=self.dmax
elseif self.dx<=-self.dmax then
self.dx=-self.dmax

end 

if self.dy>=self.dmax then
self.dy=self.dmax
elseif self.dy<=-self.dmax then
self.dy=-self.dmax
end 

 if (self.anm==0)						 self.sp=227 
 if (self.anm==1)                 self.sp=225    
 if (self.anm==2 or self.anm==4)  self.sp=233    
 if (self.anm==3)                 self.sp=241    
 
 
 if self.y<=ply.y -10 then self.range=10
 elseif self.y>=ply.y-10 then self.range=5
 
 if self.x<=ply.x-15 or self.x>=ply.x+15 then range=30
 
 
   end   
 end
 
   if buffet and self.sp==241 then
   sfx(268,-1)
     end   

    self.dist = math.sqrt(self.dx * self.dx + self.dy * self.dy)
    
    if self.dist > 0 then
        self.dir_x = self.sdx / self.dist
        self.dir_y = self.sdy / self.dist
      
       
        
    end
  
 
if boss and self.state=="dormant" then
self.dx=0
self.dy=0
self.tm0+=.1

end
if ply.x+4-self.x+8<55 and ply.x+4-self.x+8>-16  then
if ply.x+4>self.x+8 and ply.flp or ply.x+4<self.x+8 and not ply.flp then
if ((ply.jmp and ply.atk) or (ply.lnd and ply.atk)) and (self.y-6<ply.y and self.y+16>ply.y)  then
self.threat=true
else self.threat=false
end
end

end
if self.tm0>=10 and  self.state=="dormant" then
self.anm=1
self.tm0=0
self.state="active"
end

if self.tm6<=.2

then self.divex=self.set
	end
 

if self.state=="active" or self.state=="move" 
or self.state=="wait" or self.state=="climb" or self.state=="buffet"  then

self.tm1+=buffet and .10 or .15

self.tm7+=.1
	if self.tm1>=1 then
 	self.anm+=1
 	self.tm1=0
 		if self.anm>3 then self.anm=1
 		end
 	end
end
if self.state=="swoop" or self.state=="dive!"and self.dy<=0 then
self.tm1+=.15
self.tm5+=self.pinch and .3 or .1
	if self.tm1>=1 then
 	self.anm+=1
 	self.tm1=0
 		if self.anm>3 then self.anm=1
 		end
 	end


 			if (self.state=="swoop" or self.state=="zoop!")
 			 and self.tm5>=15 and self.y<80  then
 				self.tm6+=.2
 			self.state="dive!"
 			self.tm5=0
 			elseif self.y>80  then
 			self.state="move"
 			self.tm5=0
 			end
 			if self.tm5>=14 then 
 			self.y-=.5
 			self.anm=3
 			end
 			 
		

	if self.x+8<ply.x+4 then 
		if abs((self.x+8)-(ply.x+4))<=40 then self.set=1
   		elseif abs((self.x+8)-(ply.x+4))>40 then self.set=2
   			end
   		end

  	if self.x+8>ply.x+4 then 

		if abs((self.x+8)-(ply.x+4))<=40 then self.set=-1
   		elseif abs((self.x+8)-(ply.x+4))>40 then self.set=-2
   	
   			end
		end



 
 	if self.state=="swoop" and self.threat then
   self.threat=false
   self.dive=2
 	self.state="zoop!"

 end
end
if self.state=="zoop!" then
self.y-=2.5
self.trvl+=1
end
if self.state=="zoop!" and self.trvl>=9 then

self.state="dive!"
self.trvl=0
end

if self.state=="dive!" then


self.y+=self.dive
self.x+=self.divex
self.dive-=self.clmb
if self.dive>0 then
self.anm=1
elseif self.dive<0 and self.dive>-.5 then
self.anm=2
elseif self.dive<-.5 then
self.anm=3


end

end
if self.y+8>=ply.y+8 and self.state=="dive!" then

self.tm6=0
self.dive=-.06
if not boss then self.state="move"
end
end
if self.state=="dive!" and self.y<=30 then
self.tm6=0
self.dx=self.divex
self.dy=0
self.state="move"
self.divex=0
self.dive=1.5
end
if self.state=="dive" and (self.x-4<cam.x or self.x+24>camx+238) then self.divex=-self.divex


end
if self.tm7>=15 and self.state~="buffet" then
self.sdx=self.dx
self.sdy=self.dy
self.state="move"
self.tm7=0
end
if self.state=="move" then
self.dive=1.5
	if not self.close then

	self.x = self.x + self.dir_x * self.spd
	self.y = self.y + self.dir_y * self.spd
	
	elseif self.close then
	self.x = self.x + self.dir_x * self.spd
	self.y = self.y - self.dir_y / self.spd
	
	end 
	self.tm3+=self.pinch and .3 or .1
end

if self.y>=100 then

self.close=true
self.range=5

end
if self.close and self.tm4< 7 then
self.tm4+=.1
end
if self.tm4>=7 and self.close then 
self.range=7
self.tm4=0
self.close=false

end
if self.tm3>=6 and self.state=="move" then
self.state="wait"
self.dx=0
self.dy=0
--just for fun...
---[[
if expert or not boss then
if (self.pinch and rnd(1)<.9) or rnd(1)<.4 then
add_hmng_fir(self.x+8,self.y+6)
end
end
--]]
self.tm3=flr(rnd(self.range)-5)
	if self.state=="wait" and self.swoop==true then
	self.state="swoop"
   self.swoop=false
	end
end
if self.state=="climb" then
self.y-=self.clmb
end

if hit(self.x+16,self.y+8,ply.x-90,ply.y-40,ply.x+98,ply.y+16)
then self.swoop=true
elseif not hit(self.x+16,self.y+8,ply.x-80,ply.y-30,ply.x+88,ply.y+16)
then  self.swoop=false

end
if not boss and self.state~="dormant" then
if self.x+8<camx or self.x> camx+screen  then
self.state="wait"
self.tm0=0
self.dx=0
self.dy=0

end
end

if self.state=="buffet" and ply.ded then
if buffet then
buffet=false
end
sfx(270, -1)
self.state="mad"
end

if boss then

		if self.x+8<camx then 
  	self.x+=2
  	elseif self.x+16>camx+240 then
  	self.x-=2
  	
  	end
   end
  		if self.y>109 then
 		self.y=105
 	 
  elseif self.y<5 then
  self.y=5
  
 		end
		
end
if self.life<=.5  then
if buffet then buffet=false
end
 add_flr(self.x+12,self.y+6,nil, 126)
 add_flr(self.x+6,self.y+6,nil,126)
 add_flr(self.x+18,self.y+6,nil,126)
 add_flr(self.x+12,self.y+16,nil, 126)
 add_flr(self.x+6,self.y+16,nil, 126)
 add_flr(self.x+18,self.y+16,nil, 126)

 del(act,self)
 
 end


end,
draw=function(self)


 spr(self.sp,self.x+self.shake,self.y+5)
--print(tostring(self.state),self.x,self.y-8,24)
--spr(192,self.targetx,self.targety)
 
 end
 
 
 
 })

end



function add_boss_medusa_bust(_x,_y)
add (act,{
---[[
x=_x,

y=_y,


h=20,
w=10,
sp=228,
offset=0,

harm=false,

pts=5000,
threat=false,
tm0=0,
tm1=0,
tm2=0,
tm3=0,
tm4=0,
tm5=0,
tm6=0,
tm7=0,
anm=0,





--]]
update=function(self)



if camx<=184 and boss==false and not victory then

camxmax=camx
  boss=true

bossmus=true
end

if boss then
self.tm1+=1
if ply.x>self.x+130 then ply.x=self.x+130


end
end
if self.tm1>110 then



self.sp= 229

end

if self.tm1==120 then
add_boss_medusa(self.x,self.y)
self.tm1=121

end

end,
draw=function(self)


 spr(self.sp,self.x,self.y)


 
 end
 
 
 
 })

end



function add_boss_medusa(_x,_y)
add (act,{

x=_x,
homing=true,
y=_y,
dx=0,
dy=0,
dxmax= expert and .7 or .6,
dymax=1,
trvl=0,


spd=1,
h=20,
w=15,
sp=228,
offset=0,
offsety=-12,


harm=true,
life=16,
pts=3000,

tm0=0,
tm1=0,
tm2=1,
tm3=0,
tm4=0,

state="active",
smoothing_factor=.05,




update=function(self)
self.tm3+=1
self.tm2+=.1
enmy=self.life
if self.tm3<10 then self.sp=243
else self.sp=244
if self.tm3>=20
then self.tm3=0
end


end

if self.tm2>=1 then self.tm2=1

end
if clock then self.tm0+=0
else self.tm0+=1

end

-- Initialize variables

if self.tm2==1 and self.tm0<100 and not clock then
if self.tm0>2 then
local amp =- .2       -- Amplitude of the sine wave
local freq = .05    -- Frequency of the sine wave
if not self.timer then self.timer = 0 end -- Timer for sine wave


-- Increment timer (controls sine wave oscillation)
self.timer += .2




-- Calculate final position with sine wave offset
self.dy = amp * sin(self.timer * freq)  -- Sine wave oscillation
self.y +=self.dy          -- Reactive sine wave
end
end
if self.tm0 >= 120 then
    self.tm0 = 0
    if expert and not ply.petrified and not (ply.hrt or ply.blk)  and rnd() < 0.60 then -- Adjust spawn chance as needed
    sfx(266,-1)
    add_gaze(self.x + 8, self.y + 4,5) -- Spawn Gaze toward Simon

   else if ply.x + 4 > self.x + 8 then
        add_snk(self.x + 8, self.y - 8, spawn_item(), false)
    else
        add_snk(self.x + 8, self.y - 8, spawn_item(), true)
    end
end
end
if self.tm2==1 and self.tm0< 100 and not clock then
self.y+=self.dy
if self.state=="active" then
if self.tm0>2 then
                    -- Calculate desired direction towards player
                    local target_dx = (ply.x) - (self.x + 4)
                  

                    -- Normalize the target deltas to limit speed
                    local length = sqrt(target_dx^2)
                    if length > 0 then
                        target_dx = (target_dx / length) * self.dxmax
                      
                    end

                    -- Smoothly interpolate the current deltas towards the target deltas
                    self.dx += (target_dx - self.dx) * self.smoothing_factor
                   
                end
self.x+=self.dx




end









end

if self.life<=.5  then
 add_flr(self.x,self.y-2,nil, 126)
 add_flr(self.x-6,self.y-2,nil,126)
 add_flr(self.x+6,self.y-2,nil,126)
 add_flr(self.x,self.y+8,nil, 126)
 add_flr(self.x-6,self.y+8,nil, 126)
 add_flr(self.x+6,self.y+8,nil, 126)

 del(act,self)
 
 end


end,
draw=function(self)

-- print (self.tm0,self.x,self.y-24,7)
 spr(self.sp,self.x,self.y)

 
 end
 
 
 
 })

end

function add_gaze(_x,_y,_yoffset)

add (act,{
x=_x,
y=_y,
dy=0,
h=4,
w=8,
offset=0,
tall=true,
sp=234,
dx=0,
dy=0,
style=123,
fireball=true,
dxmax=3,
dymax=3.5,
flp=false,
hflp=false,
life=.5,

harm=false,
tm1=0,
tm2=0,
tm3=0,
pts=100,
yoffset=_yoffset or 0,
smoothing_factor = .7,
--]]
update=function(self)
self.tm3+=1
self.tm2+=.05
if self.tm2>=1 then self.tm2=1
end
                if self.tm3 <= 1 then
                    -- Calculate desired direction towards player
                    local target_dx = (ply.x + 4) - (self.x + 4)
                    local target_dy = (ply.y + self.yoffset) - (self.y + 4)

                    -- Normalize the target deltas to limit speed
                    local length = sqrt(target_dx^2 + target_dy^2)
                    if length > 0 then
                        target_dx = (target_dx / length) * self.dxmax
                        target_dy = (target_dy / length) * self.dymax
                    end

                    -- Smoothly interpolate the current deltas towards the target deltas
                    self.dx += (target_dx - self.dx) * self.smoothing_factor
                    self.dy += (target_dy - self.dy) * self.smoothing_factor
                end

                -- Update position
                self.x += self.dx
                self.y += self.dy
if self.dx>0 then self.flp=false
else self.flp=true
end

 -- Check for collision with Simon
            if hit_weapon(ply.x+4, ply.y, ply.w, ply.h, self.x, self.y, 8, 8) and not ply.ded or ply.hrt and not ply.petrified or ply.blnk then
            if (self.dx>0 and ply.flp) or (self.dx<0 and not ply.flp) then
                
                sfx(319, 4, 3)
                petrify_player()
                del(act, self) -- Remove the Gaze after it hits
            
            end
            end

if flash then self.life-=100

end
if cur_stge==18 then
 self.style=125
else self.style=123
end
if  self.life<=0 then


add_flr(self.x,self.y-2,spawn_item(),self.style)

del(act,self)


end
if self.x<camx-20 or self.x>camx+screen then
del(act,self)
end

if self.y+8<camy-20 or self.y+8>camy+screen then
del(act,self)
end

end,

draw=function(self)
self.flp=flash_timer%10<5 and true or false
self.hflp=flash_timer %30<12 and true or false

 spr(self.sp,self.x,self.y,self.flp,self.hflip)

 end
 
 })

end



function add_boss_mmy(_x,_y,_flp)

add (act,{

x=_x*8,
y=_y*8,
h=30,
bosslife=true,

pts=5000,
w=8,
sp=224,
dx=0,
dy=0,
targetx=0,
harm=false,
life=24,
mylife=12,
anm=1,
anmoffset=0,
col=0,
tm0=0,
tm1=0,
tm2=0,
tm3=0,
tm4=0,

flp=_flp,



update=function(self)
self.x+=self.dx
self.y+=self.dy
self.dy+=grav
enmy=self.life
if not ply.hrt then
if ply.flp then self.targetx=ply.x-38
elseif not ply.flp then self.targetx=ply.x+38
end 
end

if self.anm==1 then self.sp=224
elseif self.anm==2 then self.sp=232
elseif self.anm==3 then self.sp=240
elseif self.anm==4 then self.sp=232
end
if camx==camxmax and not boss then
camxmin=camxmax
boss=true
bossmus=true
end

if boss then

self.tm0+=1

if self.tm0>=100 then self.tm0=100
self.harm=true
self.tm2+=.1
self.tm1+=1
self.tm3+=1
self.tm4+=1
if self.tm4>40 then
if self.targetx<self.x+4 then
self.flp=true
else
self.flp=false
end
self.tm4=flr(rnd(15))
end

if self.tm3>150 then

sfx(256,-1)
if ply.x+4<self.x+4 then

add_wrap(self.x,self.y,nil,false)
else

add_wrap(self.x,self.y,nil,true)
end
self.tm3=flr(rnd(20)+25)
end
if self.flp then self.dx=-.6
elseif not self.flp then self.dx=.6

end

end
if self.tm2>=1 then self.tm2=1

end

if self.tm2<1 or self.tm3>120 then
if ply.x+4<self.x+4 then
self.flp=true
else
self.flp=false
end
self.dx=0


end
if self.x<camx then

self.flp=not self.flp
self.x+=2
elseif self.x+8>camx+240 then
self.x-=2
self.flp=not self.flp


end
if self.tm3>120 then
self.col = flash_timer % 30 < 15 and 0 or 1
else self.col=0  

end

if self.tm1>=15 then self.tm1=0
self.anm+=1
if self.anm>4 then self.anm=1

end
end
end
if self.tm2~=1 then self.tm1=0
end
update_boss_life(24)
if self.tm2>=1 then self.tm2=1

end



 if collide_map(self,"down",0) and self.dy>0 
then
self.dx=self.dx
self.dy=0 
self.y-=flr((self.y+self.h)%8)


end

if self.life<=.5 or self.mylife<=.5  then
 add_flr(self.x,self.y+12,nil, 126)
 add_flr(self.x-6,self.y+12,nil,126)
 add_flr(self.x+6,self.y+12,nil,126)
 add_flr(self.x,self.y+24,nil, 126)
 add_flr(self.x-6,self.y+24,nil, 126)
 add_flr(self.x+6,self.y+24,nil, 126)

 del(act,self)
 
 end


 
 





end,

draw=function(self)
if self.col==1 then
pal(7,14)
pal(6,8)
pal(5,2)
end
if self.tm3>120 then
self.col = flash_timer % 20 < 10 and 0 or 1
else self.col=0  

end

 spr(self.sp,self.x,self.y+6,self.flp)
-- spr(208,self.targetx,self.y+6,self.flp)

pal()
 end
 
 })

end


function add_boss_death(_x,_y)
add (act,{

x=_x,
bosslife=true,
fireball=true,
y=_y,
dx=0,
dy=2,
dxmax=expert and 5 or 3,

dymax=1.5,
trvl=0,
land=false,

timer=0,
spd=1,
h=30,
w=24,
sp=247,
offset=0,
offsety=-12,

more=0,
harm=true,
life=32,
mylife=32,
pts=7000,
scythes=0,
scthtmr=0,
tm0=0,
tm1=0,
tm2=1,
tm3=0,
tm4=0,






update=function(self)

self.tm2+=.1
if self.tm2>=1 then
self.x+=self.dx
self.y+=self.dy
self.dy+=.025
self.mylife=self.life
enmy=self.life
self.scthtmr+=1





if scythe<2 then self.timer=130
else self.timer=0
end
if self.scthtmr>1 then self.scthtmr=1
end
if abs((ply.x+4)-(self.x+16))<30 then

self.more=1
else self.more=0
end

if self.dy>self.dymax then
self.dy=self.dymax
end

if self.land then

if abs((ply.x+4)-(self.x+16))<30 then
if rnd(1)<.05 then
self.tm3+=70

end
else self.tm3+=1
end
end

if self.tm3 >=80 then
self.tm3=0
self.land=false
self.dy-=1.8


if ply.x+4>self.x+16 then
  self.dx=rnd(self.spd+self.more)+.5
else self.dx=-rnd(self.spd+self.more)-.5

end
end
if (self.x-4<=camx or self.x+24>camx+screen) then
self.dx=-self.dx
end

if self.land and self.x+24>camx+screen then

self.x-=2
end

if self.land and self.x-4<camx then

self.x+=4
end

if self.tm2>=1 then self.tm2=1

end


if ply.x+4< self.x+16 then
self.flp=true
else self.flp=false

end

if self.land then
self.dx, self.dy= 0,0

end

if collide_map(self, "down", 0) and self.dy > 0 then
    if not self.land then
        self.scthtmr = 0
        if scythe < 3 then
            local scythes_needed = 3 - scythe  -- how many more to reach 3

            for s=1, scythes_needed do
                add_scth(ply.x - 20 + rnd(42), ply.y - 20 + rnd(42), spawn_item(), self.timer, false)
                scythe += 1
            end
            if scythe == 3 and not hold then
                -- Create the fourth scythe, but set it on hold
                add_scth(ply.x - 20 + rnd(42), ply.y - 20 + rnd(42), spawn_item(), rnd(-100)+200, true)
                hold = true
            end
        end

        self.land = true
    end
end

end

if tran then del(act,self)

end

update_boss_life(32)
if self.life<=.5 or self.mylife<=.5  then
enmy=0
 add_flr(self.x,self.y-2,nil, 126)
 add_flr(self.x-6,self.y-2,nil,126)
 add_flr(self.x+6,self.y-2,nil,126)
 add_flr(self.x,self.y+8,nil, 126)
 add_flr(self.x-6,self.y+8,nil, 126)
 add_flr(self.x+6,self.y+8,nil, 126)
 
 del(act,self)
 
 end


end,
draw=function(self)


 spr(self.sp,self.x,self.y,self.flp)

 end
 
 
 
 })

end

-- Death's scythes
scythe=0



function add_scth(_x, _y, _itm, _timer, _on_hold)
    add(act, {
        x = _x,
        y = _y,
        itm = _itm,
        homing=true,
        h = 10,
        type="scythe",
        blink = true,
        blktmr = 0,
        w = 8,
        offset = 0,
        sp = 6,
        anm = 1,
        dx = 0,
        dy = 0,
        dxmax = expert and 1.2 or .9,
        dymax = expert and 1.2 or .9,
        flpx = false,
        flpy = false,
        life = 1,
        harm = false,
        tm0 = 0,
        tm1 = _timer,
        pts = 100,
        tm2 = 0,
        on_hold = _on_hold,  -- New attribute to indicate if scythe is on hold
        smoothing_factor = .7,

        update = function(self)
        if not victory then
       if self.tm0 > 5 then
                self.tm0 = 0
                self.anm += 1
            end

            if self.anm > 4 then
                self.anm = 1
            end
            
           if self.dx==0 then self.tm0+=1
           else self.tm0+=1.5
          end
          
          if abs(self.dx) < 0.01 and abs(self.dy) < 0.01 then
        -- Repelling force to prevent scythes from clumping when idle
        if not self.blink then
        for other in all(act) do
            if other ~= self and other.type == self.type and not(other.on_hold or other.blink) then -- Check if it's another scythe
                local distance = sqrt((self.x - other.x)^2 + (self.y - other.y)^2)
                if distance < 15 then  -- Repel if too close
                    local repel_dx = self.x - other.x
                    local repel_dy = self.y - other.y
                    local repel_length = sqrt(repel_dx^2 + repel_dy^2)

                    if repel_length > 0 then
                        -- Normalize the repel vector and apply a smaller, gradual adjustment
                        repel_dx = (repel_dx / repel_length) * 0.2
                        repel_dy = (repel_dy / repel_length) * 0.2

                        -- Gradually apply the repelling force to make it smooth
                        self.dx += (repel_dx - self.dx) * 1.5
                        self.dy += (repel_dy - self.dy) * 1.5
                    end
                end
            end
        end
    end
 end
        
          if self.blink then
                self.blktmr += 1
                if self.blktmr > 4 then self.blktmr = 1 end
            end
            if self.on_hold then
                -- Scythe is on hold, stay stationary and blink
                self.blink = true
                self.tm1 = 130  -- Timer is locked, so it doesn't activate

                -- Check if it can be activated (if the active scythe count is less than 3)
                if scythe < 3 then
                    self.on_hold = false  -- Activate the scythe
                    hold = false          -- Allow another to go on hold later
                    scythe += 1           -- Increase the active count
                end
                return
            end

            -- Regular scythe behavior
            

            self.tm2 += .1
            if self.tm2 >= 1 then
                self.tm2 = 1
            end
            if self.blink then self.tm2 = 0 end

            if self.anm == 1 then self.sp = 6; self.flpx = false; self.flpy = false
            elseif self.anm == 2 then self.sp = 23; self.flpx = false; self.flpy = false
            elseif self.anm == 3 then self.sp = 6; self.flpx = true; self.flpy = true
            elseif self.anm == 4 then self.sp = 23; self.flpx = true; self.flpy = true
            end

            if self.tm1 >= 200 and scythe <= 3 then
                self.blink = false
                self.blktmr = 1
                self.tm1 = 0
                self.harm = true
                self.tm2 = 2

                -- Calculate direction towards player
                local target_dx = (ply.x + 4) - (self.x + 4)
                local target_dy = (ply.y + 12) - (self.y + 4)
                local length = sqrt(target_dx^2 + target_dy^2)
                if length > 0 then
                    target_dx = (target_dx / length) * self.dxmax
                    target_dy = (target_dy / length) * self.dymax
                end
                self.dx += (target_dx - self.dx) * self.smoothing_factor
                self.dy += (target_dy - self.dy) * self.smoothing_factor
               
            end

            -- Update position
            self.x += self.dx
            self.y += self.dy

            -- Update animation timing
            self.tm1 += (expert and 2 or 1) 
             if self.tm1>130 then self.dx=0
             self.dy=0
             
             end       
				if self.x+8>camx+screen then 
				self.dx=-self.dx
				self.x-=2
				elseif self.x<camx then 
				self.dx=-self.dx
				self.x+=2
				
			end
         	if self.y+8>camy+130 and self.dy>0 then self.dy=-self.dy
				elseif self.y<camy then self.dy=-self.dy
				
			end  

          end  

            if self.life <= .5 then
                scythe -= 1
                add_flr(self.x, self.y - 2, self.itm)
                del(act, self)
            end

            if tran then
               
                
                del(act, self)
            end
            
        end,

        draw = function(self)
            if self.blktmr <= 2 then
            if not self.on_hold then
                spr(self.sp, self.x, self.y, self.flpx, self.flpy)
            end
            end
           
        end
    })
end
--[[
function find_closest_node(x, y)
    local closest_node = nil
    local min_dist = 100
    
    for _, node in ipairs(arena_nodes) do
        local dist = calc_distance({x = x, y = y}, node)

        -- Ignore nodes if within 20 pixels of node.x + 4
        if abs(x - (node.x + 4)) <16  and abs(y+10 - (node.y + 4)) < 10  then
            goto continue
        end
        
        -- Ignore nodes if the path to them intersects a tile
        if line_intersects_tile({x = x, y = y}, node) then
            goto continue
        end

        if dist < min_dist then
            min_dist = dist
            closest_node = node
        end

        ::continue::
    end
    
    return closest_node
end


function find_path(start, goal)
    if not start or not goal then return {} end
    
    local queue = {{start}}
    local visited = {}
    visited[start] = true
    
    while #queue > 0 do
        local path = table.remove(queue, 1)
        local last_node = path[#path]
        
        if last_node == goal then
            return path
        end
        
        for _, neighbor in ipairs(last_node.neighbors) do
            if not visited[neighbor] then
                visited[neighbor] = true
                local new_path = {unpack(path)}
                table.insert(new_path, neighbor)
                table.insert(queue, new_path)
            end
        end
    end
    
    return {}
end
--]]


--igor's fire attack, or anything that needs a homing fireball
function add_hmng_fir(_x,_y,_yoffset)

add (act,{
x=_x,
y=_y,
dy=0,
h=4,
w=8,
offset=0,
tall=true,
sp=208,
dx=0,
dy=0,
style=123,
fireball=true,
dxmax= expert and 3 or 2.5,
dymax=expert and 3.5 or 3,
flp=_flp,
life=.5,
weak=false,
harm=true,
tm1=0,
tm2=1,
tm3=0,
pts=100,
yoffset=_yoffset or 0,
smoothing_factor = .7,
--]]
update=function(self)

self.tm3+=1
  if not (clock and not boss and cur_stge~=18)  then
                if self.tm3 <= 1 then
                    -- Calculate desired direction towards player
                    local target_dx = (ply.x + 4) - (self.x + 4)
                    local target_dy = (ply.y + self.yoffset) - (self.y + 4)

                    -- Normalize the target deltas to limit speed
                    local length = sqrt(target_dx^2 + target_dy^2)
                    if length > 0 then
                        target_dx = (target_dx / length) * self.dxmax
                        target_dy = (target_dy / length) * self.dymax
                    end

                    -- Smoothly interpolate the current deltas towards the target deltas
                    self.dx += (target_dx - self.dx) * self.smoothing_factor
                    self.dy += (target_dy - self.dy) * self.smoothing_factor
                end

                -- Update position
                self.x += self.dx
                self.y += self.dy
if self.dx>0 then self.flp=false
else self.flp=true
end
end
if flash then self.life-=100

end
if cur_stge==18 then
 self.style=125
else self.style=123
end

if  self.life<=0 then


add_flr(self.x,self.y-2,spawn_item(),self.style)

del(act,self)


end
if self.x<camx-20 or self.x>camx+screen then
del(act,self)
end

if self.y+8<camy-20 or self.y+8>camx+screen then
del(act,self)
end

end,

draw=function(self)

 spr(self.sp,self.x,self.y,self.flp)

 end
 
 })

end

--Boss health bar scaling behavior

function update_boss_life(_health)
health=_health

    local total_boss_life = 0
    local max_boss_life = health  -- Total health of boss (combined or single)

    -- Iterate over all active entities to sum up boss health
    for entity in all(act) do
      if entity.bosslife then  
            total_boss_life += entity.mylife
       end
    end

    -- Scale total_boss_life to match the health bar scale of 16 pips
    enmy = flr((total_boss_life / max_boss_life) * 16)

    -- Ensure displayed health is at least 1 as long as there is at least one boss health
    if total_boss_life > .5 and enmy < 1 then
        enmy = 1
    end
end

function add_boss_frnk(_x,_y,_flp)

add (act,{
frank=true,
x=_x*8,
y=_y*8,
h=30,
bosslife=true,
xoffset=0,
dist="far",
pts=5000,
w=8,
sp=52,
spd=.6,
dx=0,
dy=0,
harm=false,
life=24,
mylife=24,
anm=1,
anmoffset=0,
dir=nil,
tm0=0,
tm1=0,
tm2=0,
tm3=0,
tm4=0,
tm5=0,
slam=0,


flp=_flp,

update=function(self)
self.x+=self.dx
self.y+=self.dy
self.dy+=grav
enmy=self.life

self.tm1+=.6
update_boss_life(24)

if boss then self.tm3+=1
self.tm0+=1

end

self.fist=self.flp and 7 or -8

if boss and expert then
if self.dist=="far" then
 self.tm5+=1
 else self.tm5+=2
 end
end
if self.tm3>=70 then self.tm3=rnd(30)+20
end
if boss and self.tm0>69  then

if (self.dist == "far" and self.flp) then
    self.dx = -self.spd
elseif (self.dist == "far" and not self.flp) then
    self.dx = self.spd

end

if self.dist == "close" then
    if self.flp then
        self.dx = self.spd
    else
        self.dx = -self.spd
    end

end
end
if self.tm5>325 then
self.tm5=326
self.dx=0
self.tm1=0
self.slam+=1
if self.slam<20 then
self.sp=242

else self.sp=255
self.xoffset=self.flp and 12 or 0
end
if self.slam==20 then
add_smsh(self.x-(self.xoffset+self.fist),self.y+2,self.flp)
end
if self.slam>100 then
self.tm5=0
self.slam=0 
self.xoffset=0
end

end

if boss and self.tm0>99 then
if self.tm3>=69 and self.tm3>0 then
local distance = abs((self.x + 4) - (ply.x + 4))
if distance <=55  then
        self.dist = "close"
        
      
    elseif distance >= 70 then
        self.dist = "far"
    end
end
end
if self.tm3>=0 then
if ply.x+4<self.x+4 then
self.flp=true
else
self.flp=false
end
end

if self.tm1>=15 then self.tm1=0
self.anm+=1
if self.anm>4 then self.anm=1

end
end
if (self.x+8 > camx+screen or self.x < camx)  and self.dist=="close" then


self.dist="far"
end
if self.slam==0 then
if self.anm==1 then self.sp=52
elseif self.anm==2 then self.sp=53
elseif self.anm==3 then self.sp=54
elseif self.anm==4 then self.sp=53


end

end

if camx==camxmax and not boss then
camxmin=camxmax
boss=true
bossmus=true
end

if self.tm0>=100 and boss then self.tm0=100

self.harm=true
self.tm2+=.1
end

if self.tm2>=1 then self.tm2=1



end

if self.tm2~=1 then self.tm1+=0
self.dx=0
end


if boss and abs(ply.x+4-self.x+4)>15 and self.tm3>=99 then

end

 if collide_map(self,"down",0) and self.dy>0 
then

self.dy=0 
self.y-=flr((self.y+self.h)%8)


end

if self.mylife<=.5   then
self.life=0
 add_flr(self.x,self.y+12,nil, 126)
 add_flr(self.x-6,self.y+12,nil,126)
 add_flr(self.x+6,self.y+12,nil,126)
 add_flr(self.x,self.y+24,nil, 126)
 add_flr(self.x-6,self.y+24,nil, 126)
 add_flr(self.x+6,self.y+24,nil, 126)
 for i in all(act)do
 
 if i.igor then
 add_flr(i.x+4,i.y+4,nil,126)
   del(act,i)
 
end
end

 del(act,self)
 
 end


 
 





end,

draw=function(self)

 spr(self.sp,self.x-self.xoffset,self.y+6,self.flp)
-- print(self.life,self.x,self.y,7)
-- print(self.mylife,self.x,self.y-8,7)

 end
 
 })

end

function add_boss_igor(_x,_y)
add (act,{

igor=true,
x=_x,
offset=0,
offsety=0,
y=_y,
dx=0,
dy=0,
dxmax=5,
spd=3,
dymax=1,
land=false,
spd=1,
h=8,
w=8,
sp=238,
harm=false,
pts=25,
shoot=0,
blktmr=0,
tm0=0,
tm1=0,
tm2=1,
tm3=0,
blink=false,
life=1,
update=function(self)
self.blink=self.blktmr % 4 > 2 and true or false 
self.tm1+=1


if self.tm2>=1 then
self.x+=self.dx
self.y+=self.dy
end
if boss then

self.tm3+=1
end
if self.land then 
self.tm0+=1
end

--igor's jump
if self.tm0>20 then 
self.land=false
if rnd(1)<.5 then
self.dy=-3.5
else self.dy=-2.3
end
self.tm0=0
end
if self.tm3>180 and self.blktmr==0 then
if self.dy<0 then 
 self.sp=239
else self.sp=238
end
end

if self.dy>.1 and self.tm3>180 then
self.shoot+=.1
end
if self.dy>0 and self.shoot<.1 and self.blktmr==0 then
add_hmng_fir(self.x+4,self.y+4,4)
end

if not self.land then
if self.x<camx then self.x+=3
self.flp=not self.flp
elseif self.x+8>camx+screen then self.x-=3
self.flp=not self.flp
end
end

if self.tm3<180 then
self.sp=self.tm1%16>8 and 238 or 239

for a in all(act) do
if a.frank then self.x=a.x-2 
self.flp=a.flp
self.y=a.y-4
end
end

end

if self.tm3>180 then self.dy+=grav
self.harm=true
if not self.land then
if self.flp then self.dx=-1.6
else self.dx=1.6

end
end
end

if self.land then self.dx=0
self.dy=0
end

if collide_map(self,"down",0) and self.tm3>=180 then 
self.shoot=0
self.land=true
self.y-=flr((self.y+self.h-16)%8) 
end

if self.y>125 then

self.y=50
end

if self.life<=.5  then
self.life=0
 self.blktmr+=1
 if self.blktmr>=80 then
 self.life+=1
 self.tm2=1
 self.blktmr=0
 end

 
 end

end,
draw=function(self)

 --adjust y to land on floor, possible whip inaccuracies???

if not self.blink then
 spr(self.sp,self.x,self.y+8,self.flp)
end
 end
 
 
 
 })

end
function add_boss_dracula(_x,_y)
add (act,{
---[[
x=_x,
armor=true,
body=true,
y=_y,
h=20,
w=24,
sp=392,
pos=4,
lastpos=0,
offsetx=0,
offsety=0,
harm=true,
life=32,
mylife=64,
pts=0,
tm0=0,
tm1=0,
tm2=0,
tm3=0,
fired=false,
phase=false,

update=function(self)
if self.tm1>252 then
self.tm2=0
if self.pos==self.lastpos then
self.pos=flr(rnd(6))
end

--if self.tm0==61 then
if self.pos==0 then self.x=camx+10
elseif self.pos==1 then self.x=camx+50
elseif self.pos==2 then self.x=camx+110
elseif self.pos==3 then self.x=camx+180
elseif self.pos==4 then self.x=camx+210
elseif self.pos==5 then self.x=ply.x-4             
--end
end
end
self.tm0+=1

self.tm2+=.1
for dracula in all(act)do
if dracula.bosslife and not dracula.fly then
self.tm1+=1
else self.tm1+=0
end
end


if self.tm0<80 then

self.tm1=flr(rnd(70)+20)

self.blink=flash_timer%2<1 and true or false
else 
self.blink=false

end
if self.tm0==82 then self.lastpos=self.pos
end

if self.tm0>=120 then self.tm0=120
end

if self.tm1>100 then
self.sp=393
elseif self.tm1<100 then self.sp=392
end
if self.tm1>251 then self.sp=392
end

if self.tm1==110 then


self.fired=true
else self.fired=false
end
if self.fired then
add_hmng_fir(self.x+8,self.y+8,-4)
add_hmng_fir(self.x+8,self.y+10,5)
add_hmng_fir(self.x+8,self.y+14,15)
end



--self.mylife=self.life
--enmy=self.life
if self.blink then self.tm2=0
end

if self.tm2>=1 then self.tm2=1
self.life=32
end
if self.tm1>200 then self.tm2=0
end

if not self.flp then self.offsetx=6
else self.offsetx=0
end

for dracula in all(act)do
if not dracula.body then
if self.blink and dracula.bosslife then dracula.tm2=0
end
dracula.tm1=self.tm1

if self.tm1>=310 then
self.tm1=0 
self.tm0=flr(rnd(50))


end
if self.blink==false and self.tm2>=.5 then
self.harm=true
else self.harm=false
end


if dracula.fly then 
self.phase=true
dracula.tm2=0
self.fired=false
self.tm2=0

if self.tm1==110 then
self.tm1+=1
end
self.harm=false
dracula.harm=false
end
if (dracula.head and not dracula.fly) then 
if ply.x+4< self.x+10 then
self.flp=true
else self.flp=false

end
if self.flp then dracula.x=self.x+3
else dracula.x=self.x+13
end
end
end
end
if self.tm1>199 then
self.harm=false

self.pos=flr(rnd(6))
end
if self.phase then
self.tm3+=1
end
--update_boss_life(32)
--if self.life<=1 then
--self.tm3+=1

-- add_flr(self.x+7,self.y-2,nil, 126)
-- add_flr(self.x+1,self.y-2,nil,126)
-- add_flr(self.x+13,self.y-2,nil,126)
-- add_flr(self.x+7,self.y+10,nil, 126)
-- add_flr(self.x+1,self.y+10,nil, 126)
-- add_flr(self.x+13,self.y+10,nil, 126)
 
-- del(act,self)
 
-- end

if self.tm3>=210 then
enmy=16
add_debris(self.x,self.y,false,-1.5)
add_debris(self.x,self.y,false)
add_debris(self.x,self.y,false,1.5)

add_debris(self.x,self.y,true,-1.5)
add_debris(self.x,self.y,true)
add_debris(self.x,self.y,true,1.5)
boss=true
add_boss_curse_of_man_legs(self.x,self.y+11)
--add_boss_curse_of_man(self.x,self.y)

del(act,self)
end
end,
draw=function(self)

-- print(self.tm1,self.x,self.y-20,7)

 --print(tostring(self.phase),self.x,self.y-8,7)

  if self.blink==false and self.tm1<200 and self.tm3<200 then
 spr(self.sp,self.x,self.y+3,self.flp)
 
end
 
 end
 
 
 
 })

end
function add_boss_dracula_head(_x,_y)
add (act,{
---[[
head=true,
x=_x,
bosslife=true,
knight=true,
armor=true,
--body=true,
ready=false,
y=_y,
fly=false,
dx=0,
dy=0,
h=10,
w=8,
sp=394,
offsetx=0,
offsety=0,
harm=true,
life=32,
mylife=64,
pts=0,
tm1=0,
tm2=0,
tm0=0,
show=0,
blink=false,


update=function(self)
self.show+=1
if self.show>=30 then self.show=30
end
if self.show==30 then
self.tm0+=1
end
self.y+=self.dy
self.tm2+=.1
if self.tm0>=250 then self.tm0=250
end
for dracula in all(act) do
if not self.fly then
if self.tm0>80 and dracula.body and self.y>75+8 then
self.y-=.5
dracula.y-=.5
end

if dracula.body then
if self.tm0~=250 then
dracula.tm0=0
dracula.tm1=0
dracula.tm3=0
dracula.blink=true
end
end
end
end
if self.fly then
self.harm=false
self.x+=self.dx
self.y+=self.dy



for wpn in all(wpn) do
if wpn.x+(wpn.w/2) < self.x+4 then

  self.dx=2
else 
self.dx=-2
end
end
for w in all(whp) do
if ply.x+4 < self.x+4 then

  self.dx=2
else 

self.dx=-2

end
end
end

if self.tm1>150 then
self.tm2=0
harm=false
self.blink=flash_timer%2<1 and true or false
else self.blink= false
end




if ply.x+4< self.x+4  then
self.flp=true
else self.flp=false

end

if self.dx>0  then
self.flp=false
elseif self.dx<0 then self.flp=true

end


self.mylife=self.life
enmy=self.life


if self.tm2>=1 then self.tm2=1

end

if not self.flp then self.offsetx=10
else self.offsetx=0
end
if self.tm1>249 then
self.harm=false
self.tm2=0

end

update_boss_life(32)
if self.life<=1  then
self.dy+=grav/2

if not self.fly then
enmy-=2
self.dy-=1.5
self.fly=true
end
end
if self.fly and self.y>camy+200 then
 del(act,self)
end 
 


end,
draw=function(self)

-- print("Meep!",self.x,self.y-16,7)
 if not self.blink and self.tm1<200 and self.show==30 then
 spr(self.sp,self.x,self.y,self.flp)
 end
 end
 
 
 
 })

end
function add_boss_curse_of_man(_x,_y)
add (act,{
---[[
x=_x,
bosslife=true,
knight=true,
armor=true,
body=true,
y=_y,
dx=0,
dy=0,
dxmax=5,
spd=3,
dymax=1.5,
trvl=0,
land=false,

mysong=false,
spd=1,
h=16,
w=24,
sp=385,
sp2=387,
offsetx=0,
offsety=0,


harm=true,
life=32,
mylife=64,
pts=50000,


tm1=0,
tm2=0,


update=function(self)
self.offsetx = self.flp and 0 or 6
if not self.harm then
self.tm1+=0
else self.tm1+=1
end
self.tm2+=.1
if ply.x+4< self.x+16 then
self.flp=true
else self.flp=false

end
if self.tm1>=60 then
self.tm1=0
end
if self.tm1>30 and not self.mysong then
music(65,0,15)
self.mysong=true
end
if self.tm2>=1 then
self.x+=self.dx
self.y+=self.dy

self.mylife=self.life
enmy=self.life

self.sp2=self.tm1%60<30 and 387 or 386


if self.dy>self.dymax then
self.dy=self.dymax
end




if (self.x-4<=camx or self.x+24>camx+screen) then
self.dx=-self.dx
end

if self.land and self.x+24>camx+screen then

self.x-=2
end

if self.land and self.x-4<camx then

self.x+=4
end

if self.tm2>=1 then self.tm2=1

end


self.offsetx = self.flp and 0 or 6

if self.land then
self.dx, self.dy= 0,0

end

if collide_map(self, "down", 0) and self.dy > 0 then
    if not self.land then
      

        self.land = true
    end
end

end

update_boss_life(64)
if self.life<=1 then
score+=self.pts
lifescore+=self.pts
 add_flr(self.x+7,self.y-2,nil, 126)
 add_flr(self.x+1,self.y-2,nil,126)
 add_flr(self.x+13,self.y-2,nil,126)
 add_flr(self.x+7,self.y+10,nil, 126)
 add_flr(self.x+1,self.y+10,nil, 126)
 add_flr(self.x+13,self.y+10,nil, 126)
 enmy=0
 del(act,self)
 
 end


end,
draw=function(self)

-- print(self.life,self.x,self.y-20,7)
 spr(self.sp,self.x,self.y+self.offsety,self.flp)
 if self.sp==385 then
 spr(self.sp2,self.x+4+self.offsetx,self.y+5+self.offsety,self.flp)
end
 end
 
 
 
 })

end
function add_boss_curse_of_man_legs(_x,_y)
add (act,{
---[[
x=_x,
fireball=true,
armor=true,
y=_y,
dx=0,
dy=0,
dxmax=5,
spd=3,
dymax=3,
trvl=0,
land=false,
jumpoffset=0,
mysong=false,
spd=1,
h=16,
w=24,
sp=388,
sp1=389,
flp=false,
offsetx=0,
offsety=0,
state="spawn",
move=1,
harm=true,
life=32,
flp1=false,
flp2=false,
pts=0,
jump=5.1,
bigjump=6,
jumps=0,
fired=false,
tm1=-60,
tm2=2,


update=function(self)
self.offsetx= self.flp and 0 or 12
if self.state=="spawn" then
add_boss_curse_of_man(self.x,self.y)
self.dx=0
self.dy+=.2
self.state="stand"
end


self.tm2+=.1
if ply.x+4< self.x+16 then
self.flp=true
else self.flp=false

end
if self.state=="land" and self.tm1>=15 then
self.state="stand"
self.tm1=0
end

if collide_map(self, "down", 0) then
if self.state=="spawn" then self.state="stand"
end
    if not self.land and self.state~="spawn" and self.dy>0 then
   
       self.land = true
       if self.state=="jump" then
       sfx(319,-1)
   self.state="land"
   end  
    end
     else self.land=false
     if self.state~="spawn" then
     self.state="jump"
     end
end

if self.state=="stand" then
self.sp=388
self.sp1=389
self.offsety=0
end
if self.state=="crouch" or self.state=="land" then
self.sp=390
self.sp1=390
self.offsety=6
--else self.offsety=0
end
if self.tm2<1 then
self.tm1+=0
self.harm=false
else self.harm=true
self.tm1+=1
end
if self.tm2>=1  then


self.x+=self.dx
self.y+=self.dy
self.dy+=grav

--self.life=32


self.offsetx= self.flp and 0 or 12


if self.dy>self.dymax then
self.dy=self.dymax
end

---[[
if self.land and self.jumps==2 and self.tm1==100 and rnd(1)<.7 then
 
self.state="fire"
self.tm1=0
self.jumps+=1
end
if self.land and self.tm1>100 then 
self.state="crouch"
end
--]]
if self.state=="fire" and self.tm1>=25 then
if not self.fired then
sfx(264,-1)
add_hmng_fir(self.x+8,self.y-20,-4)
add_hmng_fir(self.x+8,self.y-16,6)
add_hmng_fir(self.x+8,self.y-12,15)
self.fired=true
end
if self.tm1>=50 then
self.tm1=0
self.fired=false
self.state="stand"
end
end
if self.tm1>=120 then 
if self.flp then self.jumpoffset=-2
else self.jumpoffset=2

end
if self.jumps>=3 then self.move=.5
else self.move=1
end


if self.land then
self.state="jump"
self.land=false
self.jumps+=1
--self.y-=3

if self.jumps<=3 then
self.dy-=self.jump
elseif self.jump>=4 then
self.dy-=self.bigjump
self.jumps=flr(rnd(2))
end
if ply.x+4>self.x+8 then self.dx=self.move
elseif ply.x+4<self.x+8 then self.dx=-self.move
end
self.tm1=0
end

end

if self.x+4<=camx or self.x+24>camx+screen then
self.dx=-self.dx
end

if self.land and self.x+24>camx+screen then

self.x-=2
end

if self.land and self.x-4<camx then

self.x+=4
end

if self.tm2>=1 then self.tm2=1

end


if self.land then
self.jumpoffset=0
--self.tm1+=1
self.dx=0 
self.y-=flr((self.y+self.h-16)%8)
else self.tm1=0
--self.dx=self.move
end



end


if self.state=="jump" then
self.sp=389
if abs(self.dy)>=1 then self.sp1=389
else self.sp1=390 
end
end

for boss in all(act)do
if boss.body then
boss.harm=self.harm
  boss.x=self.x-1
boss.y=self.y-24
if self.state=="jump" or self.state=="fire" then
boss.sp=384
boss.sp1=nil
else boss.sp=385
if self.state=="crouch" or self.state=="land" then boss.offsety=6
else boss.offsety=0

end
end
end
end


if enmy==0 then
 add_flr(self.x+6,self.y-2,nil, 126)
 add_flr(self.x,self.y-2,nil,126)
 add_flr(self.x+12,self.y-2,nil,126)
 add_flr(self.x+6,self.y+8,nil, 126)
 add_flr(self.x,self.y+8,nil, 126)
 add_flr(self.x+12,self.y+8,nil, 126)
 
 del(act,self)
 
 end

end,
draw=function(self)

-- print(self.move,self.x,self.y-36,7)
-- print(self.dx,self.x-20,self.y-16,7)
-- print(tostring(self.begin),self.x,self.y-28,7)
-- print(tostring(self.fired),self.x-26,self.y,7)
 spr(self.sp,self.x+9-self.offsetx+self.jumpoffset,self.y+self.offsety,self.flp)
 spr(self.sp1,self.x-3+self.offsetx+(self.jumpoffset),self.y+self.offsety,self.flp)


 end
 
 
 
 })

end
:: clone.lua
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNS0wMi0xNyAwODoyODoxNSIsbW9k
aWZpZWQ9IjIwMjUtMDMtMDUgMTA6MDU6MzQiLHJldmlzaW9uPTkxOV1dCmxvY2FsIHRhcmdldD0g
ewogICAgICAgIHggPSAtOSwgLS0gU3RhcnQgbmV4dCB0byB0aGUgYm9zcyBjbG9uZQogICAgICAg
ICAgICB5ID0gNTAsCiAgICAgICAgICAgIHNwID0gMjI2CiAgICAgICAgfQpsb2NhbCBtYXJrZXI9
IHsKICAgICAgICB4ID0gMTIwLCAtLSBTdGFydCBuZXh0IHRvIHRoZSBib3NzIGNsb25lCiAgICAg
ICAgICAgIHkgPSA4MCwKICAgICAgICAgICAgc3AgPSAyMwogICAgICAgIH0KCmZ1bmN0aW9uIGZp
bmRfY2xvc2VzdF9ub2RlKHgsIHkpCiAgICBsb2NhbCBjbG9zZXN0X25vZGUgPSBuaWwKICAgIGxv
Y2FsIG1pbl9kaXN0ID0gMTAKICAgIAogICAgZm9yIF8sIG5vZGUgaW4gaXBhaXJzKGFyZW5hX25v
ZGVzKSBkbwogICAgICAgIGxvY2FsIGRpc3QgPSBjYWxjX2Rpc3RhbmNlKHt4ID0geCwgeSA9IHl9
LCBub2RlKQoKICAgICAgICAtLSBJZ25vcmUgbm9kZXMgaWYgd2l0aGluIDIwIHBpeGVscyBvZiBu
b2RlLnggKyA0CiAgICAgICAgaWYgYWJzKHggLSAobm9kZS54ICsgNCkpIDwyMCAgIHRoZW4KICAg
ICAgICAgICAgZ290byBjb250aW51ZQogICAgICAgIGVuZAogICAgICAgIAogICAgICAgIC0tIEln
bm9yZSBub2RlcyBpZiB0aGUgcGF0aCB0byB0aGVtIGludGVyc2VjdHMgYSB0aWxlCiAgICAgICAg
aWYgbGluZV9pbnRlcnNlY3RzX3RpbGUoe3ggPSB4LCB5ID0geX0sIG5vZGUpIHRoZW4KICAgICAg
ICAgICAgZ290byBjb250aW51ZQogICAgICAgIGVuZAoKICAgICAgICBpZiBkaXN0IDwgbWluX2Rp
c3QgdGhlbgogICAgICAgICAgICBtaW5fZGlzdCA9IGRpc3QKICAgICAgICAgICAgY2xvc2VzdF9u
b2RlID0gbm9kZQogICAgICAgICAgICAgbWFya2VyLng9bm9kZS54CiAgICBtYXJrZXIueT1ub2Rl
LnktMTYKICAgICAgICBlbmQKCiAgICAgICAgOjpjb250aW51ZTo6CiAgICBlbmQKICAgIAogICAg
cmV0dXJuIGNsb3Nlc3Rfbm9kZQogICAKZW5kCgoKZnVuY3Rpb24gZmluZF9wYXRoKHN0YXJ0LCBn
b2FsKQogICAgaWYgbm90IHN0YXJ0IG9yIG5vdCBnb2FsIHRoZW4gcmV0dXJuIHt9IGVuZAoKICAg
IGxvY2FsIHF1ZXVlID0ge3tzdGFydH19CiAgICBsb2NhbCB2aXNpdGVkID0ge30KICAgIHZpc2l0
ZWRbc3RhcnRdID0gdHJ1ZQoKICAgIHdoaWxlICNxdWV1ZSA_IDAgZG8KICAgICAgICBsb2NhbCBw
YXRoID0gdGFibGUucmVtb3ZlKHF1ZXVlLCAxKQogICAgICAgIGxvY2FsIGxhc3Rfbm9kZSA9IHBh
dGhbI3BhdGhdCgogICAgICAgIGlmIGxhc3Rfbm9kZSA9PSBnb2FsIHRoZW4KICAgICAgICAgICAg
LS0gVXBkYXRlIG1hcmtlciB0byBiZSBhYm92ZSB0aGUgZmlyc3Qgbm9kZSBpbiB0aGUgcGF0aCAo
dGhlIG5leHQgdGFyZ2V0KQogICAgICAgICAgICBpZiAjcGF0aCA_IDEgdGhlbgogICAgICAgICAg
ICAgICAgbWFya2VyLnggPSBwYXRoWzJdLngKICAgICAgICAgICAgICAgIG1hcmtlci55ID0gcGF0
aFsyXS55IC0gMTYgLS0gVmlzdWFsbHkgYWJvdmUgdGhlIG5vZGUKICAgICAgICAgICAgZW5kCiAg
ICAgICAgICAgIHJldHVybiBwYXRoCiAgICAgICAgZW5kCgogICAgICAgIGZvciBfLCBuZWlnaGJv
ciBpbiBpcGFpcnMobGFzdF9ub2RlLm5laWdoYm9ycykgZG8KICAgICAgICAgICAgaWYgbm90IHZp
c2l0ZWRbbmVpZ2hib3JdIHRoZW4KICAgICAgICAgICAgICAgIHZpc2l0ZWRbbmVpZ2hib3JdID0g
dHJ1ZQogICAgICAgICAgICAgICAgbG9jYWwgbmV3X3BhdGggPSB7dW5wYWNrKHBhdGgpfQogICAg
ICAgICAgICAgICAgdGFibGUuaW5zZXJ0KG5ld19wYXRoLCBuZWlnaGJvcikKICAgICAgICAgICAg
ICAgIHRhYmxlLmluc2VydChxdWV1ZSwgbmV3X3BhdGgpCiAgICAgICAgICAgIGVuZAogICAgICAg
IGVuZAogICAgZW5kCgogICAgcmV0dXJuIHt9CmVuZAoKCgogICAgICAgIApmdW5jdGlvbiBhZGRf
Ym9zc19jbG9uZShfeCwgX3ksIF9mbHApCiAgICBhZGQoYWN0LCB7IAogICAgICAgIHggPSBfeCAq
IDgsCiAgICAgICAgeSA9IF95ICogOCwKICAgICAgICB5b2ZmID0gMCwKICAgICAgICBoID0gMTYs
CiAgICAgICAgcHRzID0gNTAwMCwKICAgICAgICB3ID0gOCwKICAgICAgICBzcCA9IDAsCiAgICAg
ICAgc3AyID0gMCwKICAgICAgICBkeCA9IDAsCiAgICAgICAgYnVmID0gMCwKICAgICAgICBkeSA9
IDAsCiAgICAgICAgaGFybSA9IHRydWUsCiAgICAgICAgbGlmZSA9IDE2LAogICAgICAgIGFubSA9
IDEsCiAgICAgICAgbG5kID0gdHJ1ZSwKICAgICAgICBhdGsgPSBmYWxzZSwKICAgICAgICB0YXJn
ZXQgPSBuaWwsCiAgICAgICAgam1wID0gZmFsc2UsCiAgICAgICAgYW5tb2Zmc2V0ID0gMCwKICAg
ICAgICBjb2wgPSAxLAogICAgICAgIHRtMCA9IDAsCiAgICAgICAgdG0xID0gMCwKICAgICAgICB0
bTIgPSAxLAogICAgICAgIHRtMyA9IDAsCiAgICAgICAgdG00ID0gMCwKICAgICAgICB0bTUgPSAw
LAogICAgICAgIHN0YXRlID0gInN0YW5kIiwKICAgICAgICBpbnJhbmdlID0gZmFsc2UsCiAgICAg
ICAgZGlyZWN0aW9uID0gbmlsLAogICAgICAgIGNhbmp1bXA9dHJ1ZSwKICAgICAgICBmbHAgPSBf
ZmxwLAogICAgICAgICBtYXJrZXJfbGlzdCA9IHt9LCAtLSBTdG9yZXMgdGhlIHdheXBvaW50cwog
ICAgICAgIC0tIERlYnVnIG9iamVjdCB0byBtb3ZlIGFyb3VuZCBtYW51YWxseQogICAgICAgIGRl
YnVnX29iaiA9IHsKICAgICAgICAgICAgeCA9IF94ICogOCArIDE2LCAtLSBTdGFydCBuZXh0IHRv
IHRoZSBib3NzIGNsb25lCiAgICAgICAgICAgIHkgPSBfeSAqIDgsCiAgICAgICAgICAgIHNwID0g
NiAtLSBEZWJ1ZyBzcHJpdGUgaW5kZXgKICAgICAgIAogICAgICAgIH0sCiAgICAgICAKCiAgICAg
ICAgdXBkYXRlID0gZnVuY3Rpb24oc2VsZikKICAgICAgbG9jYWwgIHByZXZfbW91c2VfYiA9IHBy
ZXZfbW91c2VfYiBvciAwICAtLSBTdG9yZSBwcmV2aW91cyBtb3VzZSBzdGF0ZQogICAgICBsb2Nh
bCBteCwgbXksIG1vdXNlX2IgPSBtb3VzZSgpIC0tIEdldCBtb3VzZSBwb3NpdGlvbiBhbmQgYnV0
dG9uIHN0YXRlCiAgICAgIGxvY2FsIHRhcmdldF9ub2RlID0gZmluZF9jbG9zZXN0X25vZGUobXgs
IG15KQogICAKICAgICAgICAgICAgLS0gVXBkYXRlIGRlYnVnIG9iamVjdCBwb3NpdGlvbgogICAg
ICAgICAgICBzZWxmLmRlYnVnX29iai54ID0gbXgKICAgICAgICAgICAgc2VsZi5kZWJ1Z19vYmou
eSA9IG15CgpzZWxmLmNhbmp1bXA9bWFya2VyLnk8c2VsZi55ICBhbmQgdHJ1ZSBvciBmYWxzZQoK
IC0tW1sgICAgICAgICAgCiAgaWYgbW91c2VfYiA9PSAxIGFuZCBwcmV2X21vdXNlX2IgPT0gMCB0
aGVuCiAgICAgbWFya2VyLng9c2VsZi5kZWJ1Z19vYmoueCAgIAogICAgIG1hcmtlci55PXNlbGYu
ZGVidWdfb2JqLnkgICAKICAgIGVuZAogICAgLS1dXQogICBpZiBtb3VzZV9iID09IDEgYW5kIHBy
ZXZfbW91c2VfYiA9PSAwIHRoZW4KICAgIHRhcmdldC54ID0gc2VsZi5kZWJ1Z19vYmoueAogICAg
dGFyZ2V0LnkgPSBzZWxmLmRlYnVnX29iai55CgogICAgLS0gRmluZCBhIG5ldyBwYXRoIGFuZCBz
ZXQgdGhlIGZpcnN0IG1hcmtlciBwb3NpdGlvbgogICAgbG9jYWwgZW50cnlfbm9kZSA9IGZpbmRf
Y2xvc2VzdF9ub2RlKHNlbGYueCwgc2VsZi55KQogICAgbG9jYWwgZXhpdF9ub2RlID0gZmluZF9j
bG9zZXN0X25vZGUodGFyZ2V0LngsIHRhcmdldC55KQogICAgc2VsZi5wYXRoID0gZmluZF9wYXRo
KGVudHJ5X25vZGUsIGV4aXRfbm9kZSkKCiAgICAtLSBNb3ZlIG1hcmtlciB0byB0aGUgZmlyc3Qg
bm9kZQogICAgaWYgc2VsZi5wYXRoIGFuZCAjc2VsZi5wYXRoID4gMSB0aGVuCiAgICAgICAgbWFy
a2VyLnggPSBzZWxmLnBhdGhbMV0ueAogICAgICAgIG1hcmtlci55ID0gc2VsZi5wYXRoWzFdLnkt
MgogICAgZW5kCmVuZAoKICAgIAogCgogICAgLS0gU3RvcmUgY3VycmVudCBidXR0b24gc3RhdGUg
Zm9yIG5leHQgZnJhbWUKICAgIHByZXZfbW91c2VfYiA9IG1vdXNlX2IKICAgICAgICAgICAgLS0g
VXBkYXRlIGRlYnVnIG9iamVjdCBwb3NpdGlvbiB0byBmb2xsb3cgdGhlIG1vdXNlCiAgICAgICAg
ICAgIHNlbGYuZGVidWdfb2JqLnggPSBteAogICAgICAgICAgICBzZWxmLmRlYnVnX29iai55ID0g
bXkKICAgICAgICAgICAgc2VsZi54ICs9IHNlbGYuZHgKICAgICAgICAgICAgc2VsZi55ICs9IHNl
bGYuZHkKICAgICAgICAgICAgc2VsZi5keSArPSBncmF2CiAgICAgICAgICAgIHNlbGYudG0wICs9
IDEKICAgICAgICAgICAgc2VsZi50bTUgKz0gMQogICAgICAgICAgICBzZWxmLnRtMiArPSAwLjEK
ICAgICAgICAgICAKICAgICAgICAgICAgaWYgc2VsZi50bTIgPj0gMSB0aGVuIHNlbGYudG0yID0g
MSAKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIC0tIENoZWNrIGlmIHRoZSBtb3VzZSBpcyBp
bnNpZGUgYW55IG5vZGXigJlzIGJvdW5kaW5nIGJveAogICAgLS0gUmVzZXQgYWxsIG5vZGVzIHRv
IG5vcm1hbCBjb2xvcgogICAgZm9yIF8sIG5vZGUgaW4gaXBhaXJzKGFyZW5hX25vZGVzKSBkbwog
ICAgICAgIG5vZGUuaG92ZXJlZCA9IGZhbHNlCiAgICBlbmQKCi0tIElmIHdlJ3ZlIHJlYWNoZWQg
dGhlIG1hcmtlciwgbW92ZSB0byB0aGUgbmV4dCBub2RlCmlmIGFicygoc2VsZi54ICsgNCkgLSAo
bWFya2VyLnggKyA0KSkgPCAzIGFuZCBhYnMoKHNlbGYueSArIDQpIC0gKG1hcmtlci55ICsgNCkp
IDwgNyB0aGVuCiAgICAtLSBNb3ZlIHRvIHRoZSBuZXh0IG5vZGUgaW4gdGhlIHBhdGgKICAgIGlm
IHNlbGYucGF0aCBhbmQgI3NlbGYucGF0aCA_IDAgdGhlbgogICAgdGFibGUucmVtb3ZlKHNlbGYu
cGF0aCwgMSkKICAgIGxvY2FsIG5leHRfbm9kZSA9IHNlbGYucGF0aFsxXQogICAgaWYgbmV4dF9u
b2RlIHRoZW4KICAgICAgICBtYXJrZXIueCA9IG5leHRfbm9kZS54CiAgICAgICAgbWFya2VyLnkg
PSBuZXh0X25vZGUueSAtIDIKICAgICAgICBlbHNlCiAgICAgICAgICAgIC0tIElmIHRoaXMgaXMg
dGhlIGxhc3Qgbm9kZSwgdXBkYXRlIG1hcmtlciB0byBtYXRjaCBpdAogICAgICAgICAgICBtYXJr
ZXIueCA9IHRhcmdldC54CiAgICAgICAgICAgIG1hcmtlci55ID0gdGFyZ2V0LnkgLSAyCiAgICAg
ICAgCiAgICBlbmQKZWxzZQogICAgc2VsZi5keCA9IDAgIC0tIFN0b3AgbW92aW5nIHdoZW4gdGhl
cmUgYXJlIG5vIG1vcmUgbm9kZXMKICAgIHNlbGYuc3RhdGUgPSAic3RhbmQiCmVuZAoKZW5kCgog
IAogICAgICAKICAgICAgICAgICAgaWYgYWJzKChzZWxmLnggKyA0KSAtIChtYXJrZXIueCArIDQp
KSA8MyB0aGVuCiAgICAgICAgICAgICAgICBzZWxmLmlucmFuZ2UgPSB0cnVlCiAgICAgICAgICAg
ICAgICBzZWxmLnN0YXRlID0gInN0YW5kIgogICAgICAgICAgICAgICAgIAogICAgICAgICAgICBl
bHNlCiAgICAgICAgICAgICAgICBzZWxmLmlucmFuZ2UgPSBmYWxzZQogICAgICAgICAgICAgCiAg
ICAgICAgICAgICAgICAgIGlmIHNlbGYudG0wICUgNTAgPT0gMCBhbmQgbm90IHBseS5kZWQgdGhl
bgogICAgICAgICAgICAgICAgICAgIHNlbGYuc3RhdGUgPSAid2FsayIKICAgICAgICAgICAgICAg
IGVuZAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGVuZAoKICAgIGlmIHRhcmdldF9ub2Rl
IHRoZW4KICAgICAgICAtLSBTZXQgZGlyZWN0aW9uIHRvIG1vdmUgdG93YXJkIHRoZSBjbG9zZXN0
IG5vZGUKICAgICAgICBzZWxmLmRpcmVjdGlvbiA9IG1hcmtlci54IDwgc2VsZi54IGFuZCAibGVm
dCIgb3IgInJpZ2h0IgogICAgZW5kCiAgCgoKCiAgICAgICAgICAgIC0tIElmIHdpdGhpbiByYW5n
ZSBhbmQgcGxheWVyIGF0dGFja3MsIGp1bXAKICAgICAgICAgICAgaWYgc2VsZi5pbnJhbmdlIGFu
ZCBub3QgcGx5LmptcCB0aGVuCiAgICAgICAgICAgICAgICBpZiAocGx5LmF0ayBvciBwbHkudGh3
KSBhbmQgbm90IHNlbGYuam1wIGFuZCBub3Qgc2VsZi5hdGsgYW5kIGZscihhYnMoc2VsZi55IC0g
cGx5LnkpKSA8PSA4IHRoZW4KICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXRlID0gImp1bXAi
CiAgICAgICAgICAgICAgICAgICAgc2VsZi5qbXAgPSB0cnVlCiAgICAgICAgICAgICAgICBlbmQK
ICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAtLSBKdW1waW5nIHN0YXRlIGFuaW1hdGlvbgog
ICAgICAgICAgICBpZiBzZWxmLmptcCB0aGVuCiAgICAgICAgICAgICAgICBpZiBzZWxmLmR5IDw9
IDAgdGhlbgogICAgICAgICAgICAgICAgICAgIHNlbGYuYW5tID0gNQogICAgICAgICAgICAgICAg
ZWxzZQogICAgICAgICAgICAgICAgICAgIHNlbGYuYW5tID0gMQogICAgICAgICAgICAgICAgZW5k
CiAgICAgICAgICAgIGVuZAogICAgICAgICAgICAKICAgICAgICAgCgogICAgICAgICAgICBpZiBz
ZWxmLnRtMCA_PSA2MCB0aGVuIHNlbGYudG0wID0gMCBlbmQKCiAgICAgICAgICAgIC0tIFdhbGtp
bmcgYW5kIHN0YW5kaW5nIGFuaW1hdGlvbnMKICAgICAgICAgICAgaWYgc2VsZi5hbm0gPT0gMSB0
aGVuIHNlbGYuc3AgPSA2NiBzZWxmLnNwMiA9IDgyIHNlbGYueW9mZiA9IDAgZW5kCiAgICAgICAg
ICAgIGlmIHNlbGYuYW5tID09IDIgb3Igc2VsZi5hbm0gPT0gNCB0aGVuIHNlbGYuc3AgPSA2NyBz
ZWxmLnNwMiA9IDgzIGVuZAogICAgICAgICAgICBpZiBzZWxmLmFubSA9PSAzIHRoZW4gc2VsZi5z
cCA9IDY4IHNlbGYuc3AyID0gODQgZW5kCiAgICAgICAgICAgIGlmIHNlbGYuYW5tID09IDUgdGhl
biBzZWxmLnNwID0gNjYgc2VsZi5zcDIgPSA4NSBzZWxmLnlvZmYgPSA0IGVuZAogICAgICAgICAg
ICBpZiBzZWxmLmFubSA9PSA2IHRoZW4gc2VsZi5zcCA9IDY5IHNlbGYuc3AyID0gODIgc2VsZi55
b2ZmID0gMCBlbmQKICAgICAgICAgICAgaWYgc2VsZi5hbm0gPT0gNyB0aGVuIHNlbGYuc3AgPSA3
MCBzZWxmLnNwMiA9IDgyIGVuZAogICAgICAgICAgICBpZiBzZWxmLmFubSA9PSA4IHRoZW4gc2Vs
Zi5zcCA9IDcxIHNlbGYuc3AyID0gODIgZW5kCiAgICAgICAgICAgIGlmIHNlbGYuYW5tID09IDkg
dGhlbiBzZWxmLnNwID0gNzIgc2VsZi5zcDIgPSA4NyBlbmQKICAgICAgICAgICAgaWYgc2VsZi5h
bm0gPT0gMTAgdGhlbiBzZWxmLnNwID0gNzUgc2VsZi5zcDIgPSBuaWwgZW5kCiAgICAgICAgICAg
IGlmIHNlbGYuYW5tID09IDExIHRoZW4gc2VsZi5zcCA9IDkxIHNlbGYuc3AyID0gbmlsIGVuZAoK
ICAgICAgICAgICAgLS0gU3RhbmRpbmcgYmVoYXZpb3IKICAgICAgICAgICAgaWYgc2VsZi5zdGF0
ZSA9PSAic3RhbmQiIHRoZW4KICAgICAgICAgICAgICAgIHNlbGYuZHggPSAwCiAgICAgICAgICAg
ICAgICBpZiBub3Qgc2VsZi5hdGsgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBwbHku
ZGVkIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hbm0gPSAxCiAgICAgICAgICAg
ICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgaWYgcGx5LmRlZCB0aGVuCiAgICAgICAg
ICAgICAgICAgICAgICAgIHNlbGYudG00ICs9IDEKICAgICAgICAgICAgICAgICAgICAgICAgaWYg
c2VsZi50bTQgPCAxNSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFubSA9
IDEwCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIHNlbGYuYW5tID0gMTEKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAg
ICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCgogICAgICAg
ICAgICBpZiBzZWxmLnRtMCAlIDMwID09IDAgdGhlbgogICAgICAgICAgICAgICAgc2VsZi5mbHAg
PSBwbHkueCArIDQgPCBzZWxmLnggKyA0IGFuZCB0cnVlIG9yIGZhbHNlCiAgICAgICAgICAgIGVu
ZAoKICAgICAgICAgICAgLS0gV2Fsa2luZyBsb2dpYwogICAgICAgICAgICAKICAgICAgICAgICAg
aWYgc2VsZi5zdGF0ZSA9PSAid2FsayIgYW5kIHNlbGYubG5kIHRoZW4KICAgICAgICAgICAgICAg
IHdhbGsoc2VsZiwgc2VsZi5kaXJlY3Rpb24pCiAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAg
LS0gSnVtcCBsb2dpYwogICAgICAgICAgICBpZiBzZWxmLnN0YXRlID09ICJqdW1wIiBhbmQgc2Vs
Zi5jYW5qdW1wIHRoZW4KICAgICAgICAgICAgICAgIGp1bXAoc2VsZikKICAgICAgICAgICAgZW5k
CgogICAgICAgICAgICAtLSBDb2xsaXNpb24gaGFuZGxpbmcKICAgICAgICAgICAgaWYgY29sbGlk
ZV9tYXAoc2VsZiwgImRvd24iLCAwKSBhbmQgc2VsZi5keSA_IDAgYW5kIHNlbGYudG0yID4gMC4y
IHRoZW4KICAgICAgICAgICAgICAgIHNlbGYubG5kID0gdHJ1ZQogICAgICAgICAgICAgICAgc2Vs
Zi5qbXAgPSBmYWxzZQogICAgICAgICAgICAgICAgc2VsZi5idWYgPSBzZWxmLmR4CiAgICAgICAg
ICAgICAgICBzZWxmLmR5ID0gMAogICAgICAgICAgICAgICAgc2VsZi55IC09IGZscigoc2VsZi55
ICsgc2VsZi5oKSAlIDgpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHNlbGYuam1w
ID0gdHJ1ZQogICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIGlmIG5vdCBzZWxmLmxuZCB0aGVu
IHNlbGYuZHggPSBzZWxmLmJ1ZiBlbmQKCiAgICAgICAgICAgIGlmIChjb2xsaWRlX21hcChzZWxm
LCAibGVmdCIsIDApIG9yIGNvbGxpZGVfbWFwKHNlbGYsICJyaWdodCIsIDApKSBhbmQgc2VsZi5k
ZWJ1Z19vYmoueTxzZWxmLnkgYW5kIHNlbGYuc3RhdGU9PSJ3YWxrIiBhbmQgc2VsZi5jYW5qdW1w
ICB0aGVuCiAgICAgICAgICAgICAgICBqdW1wKHNlbGYpCiAgICAgICAgICAgICAgICBzZWxmLmR4
ID0gMAogICAgICAgICAgICAgICAgaWYgbm90IHNlbGYuam1wIHRoZW4KICAgICAgICAgICAgICAg
ICAgICBpZiBjb2xsaWRlX21hcChzZWxmLCAibGVmdCIsIDApIHRoZW4KICAgICAgICAgICAgICAg
ICAgICAgICAgc2VsZi54ICs9IDEKICAgICAgICAgICAgICAgICAgICBlbHNlaWYgY29sbGlkZV9t
YXAoc2VsZiwgInJpZ2h0IiwgMCkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLngg
LT0gMQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAg
ICAgIGVuZAoKICAgICAgICAgICAgLS0gQXR0YWNrIGxvZ2ljCiAgICAgICAgICAgIGlmIHNlbGYu
aW5yYW5nZSBhbmQgc2VsZi5zdGF0ZSA9PSAic3RhbmQiIGFuZCBmbHIoYWJzKHNlbGYueSAtIHBs
eS55KSkgPD0gMiBhbmQgbm90IHNlbGYuYXRrIGFuZCBub3QgKHBseS5ocnQgb3IgcGx5LmRlZCBv
ciBwbHkuYmxrKSB0aGVuCiAgICAgICAgICAgICAgICBzZWxmLmF0ayA9IHRydWUKICAgICAgICAg
ICAgICAgIHNlbGYuYW5tID0gNgogICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIGlmIHNlbGYu
YXRrIHRoZW4KICAgICAgICAgICAgICAgIHNlbGYudG0zICs9IDEKICAgICAgICAgICAgICAgIGlm
IHNlbGYudG0zICUgOCA9PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLmFubSA9
PSA2IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hbm0gPSA3CiAgICAgICAgICAg
ICAgICAgICAgZWxzZWlmIHNlbGYuYW5tID09IDcgdGhlbgogICAgICAgICAgICAgICAgICAgICAg
ICBhZGRfY2xvbmVfa25mKHNlbGYueCAtIDIsIHNlbGYueSAtIDgsIHNlbGYuZmxwKQogICAgICAg
ICAgICAgICAgICAgICAgICBzZWxmLmFubSA9IDgKICAgICAgICAgICAgICAgICAgICBlbHNlaWYg
c2VsZi5hbm0gPT0gOCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYW5tID0gNgog
ICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAg
ICBpZiBzZWxmLnRtMyA_PSAyNCB0aGVuCiAgICAgICAgICAgICAgICAgICAgc2VsZi50bTMgPSAw
CiAgICAgICAgICAgICAgICAgICAgc2VsZi5hdGsgPSBmYWxzZQogICAgICAgICAgICAgICAgICAg
IHNlbGYuYW5tID0gMQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAg
IGVuZCwKCiBkcmF3ID0gZnVuY3Rpb24oc2VsZikKICAgICAgICAgICAgLS0gRG9wcGVsZ2FuZ2Vy
IHJlbmRlcmluZwogICAgICAgICAgICBwYWwoMywgMjEpCiAgICAgICAgICAgIHBhbCgxMSwgNCkK
ICAgICAgICAgICAgcGFsKDE0LCAzMSkKICAgICAgICAgICAgcGFsKDIsIDUpCiAgICAgICAgICAg
IHNwcihzZWxmLnNwLCBzZWxmLngsIHNlbGYueSArIHNlbGYueW9mZiwgc2VsZi5mbHApCiAgICAg
ICAgICAgIHNwcihzZWxmLnNwMiwgc2VsZi54LCBzZWxmLnkgKyA4ICsgc2VsZi55b2ZmLCBzZWxm
LmZscCkKICAgICAgICAgICAgcGFsKCkKICAgICAgICAtLSBwcmludCh0b3N0cmluZyhzZWxmLmNh
bmp1bXApLHNlbGYueCxzZWxmLnktOCw3KQogICAgIC0tICBkcmF3X2RvcHBlbGdhbmdlcl9wYXRo
KHNlbGYsdGFyZ2V0KQotLSBkcmF3X2RvcHBlbGdhbmdlcl9kcGF0aChzZWxmKQogICAgICAgICAg
IAogICAgICAgICAgIHNwcih0YXJnZXQuc3AsIHRhcmdldC54LCB0YXJnZXQueSkKICAgICAgICAg
ICAgcGFsKDgsIDkpIC0tIENoYW5nZSBzcHJpdGUgY29sb3IgZm9yIHZpc2liaWxpdHkKICAgICAg
ICAgICAgc3ByKHNlbGYuZGVidWdfb2JqLnNwLCBzZWxmLmRlYnVnX29iai54LCBzZWxmLmRlYnVn
X29iai55KQogICAgICAgICAgICAKICAgICAgICAgICAgc3ByKG1hcmtlci5zcCwgbWFya2VyLngs
IG1hcmtlci55KQogICAgICAgICAgICBwYWwoKSAtLSBSZXNldCBjb2xvcnMKICAgICAgICAgICAg
LS1dXQogICAgICAgIGVuZCwKICAgICAgICAKICAgICAgCiAKICAgICAgCiAgICAgICAKICAgIH0p
CmVuZAoKZnVuY3Rpb24gZHJhd19kb3BwZWxnYW5nZXJfZHBhdGgoZG9wcGVsZ2FuZ2VyKQogICAg
bG9jYWwgcGF0aCA9IGRvcHBlbGdhbmdlci5tYXJrZXJfbGlzdAogICAgaWYgI3BhdGggPT0gMCB0
aGVuIHJldHVybiBlbmQKCiAgICAtLSBEcmF3IEZJRk8gbGluZXMgYmV0d2VlbiBtYXJrZXJzCiAg
ICBmb3IgaSA9IDEsICNwYXRoIC0gMSBkbwogICAgICAgIGxvY2FsIG5vZGVBID0gcGF0aFtpXQog
ICAgICAgIGxvY2FsIG5vZGVCID0gcGF0aFtpICsgMV0KICAgICAgICBsaW5lKG5vZGVBLnggKyA0
LCBub2RlQS55ICsgNCwgbm9kZUIueCArIDQsIG5vZGVCLnkgKyA0LCAxMCkgLS0gWWVsbG93IHBh
dGggbGluZQogICAgZW5kCmVuZAoKCgoKYXJlbmFfbm9kZXMgPSB7fSAtLSBUYWJsZSB0byBzdG9y
ZSBhbGwgbm9kZXMKbm9kZV9ncmFwaCA9IHt9ICAtLSBHcmFwaCBjb25uZWN0aW9ucyAoYWRqYWNl
bmN5IGxpc3QpCmZ1bmN0aW9uIHNwYXduX2FyZW5hX25vZGVzKCkKICAgIGxvY2FsIG5vZGVzID0g
ewogICAgICAgIHt4PTEsIHk9N30sIHt4PTMsIHk9N30sIHt4PTYsIHk9OX0sIHt4PTgsIHk9OX0s
IHt4PTEwLCB5PTExfSwgIAogICAgICAgIHt4PTE0LCB5PTExfSwge3g9MTcsIHk9MTF9LCB7eD0y
MCwgeT0xMn0sIHt4PTI0LCB5PTEyfSwge3g9NCwgeT0xMn0sIHt4PTI4LjUsIHk9MTJ9LCB7eD0u
NSwgeT0xMn0sICAKICAgICAgICB7eD03LCB5PTEyfSwge3g9MjEuNSwgeT05fSwge3g9MjUsIHk9
N30sIHt4PTI4LjUsIHk9N30gICAgCiAgICB9CiAgICAKICAgIGZvciBpLCBuIGluIGlwYWlycyhu
b2RlcykgZG8KICAgICAgICBhZGRfbm9kZShuLngsIG4ueSwgaSkgCiAgICBlbmQKICAgIAogICAg
Z2VuZXJhdGVfbm9kZV9ncmFwaCgpIC0tIENyZWF0ZSBjb25uZWN0aW9ucyBhZnRlciBhbGwgbm9k
ZXMgZXhpc3QKZW5kCgoKZnVuY3Rpb24gYWRkX25vZGUoX3gsIF95LCBpZCkKICAgIGxvY2FsIG5v
ZGUgPSB7CiAgICAgICAgaWQgPSBpZCwgLS0gQXNzaWduIHRoZSBJRCBiYXNlZCBvbiBpdHMgaW5k
ZXggaW4gYGFyZW5hX25vZGVzYAogICAgICAgIHggPSBfeCAqIDgsCiAgICAgICAgeSA9IF95ICog
OCwKICAgICAgICB3ID0gOCwKICAgICAgICBoID0gOCwKICAgICAgIAogICAgICAgIHNwID0gMTYs
IC0tIFBsYWNlaG9sZGVyIHNwcml0ZSBpbmRleAogICAgICAgIHRtMCA9IDAsIC0tIFRpbWVyIGZv
ciBwb3RlbnRpYWwgZWZmZWN0cwogICAgICAgIG5laWdoYm9ycyA9IHt9LCAtLSBMaXN0IG9mIGNv
bm5lY3RlZCBub2RlcwoKICAgICAgICB1cGRhdGUgPSBmdW5jdGlvbihzZWxmKQogICAgICAgICAg
ICBzZWxmLnRtMCArPSAxCiAgICAgICAgICAgIHNlbGYucD1zZWxmLmhvdmVyZWQgYW5kIDExIG9y
IDcKICAgICAgICAgICAgIGlmIHRyYW4gdGhlbiAKICAgICAgICAtLSBSZW1vdmUgZnJvbSBhbGwg
cmVsZXZhbnQgdGFibGVzCiAgICAgICAgZGVsKGVmdCwgc2VsZikgIAogICAgICAgIGRlbChhcmVu
YV9ub2Rlcywgc2VsZikgIAoKICAgICAgICAtLSBSZW1vdmUgdGhpcyBub2RlIGZyb20gYWxsIGl0
cyBuZWlnaGJvcnMnIGxpc3RzCiAgICAgICAgZm9yIF8sIG5vZGUgaW4gaXBhaXJzKGFyZW5hX25v
ZGVzKSBkbwogICAgICAgICAgICBkZWwobm9kZS5uZWlnaGJvcnMsIHNlbGYpIAogICAgICAgIGVu
ZAogICAgZW5kCiAgICAgICAgZW5kLAoKICAgICAgICBkcmF3ID0gZnVuY3Rpb24oc2VsZikKICAg
ICAgICAgIC0tICBzcHIoc2VsZi5zcCwgc2VsZi54LCBzZWxmLnkpCiAgICAgICAgICAgIC0tIE1h
bnVhbGx5IGRyYXcgYW4gb3V0bGluZWQgcmVjdGFuZ2xlCiAgICAgICAgICAgcmVjdChzZWxmLngs
IHNlbGYueSwgc2VsZi54ICsgc2VsZi53LCBzZWxmLnkgKyBzZWxmLmgsc2VsZi5wKSAtLSBXaGl0
ZSBvdXRsaW5lCiAgICAgICAgIC0tIHByaW50KHNlbGYuaWQsIHNlbGYueCwgc2VsZi55IC0gNiwg
NykgLS0gU2hvdyBJRCBmb3IgZGVidWdnaW5nCiAgICAgICAgLS0gRHJhdyBjb25uZWN0aW9ucwog
ICAgICAgICAgICAtLVtbCiAgICAgICAgICAgIGZvciBfLCBuZWlnaGJvciBpbiBpcGFpcnMoc2Vs
Zi5uZWlnaGJvcnMpIGRvCiAgICAgICAgICAgICAgICBsaW5lKHNlbGYueCArIDQsIHNlbGYueSAr
IDQsIG5laWdoYm9yLnggKyA0LCBuZWlnaGJvci55ICsgNCwgNykKICAgICAgICAgICAgZW5kCiAg
ICAgICAgLS1dXQogICAgICAgIGVuZAogICAgfQoKICAgIGFkZChhcmVuYV9ub2Rlcywgbm9kZSkg
LS0gU3RvcmUgbm9kZSBpbiB0YWJsZSBpbnN0ZWFkIG9mIGdsb2JhbCBjb3VudGVyCiAgICBhZGQo
ZWZ0LCBub2RlKSAtLSBBZGQgdG8gdGhlIGdhbWUgZW50aXR5IGxpc3QKZW5kCgoKLS0gRnVuY3Rp
b24gdG8gZXN0YWJsaXNoIGNvbm5lY3Rpb25zIGJldHdlZW4gbm9kZXMKZnVuY3Rpb24gZ2VuZXJh
dGVfbm9kZV9ncmFwaCgpCiAgICBsb2NhbCBtYXhfZGlzdGFuY2UgPSA0MCAtLSBNYXhpbXVtIGNv
bm5lY3Rpb24gcmFuZ2UgKGFkanVzdCBhcyBuZWVkZWQpCiAgICAKICAgIGZvciBpLCBub2RlIGlu
IGlwYWlycyhhcmVuYV9ub2RlcykgZG8KICAgICAgICBmb3Igaiwgb3RoZXJfbm9kZSBpbiBpcGFp
cnMoYXJlbmFfbm9kZXMpIGRvCiAgICAgICAgICAgIGlmIGkgfj0gaiB0aGVuIC0tIERvbid0IGNv
bm5lY3QgdG8gaXRzZWxmCiAgICAgICAgICAgICAgICBsb2NhbCBkaXN0ID0gY2FsY19kaXN0YW5j
ZShub2RlLCBvdGhlcl9ub2RlKQogICAgICAgICAgICAgICAgaWYgZGlzdCA8PSBtYXhfZGlzdGFu
Y2UgYW5kIG5vdCBsaW5lX2ludGVyc2VjdHNfdGlsZShub2RlLCBvdGhlcl9ub2RlKSB0aGVuCiAg
ICAgICAgICAgICAgICAgICAgYWRkKG5vZGUubmVpZ2hib3JzLCBvdGhlcl9ub2RlKSAtLSBCaWRp
cmVjdGlvbmFsIGNvbm5lY3Rpb24KICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQK
ICAgICAgICBlbmQKICAgIGVuZAplbmQKCi0tIEhlbHBlciBmdW5jdGlvbiB0byBjYWxjdWxhdGUg
ZGlzdGFuY2UgYmV0d2VlbiB0d28gbm9kZXMKZnVuY3Rpb24gY2FsY19kaXN0YW5jZShuMSwgbjIp
CiAgICBsb2NhbCBkeCA9IG4yLnggLSBuMS54CiAgICBsb2NhbCBkeSA9IG4yLnkgLSBuMS55CiAg
ICByZXR1cm4gc3FydChkeCAqIGR4ICsgZHkgKiBkeSkKZW5kCgotLSBGdW5jdGlvbiB0byBjaGVj
ayBpZiBhIGxpbmUgaW50ZXJzZWN0cyBhIG1hcCB0aWxlIHdpdGggZmxhZyAwCmZ1bmN0aW9uIGxp
bmVfaW50ZXJzZWN0c190aWxlKG4xLCBuMikKICAgIGxvY2FsIHN0ZXBzID0gbWF4KGFicyhuMi54
IC0gbjEueCksIGFicyhuMi55IC0gbjEueSkpCiAgICBmb3IgaSA9IDAsIHN0ZXBzIGRvCiAgICAg
ICAgbG9jYWwgcHggPSBmbHIobjEueCArIChuMi54IC0gbjEueCkgKiAoaSAvIHN0ZXBzKSkKICAg
ICAgICBsb2NhbCBweSA9IGZscihuMS55ICsgKG4yLnkgLSBuMS55KSAqIChpIC8gc3RlcHMpKQog
ICAgICAgIGlmIGZnZXQobWdldChweCAvLyA4LCBweSAvLyA4KSwgMCkgdGhlbgogICAgICAgICAg
ICByZXR1cm4gdHJ1ZSAtLSBMaW5lIGludGVyc2VjdHMgYSBmbGFnZ2VkIHRpbGUKICAgICAgICBl
bmQKICAgIGVuZAogICAgcmV0dXJuIGZhbHNlCmVuZAoKLS0gRnVuY3Rpb24gdG8gZHJhdyBwYXRo
IHZpc3VhbGl6YXRpb24gZm9yIHRoZSBEb3BwZWxnYW5nZXIKZnVuY3Rpb24gZHJhd19kb3BwZWxn
YW5nZXJfcGF0aChkb3BwZWxnYW5nZXIsIHBsYXllcikKICAgIGlmIHBseS5sbmQgdGhlbgogICAg
ICAgIGRvcHBlbGdhbmdlci5sYXN0X3BhdGggPSBuaWwgLS0gUmVzZXQgbGFzdCBwYXRoIHdoZW4g
cGxheWVyIGlzIG9uIGdyb3VuZAogICAgICAgIAogICAgICAgIGxvY2FsIGVudHJ5X25vZGUgPSBm
aW5kX2Nsb3Nlc3Rfbm9kZShkb3BwZWxnYW5nZXIueCwgZG9wcGVsZ2FuZ2VyLnkpCiAgICAgICAg
bG9jYWwgZXhpdF9ub2RlID0gZmluZF9jbG9zZXN0X25vZGUocGxheWVyLngsIHBsYXllci55KQog
ICAgICAgIGRvcHBlbGdhbmdlci5sYXN0X3BhdGggPSBmaW5kX3BhdGgoZW50cnlfbm9kZSwgZXhp
dF9ub2RlKQogICAgZW5kCiAgICAKICAgIGxvY2FsIHBhdGggPSBkb3BwZWxnYW5nZXIubGFzdF9w
YXRoCiAgICBpZiBub3QgcGF0aCB0aGVuIHJldHVybiBlbmQKCiAgICAKICAgIGxvY2FsIGVudHJ5
X25vZGUgPSBwYXRoWzFdCiAgICBsb2NhbCBleGl0X25vZGUgPSBwYXRoWyNwYXRoXQogICAgCiAg
ICBpZiBlbnRyeV9ub2RlIHRoZW4KICAgICAgICBsaW5lKGRvcHBlbGdhbmdlci54KzQsIGRvcHBl
bGdhbmdlci55KzEwLCBlbnRyeV9ub2RlLngrNCwgZW50cnlfbm9kZS55KzQsIDExKSAtLSBHcmVl
biBMaW5lCiAgICBlbmQKICAgIAogICAgZm9yIGkgPSAxLCAjcGF0aCAtIDEgZG8KICAgICAgICBs
b2NhbCBub2RlQSA9IHBhdGhbaV0KICAgICAgICBsb2NhbCBub2RlQiA9IHBhdGhbaSArIDFdCiAg
ICAgICAgbGluZShub2RlQS54KzQsIG5vZGVBLnkrNCwgbm9kZUIueCs0LCBub2RlQi55KzQsIDEw
KSAtLSBZZWxsb3cgTGluZQogICAgZW5kCiAgICAKICAgIGlmIGV4aXRfbm9kZSB0aGVuCiAgICAg
ICAgbGluZShleGl0X25vZGUueCs0LCBleGl0X25vZGUueSs0LCBwbGF5ZXIueCs0LCBwbGF5ZXIu
eSsxMCwgOCkgLS0gUmVkIExpbmUKICAgIGVuZAplbmQKCmZ1bmN0aW9uIGFkZF9jbG9uZV9rbmYo
X3gsX3ksX2ZscCkKCmFkZCAoYWN0LHsKeD1feCwKeT1feSs2LApoPTE2LAp3PTgsCmR4PTIsCnB0
cz0yNSwKc3A9MTAzLApmbHA9X2ZscCwKdG0wPTAsCmxpZmU9MSwKd2Vhaz10cnVlLApkbWc9ZmFs
c2UsCmhhcm09dHJ1ZSwKaGl0PTEsCmtpbGw9MCwKdG0yPTEsCgp1cGRhdGU9ZnVuY3Rpb24oc2Vs
ZikKc2VsZi54Kz1zZWxmLmR4CnNlbGYudG0wKz0uMgppZiBzZWxmLmZscCB0aGVuIHNlbGYuZHg9
LTIuNQplbHNlIHNlbGYuZHg9Mi41CmVuZAppZiBzZWxmLnRtMDwuMjEgdGhlbgpzZngoMzA1LDYp
CmVuZAoKaWYgdHJhbiBvciBzZWxmLng8Y2FteC0yMCBvciBzZWxmLng_Y2FteCtzY3JlZW4gdGhl
bgoKCmRlbChhY3Qsc2VsZikKCmVuZAoKaWYgc2VsZi5saWZlPD0wIHRoZW4KIHNmeCgzMDMsLTEs
OCw1KQphZGRfc3BrKHNlbGYueCs0LHNlbGYueSkKCmRlbChhY3Qsc2VsZikKZW5kCmVuZCwKCmRy
YXc9ZnVuY3Rpb24oc2VsZikKCiBzcHIoc2VsZi5zcCxzZWxmLngsc2VsZi55KzUsc2VsZi5mbHAp
CgogZW5kCiAKIH0pCgplbmQKCmZ1bmN0aW9uIHdhbGsoY2xvbmUsX2RpcikgCgpkaXI9X2RpciBv
ciBuaWwKaWYgZGlyID09ICJsZWZ0IiB0aGVuCmNsb25lLmZscD10cnVlCmNsb25lLmR4PS0uNjUK
ZWxzZWlmIGRpciA9PSAicmlnaHQiIHRoZW4KY2xvbmUuZmxwPWZhbHNlCmNsb25lLmR4PS42NQpl
bmQKCgogCgogCgoKICAgIGlmIGNsb25lLmFubXRtciA9PSBuaWwgdGhlbiBjbG9uZS5hbm10bXIg
PSAwIGVuZCAgLS0gRW5zdXJlIGFuaW0gdGltZXIgZXhpc3RzCiAgICBjbG9uZS5hbm10bXIgKz0g
MS4yNQogICAgaWYgY2xvbmUuYW5tdG1yID49IDEwIHRoZW4KICAgICAgICBjbG9uZS5hbm10bXIg
PSAwCiAgICAgICAgY2xvbmUuYW5tICs9IDEKICAgICAgICBpZiBjbG9uZS5hbm0gPiA0IHRoZW4g
CiAgICAgICAgICAgIGNsb25lLmFubSA9IDEKICAgICAgICBlbmQKICAgICAgICAKICAgIGVuZApl
bmQKCmZ1bmN0aW9uIGp1bXAoY2xvbmUpCiAgICBjbG9uZS5keSA9IC0xLjkKICAgIGlmIGNsb25l
LmRpcmVjdGlvbiA9PSAibGVmdCIgdGhlbgogICAgICAgIGNsb25lLmR4ID0gLTAuNjUKICAgIGVs
c2VpZiBjbG9uZS5kaXJlY3Rpb24gPT0gInJpZ2h0IiB0aGVuCiAgICAgICAgY2xvbmUuZHggPSAw
LjY1CiAgICBlbmQKZW5k
:: collision.lua
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNC0xMC0xMyAwOToxMjozMSIsbW9k
aWZpZWQ9IjIwMjUtMDYtMjYgMDI6NTA6NDciLHJldmlzaW9uPTI5ODg0XV0KLS1jb2xsaXNpb24K
CmZ1bmN0aW9uIGNvbGxpZGVfc2VjcmV0KG9iaiwgbW92LCBmbGFnKQogICAgLS0gb2JqID0gdGFi
bGUgbmVlZHMgeCwgeSwgdywgaCwgc3AKICAgIGxvY2FsIHgsIHkgPSBvYmoueCwgb2JqLnkKICAg
IGxvY2FsIHcsIGggPSBvYmoudywgb2JqLmgKICAgIGxvY2FsIHNwID0gb2JqLnNwCgogICAgbG9j
YWwgeDEsIHkxLCB4MiwgeTIKCiAgICAtLSBEZWZpbmUgY29sbGlzaW9uIGJveCBiYXNlZCBvbiBt
b3ZlbWVudCBkaXJlY3Rpb24gYW5kIHNwcml0ZSBwcm9wZXJ0aWVzCiAgICBpZiBtb3YgPT0gImRv
d24iIHRoZW4KICAgICAgICB4MSwgeTEgPSB4ICsgNCwgeSArIChzcCA9PSA4MSBhbmQgMiBvciAx
MykKICAgICAgICB4MiwgeTIgPSB4ICsgNSwgeSArIGggLSAoc3AgPT0gODEgYW5kIDUgb3IgMCkK
ICAgIGVsc2VpZiBtb3YgPT0gInVwIiB0aGVuCiAgICAgICAgeDEsIHkxID0geCArIDEsIHkgKyAx
MwogICAgICAgIHgyLCB5MiA9IHggKyAyLCB5ICsgNwogICAgZWxzZWlmIG1vdiA9PSAibGVmdCIg
dGhlbgogICAgICAgIHgxLCB5MSA9IHggLSAxLCB5ICsgNwogICAgICAgIHgyLCB5MiA9IHggKyAy
LCB5ICsgaCAtIDEKICAgIGVsc2VpZiBtb3YgPT0gInJpZ2h0IiB0aGVuCiAgICAgICAgeDEsIHkx
ID0geCArIDQsIHkgKyA3CiAgICAgICAgeDIsIHkyID0geCArIDgsIHkgKyBoIC0gMQogICAgZW5k
CgogICAgLS0gQ29udmVydCB0byB0aWxlIGNvb3JkaW5hdGVzCiAgICB4MSwgeTEgPSBmbHIoeDEg
LyA4KSwgZmxyKHkxIC8gOCkKICAgIHgyLCB5MiA9IGZscih4MiAvIDgpLCBmbHIoeTIgLyA4KQoK
ICAgIC0tIENoZWNrIGlmIGFueSBvZiB0aGUgY29ybmVycyBtYXRjaCB0aGUgc3BlY2lmaWVkIGJp
dGZpZWxkIGV4YWN0bHkKICAgIGxvY2FsIGZ1bmN0aW9uIG1hdGNoX3RpbGVfZmxhZ3MoeCwgeSwg
ZmxhZykKICAgICAgICBsb2NhbCB0aWxlX2ZsYWdzID0gZmdldChtZ2V0KHgsIHkpKSAgLS0gR2V0
cyBjdXJyZW50IHRpbGXigJlzIGZsYWdzCiAgICAgICAgcmV0dXJuICh0aWxlX2ZsYWdzICYgZmxh
ZykgPT0gZmxhZyAgIC0tIEV4YWN0IG1hdGNoIHRvIHRoZSBmbGFnIGJpdGZpZWxkCiAgICBlbmQK
CiAgICBpZiBtYXRjaF90aWxlX2ZsYWdzKHgxLCB5MSwgZmxhZykgb3IgbWF0Y2hfdGlsZV9mbGFn
cyh4MSwgeTIsIGZsYWcpIAogICAgICAgb3IgbWF0Y2hfdGlsZV9mbGFncyh4MiwgeTEsIGZsYWcp
IG9yIG1hdGNoX3RpbGVfZmxhZ3MoeDIsIHkyLCBmbGFnKSB0aGVuCiAgICAgICAgcmV0dXJuIHRy
dWUKICAgIGVsc2UKICAgICAgICByZXR1cm4gZmFsc2UKICAgIGVuZAplbmQKCgpmdW5jdGlvbiBj
b2xsaWRlX21hcChvYmosbW92LGZsYWcpCi0tb2JqID0gdGFibGUgbmVlZHMgeCB5IHcgYW5kIGgK
LS1tb3YgPSBsZWZ0LHJpZ2h0LHVwLGRvd24KIAogbG9jYWwgeD1vYmoueCAgbG9jYWwgeT1vYmou
eQogbG9jYWwgdz1vYmoudyAgbG9jYWwgaD1vYmouaAogbG9jYWwgc3A9b2JqLnNwCiAKCiBsb2Nh
bCB4MT0wICBsb2NhbCB5MT0wCiBsb2NhbCB4Mj0wICBsb2NhbCB5Mj0wCiAgCmlmIG1vdj09ImRv
d24iIGFuZCBzcD09ODEgdGhlbgoKICAgeDE9eCszICAgeTE9eSsyCiAgIHgyPXgrdysxICAgeTI9
eStoLTUKCmVuZCAKICAKIAogCiAKIGlmIG1vdj09ImRvd24iIGFuZCBzcH49ODEgIHRoZW4KIAog
ICB4MT14KzQgICB5MT15KzEzCiAgIHgyPXgrNSAgIHkyPXkraAogICAKIGVsc2VpZiBtb3Y9PSJ1
cCIgdGhlbgogCiAgIHgxPXgrMSAgIHkxPXkrMTYKICAgeDI9eCsyICAgeTI9eSs3CiAKIGVsc2Vp
ZiAgICAgbW92PT0ibGVmdCIgIHRoZW4KICAgeDE9eC0xICAgICAgeTE9eSs3K29iai55b2ZmCiAg
IHgyPXgrMiAgICB5Mj15K2gtMQogCiBlbHNlaWYgbW92PT0icmlnaHQiIHRoZW4KIAogICB4MT14
KzQgICAgeTE9eSs3K29iai55b2ZmCiAgIHgyPXgrOCAgICB5Mj15K2gtMQogICAKCmVuZCAKCgoK
eDFyPXgxICB5MXI9eTEKeDJyPXgyICB5MnI9eTIKCm9jPW9iai5zcAoKCi0tcGl4ZWxzIHRvIHRp
bGVzCngxPWZscih4MS84KSAgeTE9ZmxyKHkxLzgpCngyPWZscih4Mi84KSAgIHkyPWZscih5Mi84
KQogCiBpZiBmZ2V0KG1nZXQoeDEseTEpLCBmbGFnKSAKIG9yIGZnZXQobWdldCh4MSx5MiksIGZs
YWcpIAogb3IgZmdldChtZ2V0KHgyLHkxKSwgZmxhZykgCiBvciBmZ2V0KG1nZXQoeDIseTIpLCBm
bGFnKSB0aGVuCiAgIHJldHVybiB0cnVlCiBlbHNlCiAgIHJldHVybiBmYWxzZQogIGVuZAplbmQK
CgpmdW5jdGlvbiBwbHlfY2xkKCkKCiAtLWNvbGxpZGUgd2l0aCBmbG9vciAKIAogaWYgcGx5LmR5
PjAgYW5kIG5vdCBwbHkub25zdHIgIHRoZW4KCiAgaWYgY29sbGlkZV9tYXAocGx5LCJkb3duIiww
KSAgdGhlbgogIHBseS5vbmxpZnQ9ZmFsc2UKICBwbHkueW9mZj0wCiAgICAgIHBseS5keT0wCiAg
ICAgIHBseS5qbXA9ZmFsc2UKICAgICAgcGx5LmxuZD10cnVlCiAgICAgIHBseS5mbGw9ZmFsc2UK
ICAgICAgcGx5LnkgPSBmbHIoKHBseS55ICsgcGx5LmgpIC8gOCkgKiA4IC0gcGx5LmgKICAgICAg
CiAgICAgIAogIGVuZAoKCiAgCiAgCiAgaWYgbm90IHBseS53bGsgdGhlbgogaWYgIGNvbGxpZGVf
bWFwKGRldDEsImRvd24iLDApIGFuZCBub3QgcGx5LmhydCBhbmQgbm90IHBseS5qbXAgdGhlbgog
IAogIHBseS54LT0yCiAgZW5kCiAgZW5kCiAgCiAgaWYgbm90IHBseS53bGsgdGhlbgogaWYgIGNv
bGxpZGVfbWFwKGRldDAsImRvd24iLDApIGFuZCBub3QgcGx5LmhydCBhbmQgbm90IHBseS5qbXAg
dGhlbgogIAogIHBseS54Kz0yCiAgZW5kCiAgZW5kCiAgLS0gc2VjcmV0IHRyaWdnZXJzCgogCmlm
IGNvbGxpZGVfc2VjcmV0KHBseSwiZG93biIsNjUpIGFuZCBub3Qgc2VjcmV0IHRoZW4KaWYgc2Vj
dHlwZT09ImR1Y2siIGFuZCBwbHkuYW5tPT0xMCB0aGVuCnNmeCgzMDEsLTEsMCkKCnNlY3JldD10
cnVlCmVsc2UgaWYgc2VjdHlwZT09IndhaXQiIHRoZW4gc2VjdG1yKz0uMQplbHNlIGlmIHNlY3R5
cGU9PSJlbnRlciIgYW5kIG5vdCBkb29yIHRoZW4Kc2Z4KDMwMSwtMSwwKQpzZWNyZXQ9dHJ1ZQoK
ZW5kIAplbmQKZW5kCmVuZAoKaWYgY29sbGlkZV9zZWNyZXQocGx5LCJsZWZ0Iiw2NSkKYW5kIChw
bHkud2xrIGFuZCBwbHkubG5kIGFuZCBzZWN0eXBlPT0icHVzaCIpIHRoZW4KCnNlY3Rtcis9LjEK
CmVuZAoKaWYgY29sbGlkZV9zZWNyZXQocGx5LCJyaWdodCIsNjUpICAKYW5kIChwbHkud2xrIGFu
ZCBwbHkubG5kIGFuZCBzZWN0eXBlPT0icHVzaCIpIHRoZW4KCnNlY3Rtcis9LjEKZWxzZWlmIChw
bHkud2xrIGFuZCBzZWN0eXBlPT0id2FpdCIpIG9yIG5vdCBwbHkubG5kIG9yIChwbHkuZGNrIGFu
ZCBzZWN0eXBlPT0id2FpdCIpIG9yIChwbHkuYXRrIGFuZCBzZWN0eXBlPT0id2FpdCIpIG9yIChw
bHkudGh3IGFuZCBzZWN0eXBlPT0id2FpdCIpIAoKb3IgKHBseS53bGs9PWZhbHNlIGFuZCBzZWN0
eXBlPT0icHVzaCIpIHRoZW4gCnNlY3Rtcj0wCgplbmQKaWYgc2VjdG1yPj0gMTUgYW5kIG5vdCBz
ZWNyZXQgdGhlbgpzZngoMzAxLC0xLDApCgogc2VjcmV0PXRydWUKCgplbmQKCgoKLS1bWwotLXN0
YWlyIGhvbWluZyBiZWhhdmlvcgoKICAgaWYgKChjb2xsaWRlX21hcChwbHksImRvd24iLDYpIGFu
ZCBidG4oMixwbGF5ZXIpKSBvciAoY29sbGlkZV9tYXAocGx5LCJkb3duIiw1KSBhbmQgYnRuKDMs
cGxheWVyKSkpIAogICBhbmQgIG5vdCBwbHkud2xrIAogICBhbmQgbm90IHBseS5vbnN0ciAKICAg
YW5kIG5vdCBwbHkuam1wIAogICBhbmQgbm90IHBseS5kZWQgCiAgIGFuZCBub3QgKHBseS5hdGsg
b3IgcGx5LnRodykKICAgYW5kIG5vdCBwbHkuaHJ0CiAgIGFuZCBub3QgZG9vciB0aGVuCiAgIHBs
eS5keD0uNAogICBwbHkud2xrPXRydWUKICAgcGx5LmZscD1mYWxzZQogIAogICBlbmQKCiBpZiAo
KGNvbGxpZGVfbWFwKHBseSwiZG93biIsNykgYW5kIGJ0bigzLHBsYXllcikpIG9yIChjb2xsaWRl
X21hcChwbHksImRvd24iLDQpIGFuZCBidG4oMixwbGF5ZXIpKSkKICAgYW5kIG5vdCBwbHkud2xr
IAogYW5kIG5vdCBwbHkub25zdHIgCiBhbmQgbm90IHBseS5qbXAgCiBhbmQgbm90IHBseS5kZWQg
CiBhbmQgbm90IChwbHkuYXRrIG9yIHBseS50aHcpCiBhbmQgbm90IHBseS5ocnQgCiBhbmQgbm90
IGRvb3IgdGhlbgogIAogIHBseS5keD0tLjQKICBwbHkud2xrPXRydWUKICBwbHkuZmxwPXRydWUK
ICAKICAKIGVuZAoKCgogLS1dXQotLXRoZSBwbGF5ZXIgaXMgaW4gcmFuZ2Ugb2YgCi0tc3RhaXJz
PyAgCgogaWYgY29sbGlkZV9tYXAocGx5LCJkb3duIiwxKSAKIG9yIGNvbGxpZGVfbWFwKHBseSwi
ZG93biIsMikgCiBvciBjb2xsaWRlX21hcChwbHksImRvd24iLDMpIAogIAogYW5kIG5vdCBwbHku
c3RuIHRoZW4KIHBseS5zdHI9dHJ1ZQoKIGVsc2UgcGx5LnN0cj1mYWxzZQoKIGVuZAoKLS13YWxr
IG9mZiBhIGxlZGdlIGFuZCBwbHVtbWV0CgogaWYgbm90IGNvbGxpZGVfbWFwKHBseSwiZG93biIs
MCkgCgogYW5kIG5vdCAKIChwbHkuam1wIG9yIHBseS5kZWQgb3IgcGx5LmhydCkgCiB0aGVuIAog
cGx5LmZsbD10cnVlCiAKICAgZW5kCgogZW5kCgoKIGlmIHBseS5keDwwIHRoZW4KCiAgaWYgIGNv
bGxpZGVfbWFwKHBseSwibGVmdCIsMCkgCiAgYW5kIG5vdCBwbHkub25zdHIgYW5kIG5vdCAocGx5
LmRjayBhbmQgcGx5Lm9ubGlmdCkKICB0aGVuCiAgcGx5LmR4PTAKICAKICBlbmQKICAKIGVuZAoK
CiBpZiBwbHkuZHg_MCB0aGVuIAoKICBpZiBjb2xsaWRlX21hcChwbHksInJpZ2h0IiwwKSAKICBh
bmQgbm90IHBseS5vbnN0ciBhbmQgbm90IChwbHkuZGNrIGFuZCBwbHkub25saWZ0KSB0aGVuCiAg
ICAgIHBseS5keD0wCiAgICAgIAogIGVuZAoKIGVuZAoKZW5kCgpmdW5jdGlvbiBoaXQgKHgseSxv
eCxveSxvdyxvaCkKICBpZiAoeD5veCBhbmQgeDxveCtvdykgYW5kCiAgICAgKHk_b3kgYW5kIHk8
b3krb2gpIHRoZW4KICAgICAtLXRoZXJlIGhhcyBiZWVuIGEgY29sbGlzaW9uCiAgICAgcmV0dXJu
IHRydWUKICAgICBlbmQKICAgCiAgIHJldHVybiBmYWxzZQogIAogIGVuZAogIApmdW5jdGlvbiBo
aXRfd2VhcG9uKHgxLCB5MSwgdzEsIGgxLCB4MiwgeTIsIHcyLCBoMikKICAtLSBDaGVjayBmb3Ig
b3ZlcmxhcCBiZXR3ZWVuIHR3byByZWN0YW5nbGVzCiAgaWYgKHgxIDwgeDIgKyB3MiBhbmQgeDEg
KyB3MSA_IHgyKSBhbmQKICAgICAoeTEgPCB5MiArIGgyIGFuZCB5MSArIGgxID4geTIpIHRoZW4K
ICAgIC0tIFRoZXJlIGhhcyBiZWVuIGEgY29sbGlzaW9uCiAgICByZXR1cm4gdHJ1ZQogIGVuZAoK
ICByZXR1cm4gZmFsc2UKZW5k
:: demo1.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAzLTE2IDEwOjU4OjE1Iixtb2RpZmllZD0iMjAyNS0w
My0xNiAxMDo1ODoxNSIscmV2aXNpb249MF1dbHo0AJgBAAAUNwAA-wJ7eyJzdG9wX2FjdGlvbiJ9
LBAA---B73BseV9tb3ZlX3JpZ2h0EwCmP2xlZhIAlQ6SAQ8QAKcRLOAAr2p1bXAifSxuaWwEABIC
FQFuYXR0YWNrNwAPBABWDtoADqwBDxIAswzoAA8QAJsEsAEPBACtDugADxAArQ6kBQ8TAP--0Q7y
Bg8PBCYPBgdeDvMADxMAPA4xBA8QAP--nQ7mAg-aBf--Dw-MDIMPEACwDrABD8MHRg8EAI4O1QAP
DgF9DgcDDxkBrw4TAA65Ag8QAP8PBKoBDwQARA9qAmgPEwD--7EOugMPEABLByMGHiwtAA8QAP8I
D60B--8RD70B-78OvQUPEwD-UgTtCQ8EAM0Pbg_zDnQODykBUA8QAC0Orx0PEgDpDh4BDk4CDxMA
WQ89Bw4PEAD--1APowIODuoEDwQAxg4uAQ9OASsPEwD-RA_5Bf--Ng7QAQ8OCP--cg4QAg8TAHMO
uAAPEAAGDzAI2g4_AQ8TAP--nA-HAwsPjAb-jQ7QAQ8TADoOfwAP5jFfUG1wIn19
:: demo2.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAzLTE2IDExOjIwOjIzIixtb2RpZmllZD0iMjAyNS0w
My0xNiAxMToyMDoyMyIscmV2aXNpb249MF1dbHo0AKMBAABvQwAA-wJ7eyJzdG9wX2FjdGlvbiJ9
LBAA----Xv8BLCJwbHlfanVtcCJ9LG5pbAQAGhF7PQBuYXR0YWNrPwAPBABOD_oADwCfAK9tb3Zl
X3JpZ2h0EwBNDkwBDwQAjA-oAGEPNAJuDuAAD0cCF09sZWZ0EgCCDsIADxAAiQSNAQ8EAK0P_AAd
Dn0CDxMA-7UP_gUuDxYFaA7zAA8TANQOrAMPEAD-TA6WAQ8_BP82DgQADzMEXQ8TAP--Bg4TBA8Q
AP--LQ4LDQ8SANcOHAEPEAD---------kg4iCw8TAHMOuAAPEAD--50O5gIPDhL-JQ90FlAOzgEP
EAD-------------Nw5ACw-AHfQOqQAPEwCuDgwCD0grxA8CJG4O2gAPEAAbDtABDxMA-8oODgIP
EAD----OB5kGHiwtAA9tAf9BDgsiDxIA9w9AAQgPwwYADzIY-xQPfApqD-MAYw73AA-zAI0PBgEQ
DwQAjg-VAEIPvgJoD_AADw8TAP--Ag62Aw_mAv8dDgMIDxAA-zwOhwkPEgBZDp4ADxAA-zVQb24i
fX0=
:: demo3.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAzLTI2IDE2OjM2OjM4Iixtb2RpZmllZD0iMjAyNS0w
My0yNiAxNjozNjozOCIscmV2aXNpb249MF1dbHo0AFQBAACiWgAA-wV7bmlsLHsic3RvcF9hY3Rp
b24ifRAA----w_9wbHlfbW92ZV9yaWdodBMAww4EAQ8QAEsAgwCOYXR0YWNrIiwtAA8QAP-9DrAC
DxMAlwAjCA8EALEO7gAPEwD----------------------_QOnBMPEAD-DA-ZFv_bDvACDxMA_A49
AQ8QACsPGgP-Ww7QAQ8TAP--7A_SB-9yD40B---uBZoET2xlZnQSAP--Rg6EAg8QAAsPQQcvDxAA
---gDw0D-5sO4AQPEwD--xsP5wP-cg_NAS4PvQH---8uDy0CYQ6dBQ8TAP-------------ODxYN
BQ8QAP--sA-dAv_bDrAEDxMA----SA56Aw8ECP_0D90BXg8tAv---_4PEABIDrBIDwQAxg4IAQ8V
BIEOVQgPEwD--3IOuQIPEAALD94GCQ8QAP------TFBvbiJ9fQ==
:: effects.lua
--[[pod_format="raw",created="2024-08-22 14:17:11",modified="2025-04-22 12:23:01",revision=48512]]
--effects
function add_title_bat(_x,_y)
add (eft,{

x=_x,
y=_y,
anm=0,
state=1,
dx=0,
dy=0,
targetdx=0,
targetdy=0,
sp=266,
tm=0,
tm1=0,
smooth=.04,



update=function(self)



self.x+=self.targetdx
self.y+=self.targetdy
if self.dx>self.targetdx then
self.targetdx+=self.smooth
elseif self.dx<self.targetdx then
self.targetdx-=self.smooth

end

if self.dy>self.targetdy then
self.targetdy+=self.smooth
elseif self.dy<self.targetdy then
self.targetdy-=self.smooth

end
if self.dx==0 then self.targetdx=0 end
if self.dy==0 then self.targetdy=0 end

if self.tm==2 then
self.dx=-.2
self.dy=-.2
end

if self.tm==4 then
self.dx=.3
self.dy=-.2
end

if self.tm==30 then
self.dx=.5
self.dy=.7
end

if self.tm==60 then
self.dx=-.3
self.dy=.1
end

if self.tm==90 then
self.dx=-1.8
self.dy=-1
end

if self.tm==100 then
self.dx=-1
self.dy=-1
end

if self.tm==125 then
self.dx=0
self.dy=0
end

if self.state~=4 then
self.tm+=1
else self.tm=0
end

if self.tm==60 then self.state=2
end
if self.tm==100 then
self.state=3
end
if self.tm==125 then
self.state=4
end

if self.state==1 then
self.sp=flash_timer%30<15 and 266 or 267 
elseif self.state==2 then
self.sp=flash_timer%30<15 and 268 or 269
elseif self.state==3 then
self.sp=flash_timer%30<15 and 270 or 271 
end

if self.state==4 then
if (self.anm==0 or self.anm==4) self.sp=272
if (self.anm==1 or self.anm==3) self.sp=273
if (self.anm==2) self.sp=274
if self.tm1==0 then self.anm+=1
end
if self.anm>3 then self.anm=0
end
--if (self.anm=3) self.sp=272
--if (self.anm=4) self.sp=272
self.tm1 = (self.tm1 + 1) % 5

end
 
end,
draw=function(self)
--print(self.targetdx,self.x,self.y-8,7)
--print(self.targetdy,self.x,self.y-16,7)
 spr(self.sp,self.x+camx,self.y+camy,self.flp)
--palt()
 end
 
 })

end


function add_scene_bat(_x,_y,_dx,_dy)

add (eft,{

x=_x,
y=_y,
dx=_dx,
dy=_dy,
sp=283,




update=function(self)

self.x+=self.dx
self.y+=self.dy
self.sp=flash_timer%30<15 and 283 or 284 



 
 
end,
draw=function(self)
palt(0,false)
 palt(30,true)
 spr(self.sp,self.x,self.y,self.flp)
palt()
 end
 
 })

end

function add_scene_cloud(_x,_y,_dx,_dy)

add (eft,{

x=_x,
y=_y,
dx=_dx,
sp=285,



update=function(self)

self.x+=self.dx

 

 


 
 
end,
draw=function(self)
palt(0,false)
 palt(30,true)
 spr(self.sp,self.x,self.y,self.flp)
palt()
 end
 
 })

end

function add_save_icon()

add (eft,{

x=183,
y=112,

y_offset=0,
timer=0,
bob_step=0,
sp=cart and 649 or 650,



update=function(self)

self.timer+=1
self.bob_step+=1
 self.y_offset=sin(self.timer/20)*1
if self.timer==1 then sfx(275) end
if self.timer==150 then del(eft,self)
end
end,
draw=function(self)
local boxcol=1
if self.timer==20 then
boxcol=28
elseif self.timer==21 then
boxcol=12
elseif self.timer==22 then
boxcol=17
elseif self.timer==23 then
boxcol=16
elseif self.timer>=24 then
boxcol=1
end
local col=flash_timer%30<15 and 9 or 25
rectfill(self.x+camx-3,self.y-3,self.x+camx+52,self.y+19,4)
rectfill(self.x+camx-2,self.y-2,self.x+camx+51,self.y+18,boxcol)
 spr(self.sp,self.x+camx,self.y+1+self.y_offset,self.flp)
 print("Saved!",self.x+20+camx,self.y+7,2)
 print("Saved!",self.x+20+camx,self.y+6,col)
-- print(self.bob_step,self.x+20,self.y-20,col)

 end
 
 })

end

function add_scene_deco(_x,_y,_sprite)

add (scn,{

x=(_x+.5)*8,
y=(_y+.5)*8,
w=0,
flp=false,
sp=_sprite,



update=function(self)
if(self.sp=="Clock") self.sp=275 self.w=80
if(self.sp=="Lisa") self.sp=652 self.w=40
if(self.sp=="Alucard") self.sp=651 self.w=40 self.flp=true
if(self.sp=="Mathias") self.sp=653 self.w=40
if(self.sp=="Elizabetha") self.sp=654 self.w=40
if(self.sp=="Walter") self.sp=655 self.w=40
if(self.sp=="Bartley") self.sp=656 self.w=40
if(self.sp=="Vlad") self.sp=657 self.w=80
if tran then del(scn,self)
end
end,
draw=function(self)

if expert then
pal(30,8)
pal(14,24)
else
pal(30,9)
pal(14,22)
end
if self.x+self.w-12>camx and self.x<camx+screen then
 spr(self.sp,self.x,self.y,self.flp)
 end
pal()

 end



 })

end



function add_hand()

add (eft,{

x=_x,
y=_y,
ox=ply.ox,
oy=ply.oy,
flp=ply.flp,
sp=101,
tm0=0,



update=function(self)

self.x=ply.x+self.ox
self.y=ply.y+self.oy
 
--correct facing 
 if self.flp then self.ox=-4
 elseif not self.flp then self.ox=4
 
 end
 
 


 if hndout>=.8 then
 
 del(eft,self)
 
 end

 
 
end,
draw=function(self)

 spr(self.sp,self.x+self.ox,self.y,self.flp)

 end
 
 })

end

function add_clone_hand(_flp)

add (eft,{

x=_x,
y=_y,
ox=0,
oy=0,
flp=_flp,
sp=101,
tm0=0,



update=function(self)

self.x= self.ox
self.y= self.oy
 
--correct facing 
 if self.flp then self.ox=-4
 elseif not self.flp then self.ox=4
 
 end
 
 


 if hndout>=.8 then
 
 del(eft,self)
 
 end

 
 
end,
draw=function(self)

 spr(self.sp,self.x+self.ox,self.y,self.flp)

 end
 
 })

end

function add_mobspawner(_type,_pos,_x,_y)

add (eft,{

type=_type,
x=_x,
xoff=0,
y=_y,
tm0=0,
sp=192,

pos=_pos,


update=function(self)
self.tm0+=.1

 if not self.pos~=nil then
 self.x=camx+self.xoff
 if self.pos=="left" then
 self.xoff=-6
 elseif self.pos=="right" then
 self.xoff=240
end
else self.x=self.x
self.y=self.y
end


 
 if self.tm0>=20 and enemies~=3 and not clock and not (level==68 and ply.x>310) and not boss then
  self.tm0=flr(rnd(15)+2)
 if self.pos=="right" and self.x<430 then

enemies+=1
 add_enmy(self.type,flr(self.x/8),15,76,true)

 
end
 if ply.x>150 and self.pos=="left" then
enemies+=1
self.tm0=flr(rnd(1)+6)

add_enmy(self.type,self.x/8,15,76,false)

end

end
if self.tm0>=30 then 
self.tm0=0
end

 
if (tran or door)   then
del(eft,self)

end



 
end,
draw=function(self)


 end
 
 })

end

function add_ghostspawner(_x,_y,_spawnx,_spawny)

add (eft,{

type=_type,
x=_x*8,
w=8,
h=32,
spawnx=_spawnx*8,
spawny=_spawny*8,
y=_y*8-24,
tm0=0,
sp=64,






update=function(self)

if abs((ply.x+4)-self.x)>180 then
self.hit=false

end

if hit (ply.x+4,ply.y+6,self.x,self.y,self.w,self.h) and not self.hit then
add_ghst(self.spawnx,self.spawny, spawn_item(), nil)
self.hit=true
end

if (tran or door)   then
del(eft,self)

end



 
end,
draw=function(self)


 end
 
 })

end



function add_scene_trigger(_x,_y)

add (eft,{


x=_x*8,
w=8,
h=3,
y=_y*8-24,
black=0,
sp=64,






update=function(self)

---[[
if self.hit then 
self.black+=1
end
--]]

if  hit (ply.x+4,ply.y+15,self.x,self.y,self.w,self.h) and not cutscene then


music(-1)
self.hit=true
ply.flp=false
ply.y=camy+120
ply.clbur=true
song2=35


ply.x=50
self.x=camx+5
self.y=camy+5
spwntmr=0

clck+=50
cur_stge=11
cur_flr=1
chk_flr=cur_flr
chk_stge=cur_stge
chk_face=ply.flp

for a in all (act) do
del(act,a)
end
for e in all(env) do
if not e.isdoor then
del(env,e)
end
end
---[[
for e in all(eft) do
if e.isspawner then
del(eft,e)
end
end
--]]
music(song2,0,15)

cutscene=true

end

if tran then del(eft,self)
end

 
end,
draw=function(self)
  --spr(23,self.x,self.y)
   
  if cutscene and self.black<15  then
  rectfill(camx, camy, camx + screen, camy + screen, 0)
  end

 -- rect(self.x,self.y,self.x+self.w,self.y+self.h,7)
 end
 
 })

end

function add_stair_homing(_x,_y,_type)

add (eft,{


x=_x*8,
w=18,
h=8,
y=_y*8,
type=_type,
target=0,
tm=0,

sp=64,






update=function(self)
local combined_distance = abs((self.x + 8) - (ply.x + 4)) + abs((self.y+4) - (ply.y + 8))
local input = (self.type=="up" and 2) or (self.type=="down" and 3)
local offset=self.type=="both" and 16 or 15
local targetoffset=self.type=="both" and 5 or 2

if combined_distance<=16  then

if flr(ply.x+4-(self.x+8))<=-3 then self.target=self.x+offset
elseif flr(ply.x+4-(self.x+7))>=targetoffset and not ply.onstr then self.target=self.x+4
end
end

if combined_distance<=16 then
if  hit (ply.x+4,ply.y+15,self.x,self.y,self.w,self.h) then

if self.type~="up" then
ply.home=true
end
self.hit=true


end
else self.hit=false
end


if self.hit and self.type~="both" then
self.dck=false

if ply.lnd and not ply.hrt and not ply.stn and not ply.atk and not ply.thw and not ply.ded then
if btn(input) and not ply.onstr then 
ply.tm1+=.05
if ply.x+4<self.target then
ply.flp=false
ply.dx = .6
--                    ply.buf = ply.acc
                    ply.wlk = true
elseif ply.x+4>self.target then
ply.flp=true
ply.dx = -.6
--   ply.buf = -ply.acc
   ply.wlk = true
end

end

end
end
if self.hit and self.type=="both" then
if (btn(2) or btn(3)) and not ply.onstr then 

if ply.x+4<self.target then
ply.flp=false
ply_move_right()
elseif ply.x+4>self.target then
ply.flp=true
ply_move_left()
end
end
end






if tran or door then del(eft,self)
end

 
end,
draw=function(self)
  --spr(23,self.x,self.y)
--local combined_distance = abs((self.x + 8) - (ply.x + 4)) + abs((self.y+4) - (ply.y + 8))
-- print(self.tm,self.x,self.y-16,7)
    
-- line(self.target,self.y,self.target,self.y+self.h,8)
--if combined_distance<=16 then
--rect(self.x,self.y,self.x+self.w,self.y+self.h,7)
-- end
 end
 
 })

end

function add_scene_trigger_final(_x,_y)

add (eft,{


x=_x*8,
w=8,
h=16,
y=_y*8-24,
black=0,
sp=64,






update=function(self)






if ply.lnd and hit (ply.x+4,ply.y+6,self.x,self.y,self.w,self.h) and not ply.hrt and not ply.ded then
self.black+=1



ply.blk=false
trantm += 0.05
tran = true
if self.black>15 then



spwntmr=0


cur_stge=18
cur_flr=1
chk_flr=cur_flr
chk_stge=cur_stge
chk_face=ply.flp

for a in all (act) do
del(act,a)
end
for e in all(env) do
if not e.isdoor then
del(env,e)
end
end
for e in all(eft) do
if e.isspawner then
del(eft,e)
end
end

end

end
if cur_stge==18 then del(eft,self)

end


 
end,
draw=function(self)
 -- spr(23,self.x,self.y)

 
 end
 
 })

end

--handler for multiple secrets in one chunk

function add_secret_trigger(_x,_y,_sectype,_secretx,_secrety,_id,_itm)

add (eft,{
item=_itm or 62,
id=_id or nil,
secret_trigger=true,
sectype=_sectype,
secretx=_secretx,
secrety=_secrety,
x=_x*8-2,
w=12,
h=3,
tm0=0,
y=_y*8-12,
black=0,
sp=64,






update=function(self)




if hit (ply.x+4,ply.y+13,self.x,self.y,self.w,self.h)  then self.tm0+=1

for other in all(eft)do
if other.secret_trigger and other.id~=self.id then
other.tm0=0
end
end

for s in all(itm) do
if s.id~="exempt"  then
if  s.id~=self.id then del(itm,s)
end
end
end

if self.tm0<=1 then
sectype=self.sectype
secretx=self.secretx
secrety=self.secrety
add_secret(self.secretx,self.secrety,self.item)
for s in all(itm) do
if s.secret then
s.id=self.id
end
end 
end
if secret then secret=false
del(eft,self)

end



end
if door or tran then del(eft,self)
end

 
end,
draw=function(self)
-- print(self.tm0,self.x,self.y,7)
-- print(tostring(self.make),self.x,self.y-8,7)
 
-- rect(self.x,self.y,self.x+self.w,self.y+self.h,7)

  
 end
 
 })

end

function add_secret_trigger_moai(_x,_y)

add (eft,{



secretx=_secretx,
secrety=_secrety,
x=_x*8-2,
w=24,
h=16,

y=_y*8-12,
black=0,
sp=64,






update=function(self)




if hit (ply.x+4,ply.y+13,self.x,self.y,self.w,self.h) and not moai_get then 
if sectype=="moai" then 
 secret=true
 end
sfx(274,6,0,8)
sfx(274,4,8,16)
moai_get=true
del(eft,self)

end

if tran then del(eft,self)
end
 
end,
draw=function(self)
-- print(self.tm0,self.x,self.y,7)
-- print(tostring(self.make),self.x,self.y-8,7)
 
-- rect(self.x,self.y,self.x+self.w,self.y+self.h,7)

  
 end
 
 })

end


function add_fishspawner(_x,_y)

add (eft,{
---[[
isspawner=true,
type=_type,
x=_x*8,
xoff=0,
y=_y*8,
tm0=0,
sp=192,
init=0,
target=50,
flp=false,


--]]
update=function(self)

if (abs(ply.x+4-self.x+4)<60 and abs(ply.x+4-self.x+4)>12) and not clock then

self.tm0+=.2
else self.tm0+=0
self.init=0

end

if ply.x+4<self.x+4 then self.flp=true
else self.flp=false
end

if self.init>=1 then self.init=1
end
if self.init==0 then self.target=25
elseif self.init==1 then self.target=50
end
if self.tm0>=self.target then
self.init+=1
if enemies~=3 and token~=0 and not clock then
token-=1
enemies+=1
add_enmy("fishman",(self.x-2)/8,self.y/8+2,nil,self.flp) 
self.tm0=0
end
end
 
if (tran or door)   then
del(eft,self)

end



 
end,
draw=function(self)


 end
 
 })

end



function add_spawnerair(_type, _rate, _delay)
  add(eft, {
    isspawner = true,
    type = _type,
    x = 0,
    xoff = 0,
    y = _y,
    tm0 = 0,                    -- timer starts at 0
    initial_delay = _delay or 0, -- delay specified, or 0 if not provided
    sp = 192,
    flp = true,
    rate = _rate,
    update = function(self)
      self.y = ply.y
      self.x = camx + self.xoff

      if clock or victory then
        -- no timer increment when clock or victory is active
      else
        self.tm0 = self.tm0 + 0.1
      end

      -- If an initial delay is set, wait until tm0 reaches it
      if self.initial_delay > 0 then
        if self.tm0 >= self.initial_delay and not ply.onstr then
          if self.type == "bat" then
            add_bat(self.x, self.y + 7, 76, self.flp)
          elseif self.type == "medusa" then
            add_medusa(self.x, self.y + 5, 76, self.flp)
          end
          self.tm0 = 0
          self.initial_delay = 0  -- clear delay for subsequent spawns
        end
      else
        -- normal spawn behavior once initial delay is done
        if self.tm0 >= self.rate and not ply.onstr then
          if self.type == "bat" then
            add_bat(self.x, self.y + 7, 76, self.flp)
          elseif self.type == "medusa" then
            add_medusa(self.x, self.y + 5, 76, self.flp)
          end
          self.tm0 = 0
        end
      end

      -- Adjust horizontal offset based on player's facing direction
      if ply.flp then 
        self.xoff = -8
        self.flp = false
      elseif not ply.flp then 
        self.xoff = 240
        self.flp = true
      end

      -- Some stage-specific adjustments (unchanged)
      if not boss then
        if not expert then
          if self.type == "medusa" then 
            if cur_stge == 5 and cur_flr == 1 and ply.x < 376 then self.tm0 = self.rate - 2 end
            if (cur_stge == 5 and cur_flr == 2) and ply.x > 63.8 * 8 then self.tm0 = self.rate - 2 end
            if (cur_stge == 6 and cur_flr == 2) and (ply.x > 580 or ply.x <= 360) then self.tm0 = self.rate - 2 end
            if (cur_stge == 8 and cur_flr == 1) and ply.x < 120 then self.tm0 = self.rate - 2 end
            if (cur_stge == 9 and cur_flr == 1) and ply.x < 66 * 8 then self.tm0 = self.rate - 2 end
            if (cur_stge == 15 and cur_flr == 2) and ply.x < 33 * 8 then self.tm0 = self.rate - 2 end
          end
        end
      end

      if self.type == "bat" then
        if ply.y < 50 then
          if ply.x > 430 then 
            self.xoff = -8
            self.flp = false
          elseif ply.x < 80 then 
            self.xoff = 240
            self.flp = true
          end
        end
      end

      if door or tran then
        del(eft, self)
      end
    end,
    draw = function(self)
      -- drawing code here (if needed)
    end
  })
end


function add_spawnereagle(_x,_y,_dir)

add (eft,{


x=_x,
xoff=0,
y=_y,
dir=_dir,
tm0=0,
sp=192,
xoff=0,
flp=true,

update=function(self)
self.x=camx+self.xoff

if self.dir=="right" then self.xoff=240
else self.xoff=-20

end



if clock then self.tm0+=0
else self.tm0+=1
end
if cur_stge==11 and (ply.x>30*8 and ply.x<95*8)  then

if self.tm0>=150 and enemies<3 then
if self.dir=="left" then
add_egl(self.x,self.y+rnd(40),spawn_item(),false)
elseif self.dir=="right" then
add_egl(self.x,self.y+rnd(40),spawn_item(),true)

end
self.tm0=0

end 
if enemies>=3 then
self.tm0=135
end
end

if cur_stge==17 and (ply.x>4*8 and ply.x<38*8)  then

if self.tm0>=150 and enemies<3 then
if self.dir=="left" then
add_egl(self.x,self.y+rnd(40),spawn_item(),false)
elseif self.dir=="right" then
add_egl(self.x,self.y+rnd(40),spawn_item(),true)

end
self.tm0=0

end 
if enemies>=3 then
self.tm0=135
end
end

if door or tran then
del(eft,self)
end
end,
draw=function(self)

spr(self.sp,self.x,self.y)
print(self.tm0,self.x,self.y-8,7)

 end
 
 })

end

function add_spk(_x,_y)

    add(eft, {
        x = _x + rnd(2) - 1, -- Random offset between -1 and 1
        y = _y,
        tm0 = 0,
        dx = rnd(1) * (rnd(1) > 0.5 and 1 or -1), -- Randomly -1 to 1
        sp = 192,
       

        update = function(self)
            self.x += self.dx
            self.y += rnd(-1)
            self.tm0 += 0.5

            if self.tm0 >= 6 then
                del(eft, self)
            end
        end,

        draw = function(self)
            spr(self.sp, self.x, self.y)
        end
    })

end

function add_smsh(_x,_y)

    add(eft, {
        x = _x + rnd(2) - 1, -- Random offset between -1 and 1
        y = _y,
        tm0 = 0,
        tm1=0,
        blink=false,
        rocks=rnd(5)+3,
        sp = 263,

        update = function(self)
           
            self.tm0 += 1
            self.tm1+=1
            if self.tm0<60 then
            camy=flash_timer%10<5 and 1 or -1
           end
            if self.tm0==1 then 
            sfx(317, -1)
            sfx(319, 4, 3)
           add_break(self.x,self.y-4)
	add_break(self.x+4,self.y)
	add_break(self.x,self.y)
	add_break(self.x,self.y-4)
	if not ply.jmp then
	ply.stn=true
	ply.tm2=-5
	end 
           end
           

            if self.tm0 >=200 then
                del(eft, self)
            end
            if self.tm0 >150 then
            self.blink=flash_timer%10<5 and true or false
            end
            if self.tm1==20 and self.tm0<100 and self.rocks~=0 then
             for i = 1, 1 do -- Adjust '5' to control how many rocks fall
                    local grid_x = flr(rnd(16)) * 8 -- Random column within 16 tiles, aligned to grid
                    add_rock(grid_x, camy -4) -- Spawns above the smash
                end
                self.tm1=rnd(0)+7
                self.rocks-=1
                end
            
        end,

        draw = function(self)
        palt(0,false)
        palt(30,true)
        if not self.blink then
            spr(self.sp, self.x, self.y)
            end
            palt()
        end
    })

end




function add_score(_x,_y,_dy,_sp)

add (eft,{

x=_x,
y=_y-8,
dy=-_dy,
tm0=0,
tm1=0,
sp=_sp,


--]]
update=function(self)
 self.y+=self.dy
 self.tm0+=.2
 self.tm1+=.2


 
 if self.tm1>=1 then
 self.tm1=0
 end


if self.tm0>6 then

self.dy+=.01

end

 if self.tm0>=15 then
 
 del(eft,self)
 
 end


 
 
 
end,
draw=function(self)

 spr(self.sp,self.x,self.y)

 end
 
 })

end

function add_bigscore(_x,_y,_value)
local value_to_sprite = {
    [1000] = 193,
    [2000] = 194,
    [4000] = 136
}
add (eft,{

x=_x,
y=_y-8,
dy=-.8,
tm0=0,
tm1=0,
sp = value_to_sprite[_value],


update=function(self)
 
 self.y+=self.dy
 self.tm0+=.2


if self.tm0>6 then

self.dy+=.01

end

 if self.tm0>=15 then
 
 del(eft,self)
 
 end



 
 
end,
draw=function(self)
local col=flash_timer%15<7 and 1 or 2
if col==2 then
pal(10,27)
pal(25,28)
else pal()

end
 spr(self.sp,self.x,self.y)
pal()
 end
 
 })

end
function add_flr(_x,_y,_item,_sp)

add (eft,{

x=_x,
y=_y,
itm=_item,
tm0=0,

sp=_sp,

update=function(self)
self.y-=.5
 self.tm0+=.03
 if self.sp==nil then self.sp=123
 end
 
 if self.tm0>=.25 then
 self.sp-=1
 self.tm0=0
 
 end
 
 if self.sp<122  then
 if self.itm~=nil then
 add_pup(self.x,self.y-3,self.itm)
 
 
 end
 del(eft,self)
end
 --]]
 
 
end,
draw=function(self)
-- print(self.itm
 spr(self.sp,self.x,self.y)

 end
 
 })

end



function add_splash(_x,_y,_dx)

add (eft,{
x=_x,
y=_y+4,
h=18,
w=3,
dx=_dx,
dy=rnd(-1)-2,
sp=121,
flpx=false,
flpy=false,
tm0=0,
tm1=0,
frm=1,


update=function(self)
self.y+=self.dy
self.dy+=grav
self.x+=self.dx



if tran or self.y>140 then



del (eft,self)

end
 
 
end,
draw=function(self)

 spr(self.sp,self.x,self.y,self.flpx,self.flpy)

 end
 
 })

end
function add_break(_x, _y, _type)
    add(eft, {
        x = _x,
        y = _y + 4,
        h = 18,
        w = 3,
        dx = rnd(-1) + 0.5,
        dy = rnd(-1),
        sp = 89,
        type = _type,
        tm1 = 0,
        frm = 1,

        update = function(self)
            if self.type == "hud" then
                -- Movement relative to HUD and camera
                self.x += self.dx
                self.y += self.dy
                self.x = camx + (self.x - camx)
                self.y = camy + (self.y - camy)
            else
                -- Normal behavior for non-HUD pieces
                self.x += self.dx
                self.y += self.dy
            end

            self.dy += grav -- Apply gravity
            if tran or self.y > 140 then
                del(eft, self) -- Remove when out of bounds
            end
        end,

        draw = function(self)
            spr(self.sp, self.x, self.y, self.flpx, self.flpy)
        end,
    })
end
-- end cutscene stuff
function add_castle(_x,_y)

add (eft,{

x=_x,
y=_y,
shake=false,
animx=0,
animy=0,
tm0=0,
crumble=false,
sp=329,
sp2=328,
tm1=0,
tm2=0,
update=function(self)
self.tm0+=1
if self.tm0==30 then self.shake=true
end
if self.tm0==60 then self.crumble=true

end
if self.shake then
self.animx=flash_timer%20<10 and 0 or 1
end
if self.tm0>=80 then self.tm0=0
end

if self.tm0==1 and self.crumble then
sfx(265,4)
end

if self.y-self.animy>15 and self.crumble then

self.animy+=.08

 end
if self.y-self.animy<=15 then self.tm0=5
self.crumble=false
self.shake=false
self.tm1+=1
end
if self.tm1==208 then
--add_text_box(self.x,self.y)
music(75)
end
 if self.tm1>=210 then
 self.tm1=210
 self.tm2+=1
end
 
 
end,
draw=function(self)

 palt(0,false)
 palt(23,true)
 spr(self.sp,self.x,self.y)
 clip(self.x,self.y,40,25)
 spr(self.sp2,self.x+self.animx,self.y+self.animy)
 clip()
 palt()
--  print (self.tm2,self.x-20,self.y,7)
--  print (tostring(self.shake),self.x-20,self.y+16,7)

 end
 
 })

end

function add_text(_x, _y, _text, persistent)
    add(eft, {
        x = _x,
        y = _y,
        text = _text, -- Table containing lines of text
        persistent = persistent or false, -- If true, text stays on screen
        fade_timer = 0, -- Timer to control fade-in/out
        fade_phase = "fade_in", -- Current phase: "fade_in", "visible", "fade_out"
        fade_colors = {31, 4, 20, 0}, -- Fading colors (dark to bright)
        fade_index = 1, -- Current color index for fading

        update = function(self)
            self.fade_timer += 1

            if self.fade_phase == "fade_in" then
                -- Handle fade in
                if self.fade_timer % 10 == 0 then
                    self.fade_index += 1
                    if self.fade_index > #self.fade_colors then
                        self.fade_phase = "visible"
                        self.fade_index = #self.fade_colors
                        self.fade_timer = 0
                    end
                end
            elseif self.fade_phase == "visible" then
                -- Stay visible indefinitely if persistent
                if not self.persistent and self.fade_timer > 240 then -- Adjust duration
                    self.fade_phase = "fade_out"
                    self.fade_timer = 0
                end
            elseif self.fade_phase == "fade_out" then
                -- Handle fade out
                if self.fade_timer % 10 == 0 then
                    self.fade_index -= 1
                    if self.fade_index < 1 then
                        del(eft, self) -- Remove when fully faded out
                    end
                end
            end
        end,


        draw = function(self)
            local fade_color = self.fade_colors[self.fade_index] or 0

            -- Draw each line twice: shadow first, then fading text
            for i = 1, #self.text do
                -- Drop shadow (static, darker color)
                print(self.text[i], self.x , self.y + 1 + (i - 1) * 10, 7) -- Black shadow
                print(self.text[i], self.x + 1, self.y + 1 + (i - 1) * 10, 7) -- Black shadow

                -- Main text (fading)
                print(self.text[i], self.x, self.y + (i - 1) * 10, fade_color)
            end
        end,
    })
end

function add_wind(_x,_y)

    add(eft, {
        x = _x+rnd(30), -- Random offset between -1 and 1
        y = _y+rnd(30),
        tm0 = 0,
        dy = rnd(1) * (rnd(1) > 0.5 and 1 or -1),
        dx = rnd(1) * (rnd(1) > 0.5 and- 4 or -3), -- Randomly -1 to 1
        sp = 310,
       

        update = function(self)
            self.x+= self.dx
            self.y += self.dy
            self.tm0 += 0.5

            if self.tm0 >= 6 then
                del(eft, self)
            end
        end,

        draw = function(self)
            
            spr(self.sp, self.x, self.y)
        
        end
    })

end


function add_rain(_x,_y)

    add(eft, {
        x = _x, -- Random offset between -1 and 1
        y = _y,
        h=16,
        w=4,
        
        tm0 = 0,
        dy = rnd(1)<.5 and 4 or 3,
        dx = dx or 0,
        dxmax=4,
         acc= 0,
        tm0=0, 
        sp = 311,
       

        update = function(self)
            if not clock then
            self.x+= self.dx
            self.dx-=self.acc
            self.y += self.dy
            if buffet then self.acc+=.8
            end
            if self.tm0==0 then
            self.dy+=grav
            end
self.sp=self.dx>=0 and 311 or 312
if self.dx<-self.dxmax then self.dx=-self.dxmax
end
 if collide_map(self,"down",0) then
 
 self.sp=313
 self.dx=0
 self.dy=0
 self.tm0+=1
 self.y-=flr((self.y+self.h)%8)
 else self.tm0=0 
end

if self.tm0 == 2 and rnd(1) < .1 then
    local rainsnd = flr(rnd(3))   -- 0,1,2

    if not buffet then                -- heavy offsets
        if     rainsnd == 0 then  sfx(277, -1,  0, 8)
        elseif rainsnd == 1 then  sfx(277, -1,  8, 8)
        elseif rainsnd == 2 then  sfx(277, 5, 16, 8)
        end
    else                          -- light offsets
        if     rainsnd == 0 then  sfx(277, -1, 24, 8)
        elseif rainsnd == 1 then  sfx(277, -1, 32, 8)
        elseif rainsnd == 2 then  sfx(277, 5, 40, 8)
        end
    end
end
            if self.y >= camy+screen or self.tm0>3 then
                del(eft, self)
            end
            end
        end,

        draw = function(self)
        print(rainsnd,self.x,self.y,7)
            if self.x< camx+screen then
            spr(self.sp, self.x, self.y)
            end
        
        end
    })

end

function add_feather(_x,_y)

    add(eft, {
        x = _x, -- Random offset between -1 and 1
        y = _y,
        h=16,
        w=4,
        
        tm0 = 0,
        dy = rnd(1)<.5 and -.5 or -.2,
        dx = rnd(-1)+1,
        flp=rnd(1)<.5 and true or false,
        flpv=rnd(1)<.5 and true or false,
        dxmax=rnd(1)<.5 and 4 or 3.5,
         acc= 0,
        tm0=0, 
        sp = 314,
       

        update = function(self)
            self.x+= self.dx
            self.dx-=self.acc
            self.y += self.dy
            if buffet then self.acc+=.05
            end
            if not buffet and self.dx<0 then self.acc-=.05
            
            end
            if self.dx>=-1 then self.dx=-1
            end
            if self.tm0==0 then
            self.dy+=.01
            end
if self.dx<-self.dxmax then self.dx=-self.dxmax
end
 
 


            if self.y >= camy+screen  then
                del(eft, self)
            end
        end,

        draw = function(self)
            if self.x< camx+screen then
            spr(self.sp, self.x, self.y,self.flp,self.flpv)
            end
        
        end
    })

end
:: env.lua
--[[pod_format="raw",created="2024-09-15 01:34:22",modified="2025-04-22 12:23:01",revision=38736]]
function add_entrance_r(_x,_y)
add (ent,{
x=_x*8,
y=_y*8-32,
h=32,
w=12,
sp=254,

harm=false,
plat=true,
trvl=0,
tm0=0,

latch=240,

enter=false,


update=function(self)
camxmax=self.x-screen+48
if not door then
if ply.x>self.x+40 then
ply.x=self.x+40
end
end
if  door  then

if ply.x+4<=self.x+4 then
ply.dx=.2
ply.flp=false
elseif ply.x+4>self.x+5 then
ply.flp=true
ply.dx=-.2
elseif ply.x+4>=self.x+2 and ply.x+4<=self.x+5 then
ply.dx=0


end
if ply.x+4>=self.x+2 and ply.x+4<=self.x+5 and not self.enter then
sfx(260,-1)
self.enter=true
ply.dx=.2


end

if self.enter then
self.tm0+=.2
ply.dx=.2
ply.flp=false
end


end

if hit(ply.x+4,ply.y+10,self.x-6,self.y+24,self.w+12,self.h) and ply.lnd  then

door=true
move=true


end

if door and ply.x>self.x+14 then
ply.x=self.x+14

end
if tran then 
del(ent,self)
end

if self.tm0>=35 then
camx=0
door=false
move=false
cur_flr+=1
stx=16
sty=102
ply.x=stx
ply.y=sty

enter=false

spwntmr=0
chk_flr=cur_flr
stx=flr(ply.x)
sty=flr(ply.y)


del(ent,self)



end

end,

draw=function(self)
if self.enter then

 spr(self.sp,self.x,self.y,self.flp)

end

 if self.tm0>=30 then
rectfill(camx,camy,camx+240,camy+130,0)
end
 end
 
 })

end

function add_entrance_l(_x,_y)
add (ent,{
x=_x*8,
y=_y*8-32,
h=32,
w=24,
sp=203,

harm=false,
plat=true,
trvl=0,
tm0=0,

latch=240,

enter=false,


update=function(self)
--camxmax=self.x-screen+48
--if not door then
--if ply.x>self.x+40 then
--ply.x=self.x+40
--end
--end
if  door  then

if ply.x+4<=self.x+20 then
ply.dx=.2
ply.flp=false
elseif ply.x+4>self.x+21 then
ply.flp=true
ply.dx=-.2
elseif ply.x+4>=self.x+17 and ply.x+4<=self.x+16 then
ply.dx=0


end
if ply.x+4>=self.x+20 and ply.x+4<=self.x+22 and not self.enter then
sfx(260,-1)
self.enter=true
ply.dx=-.2


end

if self.enter then
self.tm0+=.2
ply.dx=-.2
ply.flp=true
end


end

if hit(ply.x+4,ply.y+10,self.x+6,self.y+24,self.w-2,self.h+8) and ply.lnd  then
door=true
move=true
else

end
---[[
if door and ply.x<self.x+2 then
ply.x=self.x+2

end
--]]
if tran then 
del(ent,self)
end

if self.tm0>=35 then
camx=0
door=false
move=false
cur_stge+=1
ply.x=57*8
ply.y-=8
stx=ply.x
sty=ply.y
enter=false

spwntmr=0
chk_stge=cur_stge
chk_face=ply.flp


del(ent,self)



end

end,

draw=function(self)
--if self.enter then

 spr(self.sp,self.x,self.y,true)

--end
--rect(self.x+8,self.y+24,self.w+16,self.h+40,7)
 if self.tm0>=30 then
rectfill(camx,camy,camx+240,camy+130,0)
end
 end
 
 })

end


function add_door_r(_x,_y,_stop)
add (env,{
isdoor=true,
x=_x*8,
y=_y*8-32,
h=3,
w=26,
sp=200,

anmoff=0,
stop=_stop,

tm0=0,
tm1=0,
tm2=0,
latch=240,
scroll=6,
spmax=202,
dist=0,
active=false,


update=function(self)


if  self.tm2~=3 then
camxmax=self.x-screen+self.scroll
else if self.tm2==3 then
camxmax=self.x-screen+self.scroll+self.latch

end
end

if door and abs(self.x+4-ply.x+4)<20 then

ply.flp=false
ply.dx=0

ply.canwlk=false
end
 
if hit(self.x,self.y+29,ply.x,ply.y-20,ply.w+2,ply.h+20) 
and ply.lnd and not (ply.hrt or ply.ded)  then
if not door then
ply.x=self.x-8
end
self.active=true
door=true
secret=false
	if camxmax~=self.x then
	self.scroll+=1
	end
  
	
	
		if camx>=self.x-self.latch+119 and not self.next and self.dist~=32 then
		
		sfx(319,7)

		self.next=true
		enter=true
		end

			if self.next  then
			self.tm0+=.15
			self.tm1+=.15
			end

end
if self.tm1>=6 and self.dist~=32 then 

	self.tm1=6
	move=true
	
	ply.x+=.5
	self.dist+=.5
end
if self.dist==32 and next then
self.next=false
self.tm0-=.15
move=false

end



if self.tm0>=1 then
self.sp+=1
self.tm0=0

end

if self.tm0<0 then
self.sp-=1
self.tm0=1

end
if self.sp>=self.spmax then
self.sp=self.spmax
end
if self.sp<=200 then
self.sp=200

end
if self.dist==32 and self.sp==200 then
self.tm2+=.15
if self.tm1==6 then
sfx(319,7) 
self.tm1=0

end
if
self.tm2>=3 then
self.tm2=3
camx+=1



end

end

if self.sp==200 then self.anmoff=0
elseif self.sp==202 then self.anmoff=4


end

if camx>=self.x+8 and self.active then
door=false
spwntmr=0
ply.x=16
enter=false
camx=0

stx=flr(ply.x)
sty=flr(ply.y)
if cur_stge<10 then
clck+=50
else clck+=100
end
cur_stge+=1
cur_flr=1
chk_flr=cur_flr
chk_stge=cur_stge
chk_face=ply.flp
 
del(env,self)

end
if tran then
del(env,self)
end
if self.stop=="stop" then camxmax=(self.x-240)+8
del(env,self)
end
end,

draw=function(self)

 spr(self.sp,self.x+self.anmoff,self.y,self.flp)
-- print(tostring(door),self.x,self.y-24,7)
 end
 
 })

end

function add_door_l(_x,_y,_stop)
add (env,{
x=_x*8,
y=_y*8-32,
h=3,
w=26,
sp=200,

anmoff=0,
stop=_stop,

tm0=0,
tm1=0,
tm2=0,
latch=240,
scroll=6,
spmax=202,
dist=0,
flp=true,
active=false,


update=function(self)


if  self.tm2~=3 then
camxmin=self.x+8-self.scroll
elseif self.tm2==3 then
camxmin=self.x-(self.scroll+self.latch)


end

if door then
ply.flp=true
ply.dx=0
if not self.active then
ply.x=self.x+9
end
end
if self.stop=="stop" then camxmin=self.x
del(env,self)
end 

if hit(self.x+9,self.y+29,ply.x,ply.y-20,ply.w,ply.h+20) 
and ply.lnd and not (ply.hrt or ply.ded)  then
if not door then
ply.x=self.x+8
end
door=true
self.active=true      
if camxmin~=self.latch then
	self.scroll+=.99
	end
end

	
   
	
	
		if camx==self.x-104 and not self.next and self.dist~=32 then
		
		sfx(319,7)

		self.next=true
		enter=true
		end

			if self.next  then
			self.tm0+=.15
			self.tm1+=.15
			end


if self.tm1>=6 and self.dist~=32 then 

	self.tm1=6
	move=true
	
	ply.x-=.5
	self.dist+=.5
end
if self.dist==32 and next then
self.next=false
self.tm0-=.15
move=false

end



if self.tm0>=1 then
self.sp+=1
self.tm0=0

end


if self.tm0<0 then
self.sp-=1
self.tm0=1

end
--]]

if self.sp>=self.spmax then
self.sp=self.spmax
end
if self.sp<=200 then
self.sp=200

end

if self.dist==32 and self.sp==200 then
self.tm2+=.15
if self.tm1==6 then
sfx(319,7) 
self.tm1=0
end
end


if
self.tm2>=3 then
self.tm2=3
camx-=1



end



if self.sp==201 then self.anmoff=-8
elseif self.sp==202 then self.anmoff=-24
elseif self.sp==200 then self.anmoff=0


end

if self.x>=camx+240 and self.active then
door=false
spwntmr=0
ply.x=648
enter=false
camx=0
level=self.level
chkpoint=level
stx=flr(ply.x)
sty=flr(ply.y)
clck+=50
cur_stge+=1
cur_flr=1
chk_flr=cur_flr
chk_stge=cur_stge
chk_face=ply.flp
del(env,self)

end
if tran then
del(env,self)
end

end,

draw=function(self)

 spr(self.sp,self.x+self.anmoff,self.y,self.flp)

 end
 
 })

end

function add_liftlr(_x,_y,_range,_dir)

add (env,{
x=flr(_x)*8,
y=_y*8,
h=5,
w=26,
sp=134,
dx=.50,
rnge=_range,
harm=false,
plat=true,
trvl=0,
tm1=0,
right=_dir,


update=function(self)
self.x+=self.dx
if self.dx<=-.38 or self.dx>=.38 then
self.trvl+=1
end





if self.dx>=.5 then self.dx=.5

end

if self.dx<=-.5 then self.dx=-.5

end

if self.right then self.dx+=.01
elseif not self.right then 
self.dx-=.01

end


if self.trvl>=self.rnge and self.dx>=.5 and self.right then
self.trvl=0 
self.right=false
elseif self.trvl>=self.rnge and self.dx<=-.5 then
self.trvl=0 
self.right=true
end

if hit(ply.x+4,ply.y+17,self.x-1,self.y,self.w,self.h) and ply.dy>=0  then
ply.onlift=true
ply.yoff=0
ply.y=self.y-16
ply.dy=0
ply.dx+=self.dx
ply.canjmp=true
      ply.jmp=false
      ply.lnd=true
      ply.fll=false
   
if ply.ded then
self.dx=0

end

end



if tran or door then



del(env,self)

end

end,

draw=function(self)

 spr(self.sp,self.x,self.y,self.flp)

 end
 
 })

end

function add_liftud(_x,_y,_range,_dir)

add (env,{
x=_x,
y=_y,
h=6,
w=26,
sp=134,
dy=.50,
rnge=_range,
harm=false,
plat=true,
trvl=0,
tm1=0,
down=_dir,


update=function(self)
self.y+=self.dy
if self.dy<=-.38 or self.dy>=.38 then
self.trvl+=1
end





if self.dy>=.5 then self.dy=.5

end

if self.dy<=-.5 then self.dy=-.5

end

if self.down then self.dy+=.01
elseif not self.down then 
self.dy-=.01

end


if self.trvl>=self.rnge and self.dy>=.5 and self.down then
self.trvl=0 
self.down=false
elseif self.trvl>=self.rnge and self.dy<=-.5 then
self.trvl=0 
self.down=true
end

if hit(ply.x+4,ply.y+17,self.x-1,self.y,self.w,self.h) and ply.dy>=0 then
ply.y=self.y-16
ply.dy=0

ply.canjmp=true
      ply.jmp=false
      ply.lnd=true
      ply.fll=false
end



if tran or door then



del(env,self)

end

end,

draw=function(self)

 spr(self.sp,self.x,self.y,self.flp)

 end
 
 })

end

function add_wall(_x,_y,_item)
local wall_id = tostring(level) .. "_" .. tostring(_x) .. "_" .. tostring(_y)

add (env,{

x=flr(_x*8),
y=flr(_y*8),
h=4,
w=8,
sp=31,
item=_item,
broken = brkn_walls[wall_id] or false,
level=level,
curlevel=0,


harm=false,

tm1=0,
right=_dir,


update=function(self)
self.curlevel=level

if whpout==1 and not self.broken  then

		if hit_weapon (self.x,self.y,self.w,self.h,hitx+3,hity+hitoy+3,hitw*lth-2,hith+hitoy-6) then
	sfx(317,7)
	add_break(self.x,self.y-4)
	add_break(self.x+4,self.y)
	add_break(self.x,self.y)
	add_break(self.x,self.y-4)
	mset(self.x/8,self.y/8,0)
if  self.item~=nil  then
	if not self.broken and self.level==self.curlevel then

add_pup(self.x,self.y-4,self.item)

end
end	
brkn_walls[wall_id] = true

self.broken=true	
	end
	
	end

 if door or tran then
                del(env, self)
            end

end,

draw=function(self)

-- spr(self.sp,self.x,self.y)

 end
 
 })

end


function add_press(_x, _y, _range)

add(env, {
    x=_x*8,
    y=_y*8-.1,
    h=8,
    w=24,
    sp=209,
    dy=.50,
    offset=0,
    rnge=_range,

    trvl=flr(0),
    tm1=0,
    raise=true, 
    cap_y=(_y*8) - (_range * 8) - 5, -- Calculate the cap's Y position upfront

    update=function(self)
        if not clock or pup then
            self.tm1 += .1
            if ply.dck then 
                self.offset = 6
            else 
                self.offset = 0
            end

            if self.raise and self.trvl ~= self.rnge then
                if self.tm1 >= 2 then
                    self.y -= 8
                    self.tm1 = 0
                    self.trvl += 1
                end
            end
            if not self.raise and self.trvl >= 0 then
                if self.tm1 >= .25 then
                    self.y += 4
                    self.tm1 = 0
                    self.trvl -= .5
                end
            end

            if self.trvl >= self.rnge then 
                self.trvl = self.rnge
                if self.tm1 >= 7 then
                    self.raise = false
                end
            elseif self.trvl <= 0 then 
                self.trvl = 0
                self.raise = true
            end
        end

        if hit(ply.x+4, ply.y+8+self.offset, self.x-2, self.y-2, self.w+5, self.h+6) and not ply.hrt then
            if ply.jmp then
                ply.y -= 1
                ply.dy = -1
                hrttmr = 0
                ply.hrt = true
                ply.tm3 = 0
                ply.tm4 = 0
            end
            ply.hth = 0
            ply.vishth = 0
        end

        if tran or door then
            del(env, self)
        end
    end,

    draw=function(self)
        -- Draw the cap (static, at a fixed position)
        spr(210, self.x+7, self.cap_y)

        -- Draw the shaft (dynamic, based on movement)
        for s=0, self.rnge-self.trvl do 
            spr(210, self.x+7, flr(self.y-4-s*8))
        end

        -- Draw the crusher head
        spr(self.sp, self.x, self.y, self.flp)
    end
})
end


function add_smsh(_x,_y,_flp)

    add(env, {
        x = _x,
        y = _y,
        flp=_flp,
        tm0 = 0,
        tm1=0,
        blink=false,
        success=false,
        rocks=rnd(5)+3,
        sp = 263,

        update = function(self)
           
            self.tm0 += 1
            self.tm1+=1
            if self.tm0<60 then
            camy=flash_timer%10<5 and 1 or -1
           end
          
            if self.tm0==1 then 
            sfx(317, -1)
            sfx(319, 4, 3)
           add_break(self.x,self.y-4)
	add_break(self.x+4,self.y)
	add_break(self.x+4,self.y)
	add_break(self.x+4,self.y-4)
	if not ply.jmp then self.success=true
	else self.success=false
	 end 
           end
           if self.success and self.tm0<10 and not ply.ded then
           ply.canjmp=false
           ply.dx=0
           ply.anm=13
          
end
 if self.success and self.tm0==10 and not ply.ded then 
 ply.tm2=-5
 ply.stn=true
           
          end
            if self.tm0 >=200 or tran then
                del(env, self)
            end
            if self.tm0 >150 then
            self.blink=flash_timer%10<5 and true or false
            end
            if self.tm1==20 and self.tm0<100 and self.rocks~=0 then
             for i = 1, 1 do -- Adjust '5' to control how many rocks fall
                    local grid_x = flr(rnd(32)) * 8 -- Random column within 32 tiles, aligned to grid
                    add_rock(camx+grid_x, camy-4 ) -- Spawns above the smash
                end
                self.tm1=rnd(0)+7
                self.rocks-=1
                end
            
        end,

        draw = function(self)
        palt(0,false)
        palt(30,true)
        if not self.blink then
            spr(self.sp, self.x, self.y,self.flp)
            end
            palt()
--            print(tostring(self.success),self.x,self.y,7)
        end
    })

end

function add_weather()

    add(env, {
        x = camx+50,
        y = camy-16,
        tm1=100, 
        tm0 = 0,
        sky=1,
        wind_timer=0,
        
--        rocks=rnd(5)+3,
        sp = 192,

        update = function(self)
          if not clock then
          self.tm1+=1
          end
          self.tm0+=1
    if self.tm1 > 300 then
    if  rnd(1)<.3 then
    if rnd(1) < 0.3 then
        -- 20% chance for the clap (offset 0)
        sfx(272, -1, 0)
    else sfx(272, -1, 8)
    end
        -- 20% chance for no thunder at all (do nothing)
    end

    self.tm1 = 0
end
if self.tm1==150 and ((cur_stge==8 and cur_flr==2) or (cur_stge==9 and cur_flr==1)) then
sfx(273,-1)
end
          
         if self.tm1 > 200 and not door and ((cur_stge == 8 and cur_flr == 2) or (cur_stge == 9 and cur_flr == 1)) and not clock then
    -- Increment the wind timer
    self.wind_timer = (self.wind_timer or 0) + 1
    
    -- Trigger wind effect only every 15 frames
    if self.wind_timer == 5 and not clock and not pup then
        add_wind(ply.x, ply.y - 10)
        buffet = true
        self.wind_timer = 0 -- Reset the timer after triggering the effect
    end
else
    buffet = false
    self.wind_timer = 0 -- Reset the timer if conditions aren't met
end
         
          
         if  self.tm1 == 50 or self.tm1 == 51 or self.tm1 == 120 or self.tm1 == 121 or self.tm1 == 200 then
         sky=rnd(1)<.5 and 16 or 12
         else sky=1
    -- Do something, like change the sky color
end
          if self.tm0>1 and not clock then 
            self.x=rnd(camx+400)
           
           
           add_rain(self.x+4,self.y)
           self.tm0=0
          end
          if tran then self.tm1=148
          end
         if not weather then 
         del(env,self)
         end  
          
          


            
        end,

        draw = function(self)
        
        --print(self.tm1,camy,camy+20,7)
    -- spr(self.sp,self.x,self.y)
        end
    })

end
:: file_select.lua
--[[pod_format="raw",created="2024-11-09 16:10:08",modified="2025-04-22 14:10:10",revision=28504]]
-- file select
appdata_path ="/appdata/picovania"
progress=1
cart=false
bob_step=0
allow_bob=true
display=0

-- Local variables for file management
 selected_slot = 1
 local temp_copy_data = nil -- Holds source file data during copy
local option_selected = 1
local delete_mode = false
local confirm_delete = false
local confirm_option = 1
local copy_mode = false
local confirm_copy = false
local copy_source = nil
local name_entry = "SIMON"  -- Ensure name_entry is initialized as "SIMON"
local max_name_length = 8
local name_changed = false  -- Tracks if user starts typing
local cursor_x, cursor_y = 1, 1 -- Starting cursor position for name entry grid
local timer = 0
local timer2 = 0
local selected = false
local shake=5
local back=false
local backtm=0

-- Initialize save data for each slot on load
 
 -- Ensure 'Picovania' folder exists in location

save_data = {}

for i = 1, 3 do
    save_data[i] = fetch(appdata_path .. "/picovania_save" .. i .. ".pod") or { name = nil, level = 1, expert = false, swap = false }
end


-- Function to save data to file
function save_to_file(slot)
    save_data[slot].level = progress -- Sync global level with save data before saving
    save_data[slot].expert = expert -- Sync expert mode unlock if applicable
    save_data[slot].swap = swap -- Sync button swap preference
    save_data[slot].deaths = deaths -- sync total number of deaths
    store(appdata_path .. "/picovania_save" .. slot .. ".pod", save_data[slot])
end

-- Function to delete data from file
function delete_file(slot)

    save_data[slot] = { name = nil, level = nil, expert = nil, swap = nil, deaths=nil } -- Reset save slot data
    rm(appdata_path .. "/picovania_save" .. slot .. ".pod") -- Delete the file from storage
   
end

-- Function to reset name entry data
local function reset_name_entry()
    name_entry = "SIMON"  -- Ensure default name is "SIMON"
    name_changed = false  -- Reset typing tracker
    cursor_x, cursor_y = 4, 5
end

function expert_unlock()
expert=true
save_to_file(selected_slot)
end

function increment_level()
    if cur_stge~=18 then
    progress += 1
    else
    progress=1
    end
    -- Ensure level doesn't exceed the maximum allowed level
   

    -- Save the updated level to the currently selected slot
    save_to_file(selected_slot)
    printh("Progress saved for slot " .. selected_slot .. ". New level: " .. progress)
end
-- Letter grid for Name Entry
local letter_grid = {
    {"A", "B", "C", "D", "E", "F"},
    {"G", "H", "I", "J", "K", "L"},
    {"M", "N", "O", "P", "Q", "R"},
    {"S", "T", "U", "V", "W", "X"},
    {"Y", "Z", "Spc", " Rub", "  End"}
}

-- Update function for file select and delete confirmation
function update_file_select()
if back then 

backtm+=1
end
for e in all (eft)do
e:update()
if btnp(5) then eft={} end
end
if shake<5 then shake+=.2
add_break(camx+rnd(240),camy-50)
end

if shake>=5 then shake=5
end

if progress==1 then
cur_stge=1
cur_flr=1
elseif progress==2 then
cur_stge=4
cur_flr=1
elseif progress==3 then
damage=3
cur_stge=7
cur_flr=1
elseif progress==4 then
damage=3
cur_stge=10
cur_flr=1
elseif progress==5 then
damage=4
cur_stge=13
cur_flr=1
end
--]]
  if selected then 
  
  timer+=1
  timer2+=1
end
 if timer2>=6 then timer2=0

end 
if timer>=130 then

timer=0
timer2=0
selected=false


if progress==1 then
music(0)
scene="gate"
else
simonx=0
scene="map"
end
end
    if delete_mode then
        scene = "delete_confirm"
        update_delete_mode()
    elseif confirm_delete then
        scene = "confirm_delete"
        update_confirm_delete()
    elseif copy_mode then
        scene = "copy_confirm"
        update_copy_mode()
    elseif confirm_copy then
        scene = "confirm_copy"
        update_confirm_copy()
    elseif not selected then
  
 if btnp(0) then -- Left button pressed
    update_cart(true, false)
elseif btnp(1) then -- Right button pressed
    update_cart(false, true)
end


if backtm == 7 then

option_selected=1
full_reset()
back=false
backtm=0
scene="title"
end
        -- Main menu navigation for selecting files or options
        if btnp(2) then -- Up
        flash_timer=0
        sfx(314,7,8)
            option_selected = option_selected > 1 and option_selected - 1 or 5
       elseif btnp(4) and not back then
back=true
sfx(319, 5, 0, 3)
music(-1)
 
 
       
        elseif btnp(3) then -- Down
        flash_timer=0
        sfx(314,7,8)
            option_selected = option_selected < 5 and option_selected + 1 or 1
        elseif btnp(5) and not selected then -- Confirm selection (X button)
     
            if option_selected >= 1 and option_selected <= 3 then -- Start game or new name entry
                selected_slot = option_selected
                
                if save_data[selected_slot].name then
                    printh("Loading File " .. selected_slot .. "...")
                     if not selected then
                  sfx(313,5)
                  end
                  selected=true
                  music(-1)
                  allow_bob=false
                  canskip=true
                 
                  name=save_data[selected_slot].name
                  progress=save_data[selected_slot].level
                  expert=save_data[selected_slot].expert
                  swap=save_data[selected_slot].swap
                  deaths=save_data[selected_slot].deaths
                  chk_stge=cur_stge
                  chk_flr=cur_flr
                  can_pause=true
                  
                  
                else
                sfx(314,7,0,8)
                progress=1
                    reset_name_entry() -- Set default name to "SIMON" on name entry
                    scene = "name_entry"
                end
            elseif option_selected == 4 then -- Move to delete mode
            sfx(314,7,0,8)
                delete_mode = true
                selected_slot = 1
            elseif option_selected == 5 then -- Move to copy mode
            sfx(314,7,0,8)
                copy_mode = true
                copy_source = nil
                selected_slot = 1
           
            end
            
        end
        
    end
   
end


-- Update for Delete Mode: Select which file to delete
function update_delete_mode()

    if btnp(0) then -- Left button pressed
    update_cart(true, false)
elseif btnp(1) then -- Right button pressed
    update_cart(false, true)
end
      if confirm_delete then
        confirm_option = 2
        scene = "confirm_delete"
        update_confirm_delete() -- Go to confirmation step
    else
        if btnp(2) then flash_timer=0 sfx(314, 7, 8) selected_slot = (selected_slot > 1) and (selected_slot - 1) or 3 end -- Up
        if btnp(3) then flash_timer=0 sfx(314, 7, 8) selected_slot = (selected_slot < 3) and (selected_slot + 1) or 1 end -- Down

        if btnp(5) then -- Select file to delete
            if save_data[selected_slot].name then sfx(314, 7, 8, 2)
               file=selected_slot
                 confirm_delete = true
            end
        elseif btnp(4) then -- Cancel delete mode
            sfx(319, 5, 0, 3)
            delete_mode = false
            scene = "file_select"
        end
    end
end

-- Confirm Deletion Step
function update_confirm_delete()
    -- Navigate between Yes and No
    if btnp(0) then -- Left button to select "Yes"
        sfx(314, 7, 8, 2)
        flash_timer=0
        confirm_option = 1
    elseif btnp(1) then -- Right button to select "No"
        sfx(314, 7, 8, 2)
        flash_timer=0
        confirm_option = 2
    end

    -- Confirm selection using the X button
    if btnp(5) then
        if confirm_option == 1 then -- Yes is selected
            sfx(306, 5)
            sfx(319, 4, 3)
            shake=0
            -- Delete the selected file only if "Yes" is chosen
            delete_file(selected_slot)
            printh("File " .. selected_slot .. " deleted successfully.")
        else
            sfx(319, 5, 0, 3) -- No is selected
        end

        -- Reset modes and return to file select screen
        delete_mode = false
        confirm_delete = false
        scene = "file_select"
    end
end

function update_copy_mode()
    if confirm_copy then
        -- Handle confirmation step
        scene = "confirm_copy"
        update_confirm_copy()
    elseif not copy_source then
        -- Source file selection phase
        if btnp(2) then
            sfx(314, 7, 8)
            flash_timer=0
            selected_slot = (selected_slot > 1) and (selected_slot - 1) or 3 -- Up
        end
        if btnp(3) then
            sfx(314, 7, 8)
            flash_timer=0
            selected_slot = (selected_slot < 3) and (selected_slot + 1) or 1 -- Down
        end

       if btnp(5) and save_data[selected_slot].name then
       expert = save_data[selected_slot].expert
       progress=save_data[selected_slot].level
       swap=save_data[selected_slot].swap
       deaths=save_data[selected_slot].deaths
    -- Store the entire source file in the temp buffer
      ---[[
        temp_copy_data = {
        name = save_data[selected_slot].name,
        level = progress,  -- Use the global progress for the level
        expert = save_data[selected_slot].expert,
        swap = save_data[selected_slot].swap,
        deaths = save_data[selected_slot].deaths
    }
    --]]
    copy_source = selected_slot
    source_cart = cart -- Remember the source location
    printh("Source file selected: " .. temp_copy_data.name)
    sfx(314, 7, 8)

        elseif btnp(0) then -- Toggle cart (left button)
            sfx(314, 7, 8)
            update_cart(true, false) -- Set cart = true
        elseif btnp(1) then -- Toggle cart (right button)
            sfx(314, 7, 8)
            update_cart(false, true) -- Set cart = false
        elseif btnp(4) then -- Cancel copy mode
            sfx(319, 5, 0, 3)
            temp_copy_data = nil -- Clear temp buffer
            copy_source = nil
            source_cart = nil -- Clear source location
            copy_mode = false
            scene = "file_select"
        end
    else
        -- Destination file selection phase
        if btnp(2) then
            sfx(314, 7, 8)
            flash_timer=0
            repeat
                selected_slot = (selected_slot > 1) and (selected_slot - 1) or 3 -- Up
            until not (cart == source_cart and selected_slot == copy_source)
        end
        if btnp(3) then
            sfx(314, 7, 8)
            flash_timer=0
            repeat
                selected_slot = (selected_slot < 3) and (selected_slot + 1) or 1 -- Down
            until not (cart == source_cart and selected_slot == copy_source)
        end

        if btnp(5) then
       
            if not save_data[selected_slot].name then
                -- No overwrite needed; write temp data directly to destination
                save_data[selected_slot] = {
                    name = temp_copy_data.name,
                    level = temp_copy_data.level,
                    expert = temp_copy_data.expert,
                    swap = temp_copy_data.swap,
                    deaths = temp_copy_data.deaths
                }
                save_to_file(selected_slot) -- Save to file
                temp_copy_data = nil -- Clear temp buffer
                copy_source = nil
                source_cart = nil -- Clear source location
                copy_mode = false
                sfx(258, 6, 8, 3)
                sfx(258, 5, 0, 8)
                printh("File copied to slot " .. selected_slot)
                scene = "file_select"
            else
                -- Handle overwrite confirmation
                sfx(314, 7, 8, 2)
                confirm_copy = true
            end
        elseif btnp(0) then -- Toggle cart (left button)
            sfx(314, 7, 8)
            update_cart(true, false) -- Set cart = true
        elseif btnp(1) then -- Toggle cart (right button)
            sfx(314, 7, 8)
            update_cart(false, true) -- Set cart = false
        elseif btnp(4) then -- Cancel copy mode
            sfx(319, 5, 0, 3)
            temp_copy_data = nil -- Clear temp buffer
            copy_source = nil
            source_cart = nil -- Clear source location
            copy_mode = false
            scene = "file_select"
        end
    end
end






-- Confirm Copy Step with Overwrite Warning
function update_confirm_copy()
    -- Navigate between Yes and No
    if btnp(0) then -- Left
        sfx(314, 7, 8, 2)
        confirm_option = 1
    elseif btnp(1) then -- Right
        sfx(314, 7, 8, 2)
        confirm_option = 2
    end

    -- Confirm selection using X button
    if btnp(5) then
        if confirm_option == 1 then -- Yes (overwrite)
            sfx(258, 6, 8, 3)
            sfx(258, 5, 0, 8)
            timer2 += 1

            -- Overwrite destination with data from temp_copy_data
            save_data[selected_slot] = {
                name = temp_copy_data.name,
                level = temp_copy_data.level,
                expert = temp_copy_data.expert,
                swap = temp_copy_data.swap,
                deaths = temp_copy_data.deaths
            }
            save_to_file(selected_slot) -- Save the overwritten data
            temp_copy_data = nil -- Clear temp buffer after successful copy
            copy_source = nil -- Clear source
        else -- No (cancel overwrite)
            sfx(319, 5, 0, 3)
        end

        -- Exit copy mode
        copy_mode = false
        confirm_copy = false
        scene = "file_select"
    end
end

-- Name Entry Update
function update_name_entry()
if selected then
timer2+=1
end
if cursor_x==6 and cursor_y==5 then
cursor_x=5
end
    if name_entry_timer and name_entry_timer > 0 then
        name_entry_timer = name_entry_timer - 1
        return
    elseif not name_entry_timer then
        name_entry_timer = 13 -- Set a timer for 13 frames (assuming 60 FPS)
    end
    if name_entry_timer > 0 then return end
    if name_entry_timer and name_entry_timer > 0 then
        name_entry_timer = name_entry_timer - 1
        return
    elseif not name_entry_timer then
        name_entry_timer = 13 -- Set a timer for 13 frames (assuming 60 FPS)
    end
    if btnp(2) then flash_timer=0 sfx(314,7,8,2) cursor_y = (cursor_y > 1) and cursor_y - 1 or #letter_grid end -- Up
    if btnp(3) then flash_timer=0 sfx(314,7,8,2) cursor_y = (cursor_y < #letter_grid) and cursor_y + 1 or 1 end -- Down
    if btnp(0) then flash_timer=0 sfx(314,7,8,2) cursor_x = (cursor_x > 1) and cursor_x - 1 or #letter_grid[1] end -- Left
    if btnp(1) then flash_timer=0 sfx(314,7,8,2) cursor_x = (cursor_x < #letter_grid[1]) and cursor_x + 1 or 1 end -- Right
    
    if btnp(5) then -- X Button to select
    sfx(314,7,8)
    flash_timer=0
        local selected = letter_grid[cursor_y][cursor_x]
       
        if selected == "  End" then
        
        if name_entry=="" then
        sfx(304, 7, 0, 4)
        name_entry="SIMON"
        cursor_x=4
        
        else
        selected=true
       
            -- Set name if "End" is chosen without typing
            save_data[selected_slot].name = name_entry
            save_data[selected_slot].level = level
          
            save_to_file(selected_slot) -- Save data to file
            reset_name_entry() -- Clear name entry data
            sfx(258,6,8,3)
            sfx(258,5,0,8)
            scene = "file_select" -- Go back to file select
           
    name_entry_timer = nil -- Reset the timer
    name_entry_timer = nil -- Reset the timer
  
    end
        elseif selected == " Rub" then
         sfx(319,5,0,3)
        if name_entry == "SIMON" then
         sfx(303,4,0,4)
            name_entry = ""
        elseif #name_entry > 0 and name_changed then
                name_entry = string.sub(name_entry, 1, -2) -- Delete last character
            end
        elseif selected == "Spc" then
            if #name_entry < max_name_length then
                if not name_changed then
                    name_entry = ""  -- Clear "SIMON" if typing starts
                    sfx(303,4,0,4)
                    name_changed = true
                end
                name_entry = name_entry .. " " -- Add a space
            end
        else
            if #name_entry < max_name_length then
            
                if not name_changed  then
                
                    name_entry = ""  -- Clear "SIMON" if typing starts
                    
                    name_changed = true
                    sfx(303,4,0,4)
                end
                name_entry = name_entry .. selected -- Add selected letter
                
            end
        end
    end
end


-- Draw Functions for File Select and Modes
function draw_file_select()
    local x1=camx+20
    local x2=camx+240
    local y1=0
    local y2=0
    if shake ~=5 then 
   
    flash_color=flash_timer%10<5 and 20 or 5
    camy=flash_timer%10<5 and -1 or 1
    elseif shake==5 then 
    flash_color=1
    camy=0
    end
    
 if option_selected==1 then y1=30 y2=37
 elseif option_selected==2 then y1=50 y2=57
 elseif option_selected==3 then y1=70 y2=77
   
  end
  
    cls(flash_color)
  -- Call the generic save location feedback
  
     draw_save_location_feedback(camx + 120, camy + 80) -- Adjust base_x and base_y as needed

    print("Select a File",camx+ 40,camy+ 10, 7)
local flash_color=selected==false and flash_timer%50<15 and 2 or 10
   
    for i = 1, 3 do
        local y = 30 + (i - 1) * 20
        local color = (option_selected == i) and flash_color or 7
        if save_data[i].name then
            print("File " .. i .. ": " .. save_data[i].name .. " (Lv " .. save_data[i].level .. ")",camx+ 20,camy+ y, color)
            if save_data[i].expert then
                print("Expert",camx+ 140,camy+( y ), color)
            end
        else
            print("File " .. i .. ": New Game",camx+ 20,camy+ y, color)
        end
    end
if timer2>=3 then    
rectfill(x1,y1,x2,y2,1)
end

    print("Delete a File",camx+ 20,camy+ 100, (option_selected == 4) and flash_color or 7)
  print("Copy a File",camx+ 20,camy+ 120, (option_selected == 5) and flash_color or 7)
    if timer>110 or back then
rectfill(camx,camy,camx+screen,camy+screen,0)

end
--print(idle,camx,camy,7)

for e in all (eft)do
e:draw()
end

end

function draw_delete_mode()
    cls(21)
  
    print("Delete which file?",camx+ 30,camy+ 10, 8)
    local flash_color=flash_timer%50<15 and 2 or 10
    for i = 1, 3 do
        local y = 30 + (i - 1) * 20
        local color = (selected_slot == i) and flash_color or 7
        if save_data[i].name then
            print("File " .. i .. ": " .. save_data[i].name .. " (Lv " .. save_data[i].level .. ")",camx+ 20,camy+ y, color)
            if save_data[i].expert then
                print("Expert",camx+ 140,camy+( y ), color)
            end
        else
            print("File " .. i .. ": New Game",camx+ 20,camy+ y, color)
        end
    end
    -- Call the generic save location feedback
    draw_save_location_feedback(camx + 120, camy + 80) -- Adjust base_x and base_y as needed
end

function draw_confirm_delete()
    cls()
    local flash_color=flash_timer%50<15 and 2 or 10
    local yes_color = (confirm_option == 1) and flash_color or 7
    local no_color = (confirm_option == 2) and flash_color or 7
    print("Are you sure?",camx+ 30,camy+ 10, 8)
    flash_color = flash_timer % 30 < 15 and 8 or 9
    print("This is permanent!",camx+ 20,camy+ 30, flash_color)
    print("Yes",camx+ 20,camy+ 60, yes_color)
    print("No",camx+ 60,camy+ 60, no_color)

end

function draw_name_entry()
    cls(1)
    rectfill(camx+29,camy+26,camx+88,camy+40,20)
    rectfill(camx+30,camy+27,camx+87,camy+39,0)
    
    print("Enter Your Name",camx+ 30,camy+ 10, 7)
    print(name_entry,camx+39,camy+ 30, 10)
    rectfill(camx+14,camy+46,camx+107,camy+121,20)
    rectfill(camx+15,camy+47,camx+106,camy+120,0)
    local flash_color=flash_timer%50<15 and 2 or 10
    for y = 1, #letter_grid do
        for x = 1, #letter_grid[y] do
            local letter = letter_grid[y][x]
            local color = (x == cursor_x and y == cursor_y) and flash_color or 7
            print(letter,camx+ (20 + (x - 1) * 15),camy+(50 + (y - 1) * 15), color)
        end
    end

end

function draw_copy_mode()
    cls(19)

    --flash_timer = flash_timer or 0
    --flash_timer = flash_timer + 1  -- Increment flash timer for flashing effects
    local flash_color=flash_timer%50<15 and 2 or 10
    if not copy_source then
        print("Select a file to copy", camx + 30, camy + 10, 8)
    else
        print("Copy to?", camx + 30, camy + 10, 9)
    end

    for i = 1, 3 do
        local y = 30 + (i - 1) * 20
        local color = 7 -- Default white color

        -- Determine slot color
        if cart == source_cart and i == copy_source then
            color = 9 -- Orange for the source slot in the same location
        elseif i == selected_slot then
            color = flash_color -- Yellow for the selected slot
        end

        -- Draw the slot
        if save_data[i].name then
            print("File " .. i .. ": " .. save_data[i].name .. " (Lv " .. save_data[i].level .. ")", camx + 20, camy + y, color)
            if save_data[i].expert then
                print("Expert", camx+ 140, camy + y, color)
            end
        else
            print("File " .. i .. ": New Game", camx + 20, camy + y, color)
        end
       
    end
    -- Call the generic save location feedback
    draw_save_location_feedback(camx + 120, camy + 80) -- Adjust base_x and base_y as needed
end


function draw_confirm_copy()
    cls()
 
    local flash_color=flash_timer%50<15 and 2 or 10
    local yes_color = (confirm_option == 1) and flash_color or 7
    local no_color = (confirm_option == 2) and flash_color or 7
    print("Are you sure?",camx+ 30,camy+ 10, 8)
    flash_color = flash_timer % 30 < 15 and 8 or 9
    print("This will overwrite the selected file!",camx+ 20,camy+ 30, flash_color)
    print("Yes",camx+ 20,camy+ 60, yes_color)
    print("No",camx+ 60,camy+ 60, no_color)

end

function update_cart(toggle_left, toggle_right)
    if toggle_left and not cart then
        cart = true
        sfx(314, 7, 8) -- Play sound only when toggling to true
        appdata_path = "./" -- Update to cart path
        refresh_save_data()
        printh("Switched to Cartridge Save Path: " .. appdata_path)
    elseif toggle_right and cart then
        cart = false
        sfx(314, 7, 8) -- Play sound only when toggling to false
        appdata_path = "/appdata/picovania" -- Update to appdata path
        refresh_save_data()
        printh("Switched to AppData Save Path: " .. appdata_path)
    end
end

function refresh_save_data()
  
        mkdir(appdata_path)
       
   

   
        for i = 1, 3 do
            save_data[i] = fetch(appdata_path .. "/picovania_save" .. i .. ".pod") or { name = nil, level = 1, expert = false }
        end
     
end

function draw_save_location_feedback(base_x, base_y)
    -- Update bob_step each frame
    

    -- Determine offsets based on bob_step
    local x_offset = 0
    local y_offset = 0
    if (btnp(0) and cart==false) or (btnp(1) and cart==true) then
    bob_step=15
    end
if allow_bob then
    if bob_step < 10 then
        -- Step 1: Left
        x_offset = -1
        y_offset = 0
    elseif bob_step < 20 then
        -- Step 2: Up
        x_offset = 0
        y_offset = -1
    elseif bob_step < 30 then
        -- Step 3: Right
        x_offset = 1
        y_offset = 0
    else
        -- Step 4: Up
        x_offset = 0
        y_offset = -1
    end
end
    -- Draw "Save location" header
    rectfill(base_x-16,base_y+4,base_x+89,base_y+51,20)
    rectfill(base_x-15,base_y+5,base_x+88,base_y+50,0)
    print("Save location:", base_x, base_y+8, 7)

    -- Highlight the appropriate save location
    local cart_color = cart and 10 or 7 -- Yellow if cart is true
    local appdata_color = cart and 7 or 10 -- Yellow if cart is false

    -- Apply bobbing to the selected option
    
    local cart_x = base_x + (cart and x_offset or 0)
    local cart_y = base_y + 10 + (cart and y_offset or 0)
    local appdata_x = base_x + 40 + (not cart and x_offset or 0)
    local appdata_y = base_y + 10 + (not cart and y_offset or 0)
    local icony= cart and -1 or 0
    local minusicony= not cart and -1 or 0
 flash_color = flash_timer % 30 < 15 and 8 or 9
    -- Draw "Cart" and "Appdata" options
   
    pal(14,cart_color)
    pal(30,appdata_color)
     spr(260,camx+142,camy+100)
     spr(650,camx+178,camy+114+minusicony)
     spr(649,camx+115,camy+114+icony)
     
     pal()
     print("Cart", cart_x-7, cart_y+14, 1)   
     print("Cart", cart_x-7, cart_y+13, cart_color)
    print("Appdata",appdata_x+8,appdata_y+14, 1)
    print("Appdata", appdata_x+8, appdata_y+13, appdata_color)
    if cart then
    print("NON-BBS!",camx+136,camy+120,flash_color)
   end
   -- print(bob_step,0,0,7)
    
end

:: game.lua
--[[pod_format="raw",created="2024-08-22 14:12:48",modified="2025-06-26 05:11:25",revision=56220]]
--game
orb=false
shttm=0
shttm1=0
debug=false
wdamage=1
lifescore=0
scorecount=1
player=0
weathertmr=0
weather=false
sky=1
can_pause=true

local saved_row = 0
local saved_tick = 0
local current_music_pattern = -1


function update_game()

---[[
if ply.whp<=1 then
lth=1 
elseif ply.whp==2 then lth=1.5

end
 if ply.fll==true
 then ply.tm1=0
     ply.tm0+=.1
     ply.lnd=false
     
 end

--]]
if btnp(6) and can_pause then
 
if not is_paused then
pause_music()
sfx(-2)
music(-1)
sfx(299)
elseif is_paused then
sfx(-2)

resume_music() 
end

is_paused=not is_paused

end

if is_paused and btnp(5) then
swapoff=-2 
 sfx(314,7,0,8)

swap= not swap
else swapoff=0
end
if swap then swapsp=514 btn1=5 btn2=4
else swapsp=515 btn1=4 btn2=5

end
if not is_paused then
if keyp("r") then  start_recording() end
if keyp("s") then stop_recording() end
--if keyp("h") then secret = true end
--if keyp("j") then expert= not expert end
--if keyp("k") then add_save_icon() end

if weather and weathertmr<1 then 
add_weather()
add_weather()
add_weather()
add_weather()
add_weather()
weathertmr+=1
end
poke(0x005581,255)
    if isdemo then
    if demoendtmr>0 then
      sfx(-2)
      end
        update_demo()  -- Simulate Player inputs
    if demoendtmr==0 and btnp()>0 and not recording then
    
    
      demoend=not demoend
      
      
    end
   
    end
   

 if (demoend or demo>1500) then 
-- sfx(-2)
 demoendtmr+=1
 
 end
  
  if buffet  then
  if boss then
   add_wind(ply.x,ply.y-20)
   end
   if not (ply.ded or pup or clock or ply.onstr  or collide_map(ply,"left",0)) then
  if not ply.lnd then ply.x-=2
  elseif ply.dck then ply.x-=.15
  else ply.x-=.50
  end
  end 
end
if enmy==0 and (cur_stge==9 and expert) then buffet=false end
--[[
if btnp(12) then 
--pup=true
debug=not debug
end

if debug then
if btnp(13) then
add_boss_curse_of_man_legs(ply.x+20,ply.y)
end
--ply.blk=true
grav=0
clck=300
if btn(0) then
ply.x-=2
elseif btn(1) then
ply.x+=2
end
if btn(2) then
ply.y-=2
elseif btn(3) then
ply.y+=2
end


else grav=.1
end
--]]

--if btnp(13) then
  
--fetch("sfx/1.sfx"):poke(0x80000)
--music(6,0,15,0x80000)
--ply.blk=true
--add_enmy("red skeleton",10,13,nil,false)
--spawn_arena_nodes()
--add_boss_clone(25,11,true)
--expert=not expert
--if not ply.petrified then
--sfx(319, 4, 3)
--petrify_player()
--end
--end
--]]
 
 
if flash_timer>=300 then flash_timer=0
end

--lives bonus for score. first 30000 points, then every 50000 after
if scorecount==1 then
if lifescore>=30000 then
lvs+=1
sfx(300,-1)
scorecount+=1
lifescore=0
end
end

if scorecount>1 then
if lifescore>=50000 then
lvs+=1
sfx(300,-1)

lifescore=0
end
end

if ply.petrified then
update_petrification()
end

if scythe>3 then scythe=3
end

if scythe<0 then scythe=0
end

if tran then scythe=0
end
if whip_upgrade>0 then 
whip_upgrade-=whip_upgrade_multi

end
if whip_upgrade<=0 then 
whip_upgrade=0
whip_upgrade_multi=1
end
if whip_upgrade_multi>=6 then
whip_upgrade_multi=6
end
if ply.whp==0 then
wdamage=1
else wdamage=1.5
end
if cur_stge==18 then victorysong=69
else victorysong=3
end
if cutscene and ply.y<=89 then 
 for t in all(eft)do
 if t.hit then del(eft,t)
 end
 end
 ply.str_t=0
 ply.strd_t=0
 ply.clbur=false
 ply.clbing=false
 stx=ply.x
sty=ply.y
cutscene =false

end
for w in all(wpn) do
w.weapon=true
end

if shticn==56 or shticn==57 then
shttm+=.15
shttm1+=1
if shttm>1 then shttm=0
end
if shttm<=.5 then shticn=56 hudpal=8
elseif shttm>=.5 then shticn=57 hudpal=7

if shttm1>=800 and shtblk==false then shtblk=true shtblktm2=0

end

end
if shttm1==600 then sfx(261,4) 
end
if shttm1>=950 then
sfx(317,4)
shticn=nil
shttm1=0
hudpal=8
ply.wpn=0
wpn={}  
add_break( camx + 203, camy + 11,"hud")
add_break( camx + 203, camy + 11,"hud")
add_break( camx + 203, camy + 11,"hud")
add_break( camx + 203, camy + 11,"hud")
add_break(camx + screen / 2 -2, camy + 10,"hud")
add_break(camx + screen / 2 -2, camy + 10,"hud")
add_break(camx + screen / 2 -2, camy + 10,"hud")
add_break(camx + screen / 2 -2, camy + 10,"hud")

end
end

 --temporary end-cap
 if cur_stge==18 and cur_flr==2 and ply.x<=113 then
 if camxmax~=0 then
-- mset(29,10,170)
 mset(30,11,170)
 mset(30,12,170)
 mset(30,13,170)
 add_boss_dracula(camx+210,camy+127)
add_boss_dracula_head(camx+210,camy+125)

 camxmax=0
 end
end


--]]
if destroyed > 60 then
destroyed=0

end
if ply.ammo>=99 then ply.ammo=99

end

    -- candle spawning logic
   
    function spawn_candle_from_map_row(map_x, map_y, offset)
    local sprite_id = mget(map_x, map_y)
    if sprite_id != 0 then
        local scan_direction = (map_y % 2 == 0) and 1 or -1
        local start_y = (scan_direction == 1) and 0 or 127

        for y = start_y, 127 * scan_direction, scan_direction do
            local tile_id = mget(map_x, y / 8)
            if fget(tile_id, 0) or fget(tile_id, 4) then
                -- Check if destroyed count is 50 to use spawn_item() logic
                local item_to_spawn =
                
                  sprite_id
                add_cdl(map_x * 8, y - offset, item_to_spawn)
                break
            end
        end
    end
end

    function spawn_candles_from_map()
        for map_x = 0, 200 do
            -- check row 18 for top-down positioning (high candles)
            spawn_candle_from_map_row(map_x, 18, 29)
           
            -- check row 20 for top-down positioning (standard height)
            spawn_candle_from_map_row(map_x, 20, 20)
      
            -- check row 19 for bottom-up positioning (standard height)
            spawn_candle_from_map_row(map_x, 19, 24)
       
            -- check row 21 for bottom-up positioning (high candles)
            spawn_candle_from_map_row(map_x, 21, 33)
        end
    end

    if not clock then
        song1 = stat(400, 9)
        song2 = stat(466)
    end

    if not pup then
        if shtblk then 
            shtblktm1 += .15
        end
    end

    if shtblktm1 >= 1 then
        shtblktm1 = 0
        shtblktm2 += 1
    end

    -- enemy spawn governor
    if token <= 0 then
        tkntm += .01
    else
        tkntm = 0
    end

    if token >= 2 then
        token = 2
    end

    if tkntm >= 1 then
        token += 1
        tkntm = 0
    end

    if shtblktm2 >= 10 then
        shtblk = false
    end

    
    if shticn == 74 then
        ply.sht = 2
    elseif shticn == 79 then
        ply.sht = 3
    elseif shticn == nil then
        ply.sht = 1
    end

    if score1 > 9999 then
        score1 -= 9999
        score2 += 1
    end

    if not (pup or (stat(466) == -1 and victory)) then
        ply_actor()
    end

    -- This allows to whip and jump repeatedly after collecting an orb
    if not victory then
        poke(0x5f5c, 255)
    else
        poke(0x5f5c, 0)
    end

    -- game clock
    if clck > 0 and not ply.ded and not (clock or victory or door) then
        clckt += .015
        if clckt > 1 then
            clckt = 0
            clck -= 1
            if (clck <= 30 and clck > 0) then 
                sfx(316, 6)
            end
        end
    end

    if not pup then
   if wpncnt~= ply.sht then
        wpnout += .1
        else wpnout+=0
        end
       
        hndout += .1
        det0.x = ply.x -3
        det0.y = ply.y -11
        det1.x = ply.x+1
        det1.y = ply.y -11
      
        wpnicn = 102 + ply.wpn -- The row of weapons begins with a blank tile, and ply.wpn, moves the counter to the 
        --right to display the correct weapon icon
        spwntmr += .1

        if clck <= 0 and not victory then
            clck = 0
            ply.hth = 0
            ply.vishth = 0
        end

        -- spawners
        if spwntmr > 1 then
            spwntmr = 1
        end

        if spwntmr <= .1 then
            camxmin = 0
            camxmax = 0
            flr_tran()
            stage()
        end
        
        if wpnout > 1  then
        if wpncnt==ply.sht then wpnout=.5
        else    wpnout = 1
        end
        end

        if hndout > 1 then
            hndout = 1
        end

        if wpncnt <= 0 then
            wpncnt = 0
        end

        if enemies <= 0 then
            enemies = 0
        end

        if ply.dck then
            iyo = 8
        else
            iyo = 0
        end

        -- Orb is collected
        if victory then
        
            boss = false
            bossmus = false
            ply.dck = false
            ply.wlk = false
            ply.dx = 0

            -- begin score tally
            if stat(466) == -1 and clck ~= 0 then
                clck -= 1
                pts1 += .2
                score += 25
                lifescore += 25

                if pts1 >= 2 and clck > 15 then
                
                        sfx(257)
                  
                    pts1 = 0
                end
            end
        end

        if victory and clck == 0 then
            pts2 += .2
            if pts2 >= 8 and ply.ammo >= 1 then 
                pts2 = 6.5
                ply.ammo -= 1
                score += 250
                lifescore += 250
                if ply.ammo >= 1 then
               
                    sfx(258, 0, 0, 8)
                    sfx(258, 1, 8, 8)
                   
                end
            end
        end
    end

    if not enter then
        camx = flr(ply.x - screen / 2 + 8)
        if camx <= camxmin then
            camx = camxmin
        end
    end

    if victory and (ply.ammo == 0 and clck==0 and stat(466) == -1) then
        endtm += 1
    end
    
   if endtm==35 and cur_stge~=18 then
   add_save_icon()
   end

    if endtm >= 150 then

        tran = true
        if endtm >= 210 and tran then
            ply_rst()
            wpn={}
            wpncnt=0 
            orb = false
            endtm = 0
            victory = false
            increment_level()
            if cur_stge==18 then
            scene="end"
            else scene = "map"
            end
            pts1 = 0
            pts2 = 0
            tm0 = 0
            ply.dy = 0
            camx = 0
            camy = 0
            ply.atk = false
            music(-1)
            ply.x=0
            ply.y=0
            moai_get=false
            simonx = 0
            brkn_walls = {}
            spwntmr = 0
            can_pause=true
        end
    end
---[[
    if tran or door then
    
    secret = false  
    end
--]]
    if door then
      
        broken = false
    end
    
   if (tran or door) or victory then
   can_pause=false
   else can_pause=true
   end

    if camx >= camxmax then
        camx = camxmax
       
    end
    ---[[
    if (cur_stge==15 and cur_flr==2) then
       
        if camx==1 
        then camxmax=0
        boss=true
        bossmus=true
        add_boss_death(camx+26*8,-128)
       
       end
         if ply.x+8>=240 and boss then ply.dx=-.08
        
        end
       end
--]]
    camera(camx, camy)

    -- enemy actor update loops
    for a in all(act) do
  
       if flash and a.harm then
        destroyed+=1
        end
         if tran or door then 
            enemies -= 1
            del(act, a)
        end

        if a.tall then
            a.offset = 2
        elseif a.short then
            a.offset = 8
        else
            a.offset = 0
        end

        if (a.x >= ply.x - screen and a.x <= ply.x + screen + 4) and not (stat(466) == -1 and victory) and not pup and spwntmr>.1  then
            a:update()
            if a.bosslife then
            if a.life<a.mylife then a.life=a.mylife
            end
            
           end
              if expert and not (a.homing or a.fireball) then 
               if a.dx~=nil and a.dx~=0 then
               a.dx*=1.3
               end
              end
             
        end

        for a in all(act) do
            if hit_weapon(ply.x+2,ply.y+2,ply.w-2,ply.h-2,a.x+(a.w/4),a.y+(a.h/4), a.w-(a.w/4), a.h-(a.h/4)) and a.harm and not ply.hrt and not ply.blk and not ply.ded then
                ply.stn=false
                sfx(304, 7, 0, 4)
                
                ply.hth -= damage
                if whip_upgrade>=75 then
                whip_upgrade_multi+=1
                end
                ply.anmoff = 0
                ply.tm3 = 0
                ply.tm4 = 0
                hrttmr = 0
                ply.lnd = false
                ply.hrt = true
                ply.tm3 = 0
                ply.tm4 = 0
                ply.lnd=false
                ply.onlift=false
                if ply.thw and ply.wpn~=5 then
               -- ply.ammo+=1
                wpncnt -= 1
                
               end
                if not ply.onstr then
                    ply.y -= .5
                    ply.dy = -.9
                end

                if a.weak then
                    a.life -= 2
                end

                if a.x <= ply.x then
                    ply.flp = true
                elseif a.x >= ply.x then
                    ply.flp = false
                end
            end
        end
    end

    for e in all(env) do
    if not pup then
        e:update()
        end
    end

    for en in all(ent) do
        en:update()
    end

    for whp in all(whp) do
        if not (stat(466) == -1 and victory) then
            whp:update()
            for c in all(act)do
            
          if c.candle and c.itm==74 then
          c.store=c.itm
          c.itm=rnd(1)<.5 and 77 or 78
          
        
          end
         end
        end
    end

    for a in all(act) do
        if whpout == 1 then
            if hit_weapon(a.x + (a.w / 4),                        -- Weapon's starting X
    a.y + a.offset + (a.h / 4),             -- Weapon's starting Y
    a.w - (a.w / 2),                        -- Weapon's width
    a.h - (a.h / 2),   hitx+hitox, hity+hitoy, hitw * lth, hith + hitoy) and not victory and a.tm2 >.8 then
                a.tm2 = 0 
                if whip_upgrade~=0 then
                whip_upgrade_multi*=3
                end
                add_spk(hitw + a.x - 25, hity + hitoy)
                    
                    a.life -= wdamage
                    if a.bosslife then
                    a.mylife-=wdamage
                    end
              
                if a.life >= 1 and a.armor or a.segment then
                    sfx(263, 6, 0, 7)
                    sfx(263, 7, 9, 7)
                   if not a.body then
                   
                    score += flr(a.pts*.064)
                    lifescore += flr(a.pts*.064)
                   end
                     if (a.knight or a.dragon) then
                    sfx(303, 5, 0, 5)
                    end
                    
                else
                    sfx(303, 7, 0, 5)
                    if a.life <= 1 and a.pts>26 and not a.body then
                       
                        score += a.pts
                        lifescore += a.pts
                        
                        destroyed+=1
                       
                        sfx(303, 7, 0, 5)
                    end
                end
            end
        end
    end

    for ef in all(eft) do
    if not pup then
        ef:update()
    end
    end

    for wpn in all(wpn) do
    local threshold=.7
    if destroyed>=10 then threshold=.95
    else threshold=.01 
    end
        if not (stat(466) == -1 and victory) and not (victory or pup) then
            wpn:update()
            
             for c in all(act)do
             if expert and c.candle and c.store==74 and shticn==79 then
             c.store=rnd(1)<.65 and 74  or 56
             if (shticn~=56 and shticn~=57) and rnd(1)<.4 then
             c.itm=c.store
             else c.itm=rnd(1)<.5 and 74 or 77
             end
             end
          if c.candle and c.store==74 then
          c.itm=rnd(1)<threshold and c.store or (rnd(1)<.5 and 78 or 77)
          
        
          end
         end
            
           if shttm1>=949 then
           add_break(wpn.x+4,wpn.y+4)
add_break(wpn.x+4,wpn.y)
add_break(wpn.x+4,wpn.y)
add_break(wpn.x+4,wpn.y)
          
          end
            if wpn.kill == 2 and not wpn.bnstgl then
                add_score(wpn.x - 8, wpn.y - 10, .2, 219)
                score += 100
                lifescore += 100
                wpn.bnstgl = not wpn.bnstgl
            elseif wpn.kill == 3 and not wpn.bnstgl then
                add_score(wpn.x - 8, wpn.y - 10, .6, 220)
                score += 2000
                lifescore += 2000
                wpn.bnstgl = not wpn.bnstgl
            elseif wpn.kill == 4 and not wpn.bnstgl then
                add_score(wpn.x - 8, wpn.y - 10, .9, 221)
                score += 4000
                lifescore += 4000
                wpn.bnstgl = not wpn.bnstgl
            end
        end

        for a in all(act) do
        
            if hit_weapon(
    a.x + (a.w / 4),                        -- Weapon's starting X
    a.y + a.offset + (a.h / 4),             -- Weapon's starting Y
    a.w - (a.w / 2),                        -- Weapon's width
    a.h - (a.h / 2),                        -- Weapon's height
    wpn.x + (wpn.w / 4),                    -- Target's starting X
    wpn.y + (wpn.h / 4),                    -- Target's starting Y
    wpn.w - (wpn.w / 2),                    -- Target's width
    wpn.h - (wpn.h / 2)                     -- Target's height
) and a.tm2 > .8 and wpn.dmg then
                
                a.tm2 = 0
                add_spk(wpn.x + 2, wpn.y)
                if (a.armor and a.knight) and wpn.type=="boomerang" then
                a.life-=wpn.hit/2
                elseif wpn.type=="burn" and a.knight then 
                a.life-=wpn.hit+1
                elseif wpn.type=="water" and a.knight then
                a.life-=0
                else
                a.life -= wpn.hit
                end
               
                if a.bosslife then
                a.mylife-=wpn.hit/2
                end
                if a.life >= 1 and a.armor or a.segment then
                if not a.bosslife then
                    score += flr(a.pts*.064)
                    lifescore += flr(a.pts*.064)
                    end
                    if wpn.type~="burn" then
                    sfx(263, 6, 0, 7)
                    sfx(263, 7, 9, 7)
                    
                    if (a.knight or a.dragon) then
                    sfx(303, 7, 0, 5)
                    end
                    if (a.armor and a.knight) and not a.bosslife then
                    if (wpn.type=="boomerang" and not wpn.rtn) then wpn.rtn=true wpn.dx=-wpn.dx
                    elseif wpn.type=="axe" then wpn.dx=0 
                    elseif wpn.type=="water" then a.tm2=.8
                    
                    
                    end
                    end
                    end
                else
                 if wpn.type~="burn"then
                    sfx(303, 7, 0, 5)
                    end
                    if a.life <= 1 and a.harm then
                     if wpn.type=="burn" and a.knight then a.itm=77
                     end  
                        if a.pts>25 and not a.body then
                        wpn.kill += 1
                        wpn.bnstgl = not wpn.bnstgl
                        score += a.pts
                        lifescore += a.pts
                        if a.candle then
                        destroyed+=1
                        end
                        end
                        sfx(303, 7, 0, 5)
                    elseif a.life <= 1 and not a.harm then
                        sfx(303, 7, 0, 5)
                     
                        if flash == true then
                            a.life -= 100
                            
                        end
                    end
                end
                if wpn.sp == 103 then
                    wpn.life -= 10
                end
            end  
        end
    end
    
   for s in all(scn) do
   s:update()
   end

    for i in all(itm) do
        if not pup then
            i:update()
        end
    end

    if pup then
        puptmr0 += .1
        paltmr += 1
        if paltmr >= 3 then
            paltmr = 0
            psel += 1
        end
        if psel > 3 then
            psel = 0
        end
        if puptmr0 >= 5 then
            paltmr = 0
            puptmr0 = 0
            pup = false
            psel = 0
        end
    end
     if bossmus then
     if btmr==0 then
music(-1,3000)
end
        btmr += .2
    else
        btmr = 0
    end

    if cur_stge == 3 and cur_flr == 1 then
        camxmax = 308
        if tran then
            camxmin = 0
        end
        if camx >= camxmax and not ply.ded then
            camxmin = camxmax
            if not boss then
               -- music(-1,5000)
                boss = true
                bossmus = true
            end
        end
    end

    if btmr >= 30 and not clock then
        song2 = 1
        music(song2, 0, 15)
        bossmus = false
    end

    if boss and enmy <= .7 then
        enmy = 0
        win += .1
        if win >= 10 and boss and not orb then
        if cur_stge==6 then
        add_pup(camx+107,camy+50,112)
        else
            add_pup(camx + 120, camy + 50, 112)
            end
            win = 0
            orb = true
            weather=false
            btmr = 0
            bossmus = false
        end
    end
    if expert then damage=4
    end
function petrify_player()
    ply.petrified = true
    ply.petrification_meter = 100 -- Full petrification meter
end

 if demoendtmr~=0 and isdemo then
 act={}
 env={}
  end
 if demoendtmr>10 then
 demoset+=1
            full_reset()
           
 end
 
if victory then bossmus=false
end

if isdemo then can_pause = false end

if deaths==nil then deaths=0 end



function update_petrification()
   

        -- Reduce petrification meter when mashing buttons
        if btnp(0,player) or btnp(1,player) or btnp(2,player) or btnp(3,player) or btnp(4,player) or btnp(5,player) then
            if rnd(1)<.5 then
            add_break(ply.x+rnd(8),ply.y+rnd(4))
            end
            ply.petrification_meter -= 5
        end

        -- End petrification when meter reaches 0
        if ply.petrification_meter <= 0 or ply.hrt or ply.ded then
            ply.petrification_meter=0
            sfx(317,-1)
            add_break(ply.x+rnd(8),ply.y+rnd(4))
            add_break(ply.x+rnd(8),ply.y+rnd(4))
            add_break(ply.x+rnd(8),ply.y+rnd(4))
            add_break(ply.x+rnd(8),ply.y+rnd(4))
            add_break(ply.x+rnd(8),ply.y+rnd(4))
            add_break(ply.x+rnd(8),ply.y+rnd(4))
            add_break(ply.x+rnd(8),ply.y+rnd(4))
            add_break(ply.x+rnd(8),ply.y+rnd(4))
            ply.petrified = false
       
    end
end
end

function pause_music()
    current_music_pattern = stat(466)
    saved_row = stat(400, 9)  -- Save the current row
    --saved_tick = stat(400, 10) -- Save the current tick
    music(-1) -- Stop music
end

function resume_music()
if expert then
if progress==3 then
fetch("sfx/1.sfx"):poke(0x80000)
music(current_music_pattern,0,15,0x80000)
else
music(current_music_pattern,0,15)
end
elseif not expert then
    music(current_music_pattern,0,15) -- Resume music pattern
    end
    -- Restore precise position (if supported by your implementation)
    -- Not all engines allow direct row/tick jump, so test carefully!
end

end

function draw_game()

 -- rect(pixel_x, pixel_y, pixel_x + width_pixels, pixel_y + height_pixels, 7)


     
    
     flash_color = flash_timer % 30 < 15 and 8 or 9
   
     if spwntmr>.1 then
     cls()
    
      if flasht0 >= .5 then
        rectfill(camx, camy, camx + screen, camy + screen, 7)
    end
    ---[[
    if weather then
    pal(1,sky)
   end
    if bkgswap then
    if flash_timer%30<15 then
    pal(22,0)
    pal(23,6) 
    else
    pal(22,6)
    pal(23,0)
    end
    end
    pal(30,backpal)
    --]]
    
    map(0, 0, 0, 0, 200, 22)
  
    pal()
   
    spr(95, camx + 10, camy + 11)
    spr(77, camx + 146, camy + 4)
    if shtblktm1 <= .5 then
        spr(shticn, camx + 203, camy + 11)
    end
   
    -- status bar (temporary?)
      if expert then
    spr(226,camx+232,camy+1)
    end
    for b = 1, bar do
        spr(110, camx + 24 + b * 4, camy + 9)
    end

    for h = 1, math.min(ply.vishth, 16) do
        spr(111, camx + 25 + h * 4, camy + 9)
    end

    for h = 1, math.ceil((visenmy), 16) do
        spr(127, camx + 25 + h * 4, camy + 12)
    end

    if ply.vishth ~= ply.hth then
        ply.vistmr += .15
        if ply.vistmr >= 1 then
            ply.vistmr = 0
            if ply.vishth > ply.hth then
                ply.vishth -= 1
            elseif ply.vishth < ply.hth then
                ply.vishth += 1
            end
        end
    end

    if visenmy ~= enmy then
        vistmr += .15
        if vistmr >= 1 then
            vistmr = 0
            if visenmy > enmy then
                visenmy -= 1
                 elseif visenmy < enmy then
                visenmy += 1
            end
        end
    end

    spr(wpnicn, camx + screen / 2 -2, camy + 10)
    rect(camx + 112, camy + 8, camx + 132, camy + 19, hudpal)
 
if debug then
print("Debug Mode",camx+16,camy+32,flash_color)
end
    
-- debug prints
if isdemo then 
print("DEMO",camx+110,camy+24,flash_color)
--print(demo)
end
--rect(det1.x+4,det1.y+13,det1.x+5,det1.y+det1.h,7)
--rect(det0.x+4,det0.y+13,det0.x+5,det0.y+det0.h,7)
--     print (flr((ply.x+4)/8),ply.x,ply.y-16 ,7)
--   print (flr((ply.y+15)/8),ply.x,ply.y-8 ,7)
--      print(wpnout,ply.x,ply.y-8,7)
--        print(shttm1,ply.x,ply.y-16,7)
--      print (flr((ply.y+16)/8),ply.x,ply.y-8 ,7)
--print(stat(400 + 0, 9),camx,camy+10,7)
--print(saved_row,camx,camy+20,7)
--print(tostring(ply.blk),camx,camy+8,7)
--rect(hitx+hitox,hity+hitoy,hitx+hitw*lth+hitox,hity+hith+hitoy,7)
    -- non player draw loops
    for s in all(scn) do
        s:draw()
    end
    
    for e in all(env) do
        e:draw()
    end

    for a in all(act) do
        if a.x >= camx-30 and a.x <= camx + screen + 30 then
            a:draw()
           
        end
    end

    for ef in all(eft) do
        ef:draw()
    end

    for whp in all(whp) do
        whp:draw()
    end

    for wpn in all(wpn) do
        wpn:draw()
    
    end

    for i in all(itm) do
        i:draw()
    end

    if ply.pot then
        pal(14, 7)
    end

    if ply.blktm0 < .5 or pup then
        if pup then
        
            pal(11, plt[psel])
            pal(2, plt[psel - 1])
            pal(3, plt[psel + 1])
            pal(14, plt[psel + 2])
        elseif ply.petrified then
            pal(11, 5)
            pal(2, 0)
            pal(14, 6)
            pal(3, 22)
          else  
            pal(11, 9)
            pal(2, 1)
            pal(14, 15)
            pal(3, 4)
        end

        if ply.pot and not ply.ded and not pup then
            ply.pottm0 += .17
            if ply.pottm0 >= 10 and ply.pottm0 <= 25 and not pup then
                pal(11, 7)
                pal(2, 7)
                pal(14, 12)
                pal(3, 6)
            end
        end

        if ply.pottm0 >= 25 then
            sfx(315, 5, 4, 4)
            ply.pottm0 = 0
            ply.pot = false
            ply.blk = true
        end

        -- these are player character sprites
        if spwntmr>.1 and cutscene then
        clip(ply.x-camx,88,ply.w,16)
        spr(ply.sp0, ply.x + ply.ox, ply.y + ply.oy, ply.flp)
        spr(ply.sp1, ply.x + ply.ox, ply.y + ply.oy + 8, ply.flp)
        clip()
        else
      
        spr(ply.sp0, ply.x + ply.ox, ply.y + ply.oy, ply.flp)
        spr(ply.sp1, ply.x + ply.ox, ply.y + ply.oy + 8, ply.flp)
       end
     
--rect(strbox_x,strbox_y,strbox_x2,strbox_y2,7)
    end

    pal()

   

    -- status bar
    print("  SC         ".." Time "..clck, camx , camy + 1, 7)
    print("Stage "..cur_stge, camx+190 , camy + 1, 7)
    print("            = "..ply.ammo, camx + 98, camy + 3, 7)
    print(pad("" .. score, 7), camx + 25, camy + 1)
    print("P = "..lvs, camx + 148, camy + 12, 7)


    for en in all(ent) do
        en:draw()
    end

    if tran or (spwntmr <= .1 and ply.ded) or demoend or demo>1495  then
        rectfill(camx, camy, camx + (screen * 10), camy + (screen * 30), 0)
    end

    if flash then
        flasht0 += .30
        flasht1 += .1
    end

    if flasht0 >= 1 then
        flasht0 = 0
    end

    if flasht1 >= 2.5 then
        flash = false
        flasht1 = 0
        flasht0 = 0
    end

    end
    if is_paused then
     rectfill(camx+86,camy+ 59, camx+146, camy+92, 20) -- Pause overlay
    rectfill(camx+87,camy+ 60, camx+145, camy+91, 0) -- Pause overlay
   flash_color=flash_timer%30<20 and 6 or 1
    print("Paused", camx+103,camy+ 66, 20)
    print("Paused", camx+103,camy+ 65, flash_color)
    spr(swapsp, camx+110,camy+75+swapoff)
    print("Attk.", camx+88,camy+ 78, 20)
    print("Attk.", camx+88,camy+ 77, 6)
    print("Jmp.", camx+127,camy+ 81, 20)
    print("Jmp.", camx+127,camy+ 80, 6)
end
end
falltmr=0
chasmy=0
function update_fall()
falltmr+=1
if simony==52 then 
chasmy-=4
else chasmy-=0
end

if falltmr<80 and simony<50 then 
simony+=3

else simony+=0

if chasmy<-62 then chasmy=0
end
if falltmr>=100 then simony+=4
end
end
if falltmr>=155 then
spwntmr=0
falltmr=0
chasmy=0
simonx=0
simony=107
music(song2,0,15)
scene="game"

end
end


function draw_fall()
cls()




spr(257,camx,chasmy)
if falltmr>=140 then
 rectfill(camx, camy, camx + screen, camy + screen, 0)
    
end

spr(298,simonx+camx,simony,true)

end

function ensure_appdata_directory()
    local appdata_path = "/ram/cart/"
    if not stat(appdata_path, "exists") then
        mkdir(appdata_path)
    end
    return appdata_path
end

function start_recording()
    recording = true
    recorded_actions = {} -- Reset recorded actions
    demo = 0 -- Start at frame 0
    ensure_appdata_directory() -- Ensure directory exists
    print("Recording started.")
end

function stop_recording()
    if recording then
        recording = false
        local appdata_path = ensure_appdata_directory()
        local pod_filename = appdata_path .. "demo"..(demoset)..".pod"

        -- Save the recorded actions
        store(pod_filename, recorded_actions)
        print("Recording stopped and saved to " .. pod_filename)
    else
        print("No recording in progress.")
    end
end
function update_demo()
    demo = demo + 1
    run_demo()

    -- Reset demo if it reaches the frame cap
    if demo > 1987 then
        demo = 0
    end
end


local demo_data = nil

function start_demo(filename)
    demo_data = load_demo(filename)
    if demo_data then
        demo = 0 -- Reset frame counter
        print("Demo playback started.")
    else
        print("Error: Could not start demo.")
    end
end

function run_demo()
    if demo_data and demo_data[demo] then
        local actions = demo_data[demo]
        for _, action_name in ipairs(actions) do
            if _G[action_name] then
                _G[action_name]() -- Execute the action
            else
                print("Warning: Unknown action '" .. action_name .. "' at frame " .. demo)
            end
        end
    end
end



function log_action(action_name)
    if recording then
        if not recorded_actions[demo] then
            recorded_actions[demo] = {} -- Initialize frame entry
        end
        
        table.insert(recorded_actions[demo], action_name)
        print("Logged action: " .. action_name .. " at frame " .. demo)
    end
end


function save_pod_file(filename, actions)
    local file = io.open(filename, "w")
    if not file then
        print("Error: Cannot open file for writing")
        return
    end

    for _, action in ipairs(actions) do
        file:write(action.frame .. " " .. action.action .. "\n")
    end

    file:close()
    print("Saved actions to " .. filename)
end

function load_demo(filename)
    local appdata_path = "./"
    local full_path = appdata_path .. filename

    -- Load the .pod file
    local demo_data = fetch(full_path)
    if demo_data then
        print("Loaded demo from " .. full_path)
        return demo_data
    else
        print("Error: Could not load demo from " .. full_path)
        return nil
    end
end

:: items.lua
--[[pod_format="raw",created="2024-08-22 14:17:29",modified="2025-04-22 17:32:54",revision=45214]]
--dynamic Item spawning based on enemies destroyed
whip_upgrade=0
whip_upgrade_multi=1
function spawn_item()
    local chance = rnd(1)
    if not isdemo then
        if destroyed == 10 then
            destroyed += 1  -- increment immediately to prevent duplicates
            if chance < .6 then
                return flr(rnd(5)) + 103 -- Random weapon
            end
            
        elseif destroyed == 30 then
            destroyed += 1 -- increment immediately
            if chance < 0.5 then
                return 109 -- Rosary
            else
                return 108 -- Invisibility Potion
            end
            
        elseif destroyed == 50 then
            destroyed += 1 -- increment immediately
            if chance < .85 then
                if chance < .01 then
                    return 64 -- 1-Up (Rare!)
                else
                    return 74 -- Double Shot
                end
            end
        end
        
        -- Fallback if none matched
        return player_helper()
    end
end



function player_helper()
local chance= rnd(1)
if not isdemo then
    -- Overarching 40% chance to spawn a helper item
--    if  whip_upgrade then
    if chance < 0.4 then
        -- Check if the player's whip is at maximum level
        if ply.whp == 2 or whip_upgrade~=0 then
            -- Player has max whip; randomly drop small or big heart
            if chance < 0.9 then
                return 76  -- Small heart
            else
                return 77  -- Big heart
            end
        else
            -- Player doesn't have max whip; 70% chance for a morning star
            if chance < 0.40 and whip_upgrade==0 then
                return 88  -- Morning star (whip upgrade)
            else
                -- Otherwise, drop small or big heart as normal
                if chance < 0.9 then
                    return 76  -- Small heart
                else
                    return 77  -- Big heart
                end
            end
        end
    end
--end
    -- Default to returning nothing if none of the conditions still dont match
    return nil
    end
end



function add_pup(_x,_y,_item)



add (itm,{
id="exempt",
x=_x,
y=_y,
w=8,
h=8,
dx=0,
dy=0,
sp=_item,
col=0,
whip=0,
collectable=true,
orbblnk=false,
orbtm=0,
angle=rnd(1) * 2,
tm0=0,
tm1=0,
tm2=0,
tm3=0,
chance=rnd(1),



update=function(self)


 self.x+=self.dx
 self.y+=self.dy

 self.tm3+=1
 if self.sp==112 then 
 self.orbblnk=true
 self.orbtm+=1
 self.orbblnk = flash_timer % 2 < 1 and true or false
 self.col = flash_timer % 2 < 1 and 0 or 1
 if self.orbtm<80 then 
 self.collectable=false
 self.dy-=.1
 else 
 self.collectable=true
 self.dy+=grav
 end
end
if not isdemo then
if self.sp==88 then self.whip+=rnd(1)
for i in all(itm) do
if self.sp==i.sp then
if i.whip>self.whip then
self.sp=76
end

end
end
end


if self.sp==76 and self.tm3<=2 then
 if ply.whp==0 and rnd(1)<.4 then
 self.sp=88
 elseif ply.whp==1 and rnd(1)<.15 then
 self.sp=88
  end
 end
end

 if self.sp==76 then 
 self.dy=.15
 self.tm0+=.023
 else self.dy+=grav

 end
 if self.tm0>=2 then 
 self.tm0=0
 
 
 end

 
  if collide_map(self,"down",0) 
then
self.dx=0
self.dy=0 

self.tm0=0
self.tm1+=.01

 end
 -- If the item is a whip upgrade and the player is at max then become a heart
 
 if self.sp==88 then
 if (ply.whp==2 or whip_upgrade~=0) then
 self.sp=76
 end
 end
 
 
 
 if self.sp==77 and ply.ammo>15 then
 if self.chance<.6 then
 self.sp=76 
end
end
 
 -- If the item is a double shot and the player already has a double shot, 
 -- then become a triple shot
 if self.sp==74 and ply.sht>=2  then
 self.sp=79
 end
 -- if the player already has triple shot, then become a money bag
 -- or potentially an infinite shot
 if (self.sp==79 or self.sp==74) and ply.sht>=3 then
 if self.chance<.80  then
 if expert then self.sp=56
 else
self.sp=78
end
else
self.sp=78
 end
end 


-- If the item is a subweapon the player already has, 
-- then become a money bag
 
if self.sp==wpnicn then
self.sp=78
end


if (self.sp==56 or self.sp==57) then
self.tm2+=.15
if self.tm2>1 then self.tm2=0
end
if self.tm2<=.5 then self.sp=56
elseif self.tm2>=.5 then self.sp=57

end
end

-- Flutter movement for small hearts using sine wave
if self.dy ~= 0 then
    if self.sp == 76 then
    
        -- Use a sine wave for dx
        self.dx = 0.35 * sin(self.angle)

        -- Increment the angle to create the fluttering motion
        self.angle += 0.01
        else self.dx=0
    end
end

 	if (self.sp==74 or self.sp==79) and (ply.wpn==5 or ply.wpn==0) then
 	self.sp=78
 end

 

if hit_weapon(self.x+1,self.y+6,self.w-1,self.h,ply.x,ply.y+4,ply.w-1,ply.h-4+iyo)
and not (ply.hth==0 or ply.ded) and self.collectable
then 



del(itm,self)
--  Item pickup sounds
	if self.sp==108 then sfx(315,-1,0,4)
	elseif self.sp==109 then sfx(318,-1,0,0)
	elseif self.sp==78 then sfx(311,-1,0,0)
	elseif self.sp==60 then sfx(311,-1,0,0)
	elseif self.sp==61 then sfx(311,-1,0,0)
	elseif self.sp==74 and ply.wpn==5 then sfx(311,5,0,0)
	elseif self.sp==79 and ply.wpn==5 then sfx(311,5,0,0)
	elseif self.sp==74 and ply.wpn==0 then sfx(311,5,0,0)
	elseif self.sp==79 and ply.wpn==0 then sfx(311,5,0,0)
	elseif self.sp==76 or self.sp==77 then  sfx(310,-1,0,0)
	elseif self.sp==64 then  sfx(300,-1,0,0)
	elseif self.sp==56 or self.sp==57 then  sfx(259,4,0,0)
-- If item is none of the above, play powerup sound by default	
	elseif self.sp~=97 and self.sp~=112 then sfx(313,4,0,0)
	end

--  items grant these effects

	if (self.sp==64) lvs+=1 -- 1up
	if (self.sp==76) ply.ammo+=1 -- Small heart
	if (self.sp==73) ply.hth+=6  -- Porkchop
	if (self.sp==77) ply.ammo+=5 -- Big heart
	if (self.sp==103) ply.wpn=1 shticn=nil shttm1=0 -- Knife
	if (self.sp==104) ply.wpn=2 shticn=nil shttm1=0 -- Holy water
	if (self.sp==105) ply.wpn=3 shticn=nil shttm1=0 -- Boomerang
	if (self.sp==106) ply.wpn=4 shticn=nil shttm1=0 -- Axe
	if (self.sp==107) ply.wpn=5 shticn=nil shttm1=0 -- Stopwatch
	
 -- If the item is a double or triple shot and the player doesnt need it
 -- (AKA they already have triple shot, or they dont have a weapon,
 -- or they have a stopwatch, which doesn't use multishot,
 -- then become a money bag
--	if ((self.sp==74 or self.sp==79) and (ply.wpn==5 or ply.wpn==0)) score+=500 add_score(ply.x,ply.y,.2,217) -- 

	if (self.sp==78) score+=100 lifescore+=100 add_score(ply.x,ply.y,.2,216) --  Red money bag
	if (self.sp==60) score+=500 lifescore+=500 add_score(ply.x,ply.y,.2,217) --
	if (self.sp==61) score+=700 lifescore+=700 add_score(ply.x,ply.y,.2,218) --
	if (self.sp==74 and ply.wpn~=5 and ply.wpn~=0) shticn=74 shtblk=true shtblktm2=0 destroyed+=25  --
	if (self.sp==79 and ply.wpn~=5 and ply.wpn~=0) shticn=79 shtblk=true shtblktm2=0 destroyed=-20 --
	if ((self.sp==56 or self.sp==57) and ply.wpn~=5 and ply.wpn~=0) ply.sht=20 shticn=57 shtblk=true shtblktm2=0 destroyed=0 --
	if (self.sp==88) ply.whp+=1 pup=true whip_upgrade+=600 whip_upgrade_multi=1 --
	if (self.sp==108) ply.pot=true  ply.blk=true --
	if (self.sp==109) flash=true --
	if (self.sp==112) music(victorysong) victory=true ply.hth+=16 boss=false --
	end

if tran or door or self.tm1>2.2 and self.sp~=109 and self.sp~=112 and self.sp~=56 and self.sp~=57  then
del(itm,self)



end



end,
draw=function(self)

if (self.sp==112 and self.col==1) then
pal(21,8)
pal(6,21)
pal(30,14)

end

if self.sp==112 and self.orbtm<=80  then
if not self.orbblnk then

 spr(self.sp,self.x,self.y+5)
 end
 else
 
--  print(self.whip,self.x,self.y,7)
--print(tostring(self.id,self.x,self.y-8,7))
 spr(self.sp,self.x,self.y+5)
end
pal()
 end
 
 })

end

function add_secret(_x,_y,_item)
add (itm,{
id=nil,
x=_x*8,
secret=true,
y=_y*8,
w=8,
h=12,
dx=0,
dy=0,
sp=_item,
flp=false,
sp1=_sp,
tm0=0,
tm1=0,
moai=_item==140 and true or false,
tm2=0,
reveal=0,
value=1000,
anm=1,
col=1,
update=function(self)

for s in all(itm)do
if s.id~="exempt" and s.id~=self.id then
del(itm,s)
end
end
if self.secret then
    if self.moai then
        self.value = 4000 -- Explicitly set for the Moai statue
    elseif self.sp == 62 then
        self.value = 1000
    else
        self.value = 2000
    end
end
if self.moai then
self.tm2+=.15

if self.anm==1 then self.sp=140 self.flp=false
elseif self.anm==2 then self.sp=141
elseif self.anm==3 then self.sp=142
elseif self.anm==4 then self.sp=141 self.flp=true
end
if self.anm>4 then self.anm=1
end
end
self.col = flash_timer % 30 < 15 and 1 or 2
if secret then
self.reveal+=.10
self.tm1+=.01
end
if self.reveal>=8 then
self.reveal=8
end
 if self.tm2>=1 then
 self.anm+=1
 self.tm2=0
end

if hit(self.x+4,self.y+2,ply.x-2,ply.y-1,ply.w+2,ply.h+iyo) and secret and self.reveal>=4 
and not (ply.hth==0 or ply.ded) 
then

if self.sp~=64 then
bigmoney(self.value)
sfx(311,-1,0,0)
else
life_treasure()
end
del(itm,self)

end
if tran or door or self.tm1>3  then
del(itm,self)

end
end,
draw=function(self)
--spr(40,self.x,self.y)
--print(self.anm,self.x,self.y-16,7)
if secret then
if self.col==1 then
pal(23,8)
pal(14,24)
pal(30,10)
elseif self.col==2 then
pal(23,11)
pal(14,28)
pal(30,7)
end
clip(self.x-camx,self.y-8,12,16,0)
spr(self.sp,self.x,self.y+8-self.reveal,self.flp)

clip()
pal()
end
  end
 
 })
 end
 -- change this to correspond to the treasure collected, crown and chest=2000
 function bigmoney(value)
add_bigscore(ply.x,ply.y,value)
score+=value
lifescore+=value
end 
--add 1000 or 2000
 function life_treasure()
sfx(300,-1)
lvs+=1
end 
:: label.qoi
b64$cW9pZgAAAeAAAAEOBAH-wMDA-P39-f39-f39-f39-f39-f39-c7_oIh4whT9-f39-f396CTC
FP39-f399P4YKFDG-sDAwP3oJMIU-f39-f30-hgoUMb_wMDA-egkwhT9-f39-fL_GChQzv7AwMD9
4CTA-gDgMMIkwBTY-gAAAMz_wMDAxP4AAADE-lhQSMD_wMDAwv4AAADC-sDAwML_AAAAxP7AwMDE
JMD_AAAAwiTA-sDAwMAkwP4AAADI-sDAwMD_AAAAxCTA-sDAwMQkwP4AAADCJMD_wMDAwv4AAADC
-sDAwML_AAAAwv7AwMD9-f3g-hgoUM7_wMDA-eD_oIh4wATCJMAU2P4AAADM-sDAwMT_AAAAxP5Y
UEjA-sDAwML_AAAAwv7AwMDC-gAAAMT_wMDAxCTA-gAAAMIkwP7AwMDAJMD_AAAAyP7AwMDA-gAA
AMQkwP7AwMDEJMD_AAAAwiTA-sDAwML_AAAAwv7AwMDC-gAAAML_wMDA-f393v4YKFDI-iBgsMAU
xP7AwMD93v6giHjAFMAExCTAFNb_AAAAyP7AwMDA-gAAAMD_wMDAxP4AAADA-lhQSMAUwv7AwMDA
JMD_AAAAwv7AwMDA-gAAAMj_wMDAwP4AAADI-sDAwMD_AAAAyCTA-sDAwMD_AAAAwCTAFML_wMDA
wv4AAADI-sDAwML_AAAAwiTA-sDAwMD_AAAAwv7AwMD9-f3e-hgoUMj_IGCwwBTE-sDAwP3e-qCI
eMAUwATEJMAU1v4AAADI-sDAwMD_AAAAwP7AwMDE-gAAAMD_WFBIwBTC-sDAwMAkwP4AAADC-sDA
wMD_AAAAyP7AwMDA-gAAAMj_wMDAwP4AAADIJMD_wMDAwP4AAADAJMAUwv7AwMDC-gAAAMj_wMDA
wv4AAADCJMD_wMDAwP4AAADC-sDAwP39-dz_GChQ1P7AwMD93P6giHjAFMAExCTAFN7_AAAAxP7A
wMDC-gAAAML_wMDAwP4AAADC-sDAwMD_AAAAwv7AwMDA-gAAAML_WFBIwP7AwMDEJMD_AAAAwCTA
-sDAwMD_AAAAwv7AwMDE-gAAAML_wMDAwv4AAADC-sDAwMD_AAAAwv7AwMDAJMD_AAAAwCTA-sDA
wMD_AAAAwv7AwMDA-gAAAMIkwhTC-sDAwP39-d7_GChQ1P7AwMD93P6giHjAFMAExCTAFN7_AAAA
xP7AwMDC-gAAAML_wMDAwP4AAADC-sDAwMD_AAAAwv7AwMDA-gAAAML_WFBIwP7AwMDEJMD_AAAA
wCTA-sDAwMD_AAAAwv7AwMDE-gAAAML_wMDAwv4AAADC-sDAwMD_AAAAwv7AwMDAJMD_AAAAwCTA
-sDAwMD_AAAAwv7AwMDA-gAAAMIkwhTC-sDAwP39-dT_GChQwP7AwMDC-hgoUNr_wMDA6P4YKFDC
-sDAwOj_oIh4wBTAJMAEwiTAFMAkwBTU-gAAAMT_wMDAyv4AAADG-sDAwMD_WFBIwP4AAADC-sDA
wMD_AAAAwv7AwMDG-gAAAML_wMDAwv4AAADAJMD_wMDAwv4AAADCJMD_wMDAwv4AAADG-sDAwML_
AAAAwv7AwMDC-gAAAMAkwP7AwMDA-gAAAML_wMDAwCTA-gAAAML_wMDA-f391P4YKFDA-sDAwML_
GChQ2v7AwMDo-hgoUML_wMDA6P6giHjAFMAkwATCJMAUwCTAFNT_AAAAxP7AwMDK-gAAAMb_wMDA
wP5YUEjA-gAAAML_wMDAwP4AAADC-sDAwMb_AAAAwv7AwMDC-gAAAMAkwP7AwMDC-gAAAMIkwP7A
wMDC-gAAAMb_wMDAwv4AAADC-sDAwML_AAAAwCTA-sDAwMD_AAAAwv7AwMDAJMD_AAAAwv7AwMD9
-f3S-hgoUML_wMDAwv4YKFDO-gCgoMT_GChQxP7AwMDk-hgoUMT_wMDA6P6giHjAFMAEzCTAFNL_
AAAAwP7AwMDA-gAAAMj_wMDAwP4AAADC-sDAwMb_AAAAwv7AwMDC-gAAAMj_wMDAwP4AAADI-sDA
wMT_AAAAwv7AwMDC-gAAAML_wMDAwP4AAADC-lhQSMD_wMDAwP4AAADI-sDAwMD_AAAAwv7AwMDC
-gAAAML_wMDA-f391P4YKFDC-sDAwML_GChQzv4AoKDE-hgoUMT_wMDA5P4YKFDE-sDAwOj_oIh4
wBTABMwkwBTS-gAAAMD_wMDAwP4AAADI-sDAwMD_AAAAwv7AwMDG-gAAAML_wMDAwv4AAADI-sDA
wMD_AAAAyP7AwMDE-gAAAML_wMDAwv4AAADC-sDAwMD_AAAAwv5YUEjA-sDAwMD_AAAAyP7AwMDA
-gAAAML_wMDAwv4AAADC-sDAwP39-dT_GChQwv7AwMDC-hgoUM7_AKCgxP4gYLDA-hgoUML_wMDA
4P4YKFDE-sDAwOr_oIh4wBTABNAkwBTQ-gAAAMz_wMDAwP4AAADC-sDAwMb_AAAAwv7AwMDC-gAA
AMb_wMDAwv5YUEjA-gAAAMIkwP7AwMDE-gAAAMIkwP7AwMDC-gAAAML_wMDAwv4AAADC-sDAwMAk
wP4AAADCJMD_wMDAwv4AAADC-sDAwML_AAAAwv7AwMD9-f3U-hgoUML_wMDAwv4YKFDO-gCgoMT_
IGCwwP4YKFDC-sDAwOD_GChQxP7AwMDq-qCIeMAUwATQJMAU0P4AAADM-sDAwMD_AAAAwv7AwMDG
-gAAAML_wMDAwv4AAADG-sDAwML_WFBIwP4AAADCJMD_wMDAxP4AAADCJMD_wMDAwv4AAADC-sDA
wML_AAAAwv7AwMDAJMD_AAAAwiTA-sDAwML_AAAAwv7AwMDC-gAAAML_wMDA-f390P4YKFDA-sDA
wMD_GChQwv7AwMDC-hgoUM7_AKCgxP4gYLDA-hgoUML_wMDA3P4YKFDE-sDAwOz_oIh4wBTABNQk
wBT9-f39-dL_GChQwP7AwMDA-hgoUML_wMDAwv4YKFDO-gCgoMT_IGCwwP4YKFDC-sDAwNz_GChQ
xP7AwMDs-qCIeMAUwATUJMAU-f39-f3S-hgoUMD_wMDAwP4YKFDW-gCgoMD_GChQwP4AoKDA-iBg
sMD_GChQxP7AwMDY-hgoUML_wMDAyv4YKFDG-sDAwNr_oIh4wBTABMYkxgTIJMAU-f39-f3Q-hgo
UMD_wMDAwP4YKFDW-gCgoMD_GChQwP4AoKDA-iBgsMD_GChQxP7AwMDY-hgoUML_wMDAyv4YKFDG
-sDAwNr_oIh4wBTABMYkxgTIJMAU-f39-f3O-hgoUML_wMDAwP4YKFDS-gCgoMT_GChQwv4gYLDA
FMT_wMDA1v4YKFDC-sDAwMj_GChQwv7AwMDi-qCIeMAUwATEJMAUwP4gYLDE-qCIeMAExiTAFP39
-f39zv4YKFDC-sDAwMD_GChQ0v4AoKDE-hgoUML_IGCwwBTE-sDAwNb_GChQwv7AwMDI-hgoUML_
wMDA4v6giHjAFMAExCTAFMD_IGCwxP6giHjABMYkwBT9-f39-c7_GChQwv7AwMDA-hgoUNL_AKCg
xP4YKFDM-sDAwNL_GChQwv7AwMDC-hgoUMD_wMDAwv4YKFDC-sDAwOQkwBTABMQUwP4gYLDIFMAE
xP6giHjAFP39-f39zv4YKFDC-sDAwMD_GChQ0v4AoKDE-hgoUMz_wMDA0v4YKFDC-sDAwML_GChQ
wP7AwMDC-hgoUML_wMDA5CTAFMAExBTA-iBgsMgUwATE-qCIeMAU-f39-f3O-hgoUML_wMDAwP4Y
KFDS-gCgoMT_GChQwP4AoKDA-iBgsMD_GChQxv7AwMDS-hgoUMD_wMDAwv4YKFDI-sDAwNwkyP6g
iHjAFMAExBTA-iBgsMgUwATE-qCIeMAUwP4gYLD9-cYU-f39xP4YKFDC-sDAwMD_GChQ0v4AoKDE
-hgoUMD_AKCgwCTA-hgoUMb_wMDA0v4YKFDA-sDAwML_GChQyP7AwMDcJMj_oIh4wBTABMQUwP4g
YLDIFMAExP6giHjAFMD_IGCw-f3GFP39-cD_GChQwP7AwMDA-hgoUML_wMDAwP4YKFDS-gCgoMT_
GChQwP4AoKDAJMD_GChQyP7AwMDO-hgoUMAkwBTCJMAUwv7AwMDeJMD_GChQyP6giHjA-sDAwMAE
xBTA-hgoUMj_wMDAwATEJMAUwP4YKFD2BMAU-cr_IGCwwP7AwMD9-fz_GChQwP7AwMDA-hgoUML_
wMDAwP4YKFDS-gCgoMT_GChQwP4AoKDAJMD_GChQyP7AwMDO-hgoUMAkwBTCJMAUwv7AwMDeJMD_
GChQyP6giHjA-sDAwMAExBTA-hgoUMj_wMDAwATEJMAUwP4YKFD2BMAU-cr_IGCwwP7AwMD9-fr_
GChQwv7AwMDA-hgoUML_wMDAwP4YKFDW-gCgoMQkwP4YKFDO-sDAwMT_GChQwiTAFMQkwBTA-sDA
wN4kwP4YKFDA-rgAOMj_oIh4wP7AwMDA-gDgMMQUwP64ADjIFMD_AOAwxCTAFMD_uAA48P4A4DDG
-rgAOOb_AOAwwP64ADje-hgoUMD_IGCwwP7AwMD9-fj_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDW
-gCgoMQkwP4YKFDO-sDAwMT_GChQwiTAFMQkwBTA-sDAwN4kwP4YKFDABMj_oIh4wP7AwMDA-gDg
MMQUwP64ADjIFMD_AOAwxCTAFMD_uAA48P4A4DDG-rgAOOb_AOAwwP64ADje-hgoUMD_IGCwwP7A
wMD9-fj_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDa-gCgoMAkwP4YKFDe-sDAwMD_GChQwv7AwMDc
JMD_GChQwATK-qCIeMD_wMDAwP4A4DDEFMD_uAA4xCTCFMD_AOAwxCTAFMD_uAA48P4A4DDE-hgo
UMD_uAA45P4A4DDCFMD_uAA43hTA-iBgsMD_wMDA-f32-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ
2v4AoKDAJMD_GChQ3v7AwMDA-hgoUML_wMDA3CTA-hgoUMAEyv6giHjA-sDAwMD_AOAwxBTA-rgA
OMQkwhTA-gDgMMQkwBTA-rgAOPD_AOAwxP4YKFDA-rgAOOT_AOAwwhTA-rgAON4UwP4gYLDA-sDA
wP397v4YKFDA-sDAwMT_GChQwCTA-sDAwMD_GChQwv7AwMDA-hgoUPz_wMDAwv4YKFDA-sDAwNwk
wP4YKFDABMz_oIh4wP7AwMDA-gDgMMQUwP64ADjAJMIUwv4A4DDGJMAUwP64ADjq-gDgMMD_uAA4
wP4YKFDA-gDgMMb_uAA44hTA-gDgMMT_uAA44BTA-iBgsMD_wMDA-f3s-hgoUMD_wMDAxP4YKFDA
JMD_wMDAwP4YKFDC-sDAwMD_GChQ-P7AwMDC-hgoUMD_wMDA3CTA-hgoUMAEzP6giHjA-sDAwMD_
AOAwxBTA-rgAOMAkwhTC-gDgMMYkwBTA-rgAOOr_AOAwwP64ADjA-hgoUMD_AOAwxv64ADjiFMD_
AOAwxP64ADjgFMD_IGCwwP7AwMD9-er_GChQwv7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ
7iTCFMb_wMDA5iTA-hgoUMAEyv6giHjA-sDAwMD_AOAwxBTAJMAUwgTKJMAUwP64ADjm-gDgMMT_
uAA4wP4YKFDA-gDgMMIUwATA-rgAOOL_IGCwwBTA-gDgMMD_uAA44BTAJMD_wMDA-f3s-hgoUML_
wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUO4kwhTG-sDAwOYkwP4YKFDABMr_oIh4wP7AwMDA
-gDgMMQUwCTAFMIEyiTAFMD_uAA45v4A4DDE-rgAOMD_GChQwP4A4DDCFMAEwP64ADji-iBgsMAU
wP4A4DDA-rgAOOAUwCTA-sDAwP397P4YKFDC-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDQ
JMAU5P7AwMDiJMAUxCTA-hgoUMAEyP6giHjA-sDAwMD_AOAwxBTCBMokwhTA-rgAOMT_AOAwyP64
ADjG-gDgMMj_uAA4wv4A4DDI-iBgsMD_GChQwATE-rgAOMT_AOAwyP64ADjE-gDgMML_uAA4wP4A
4DDE-rgAOMYUwATG-gDgMMr_uAA4yhTAJMD_wMDAxCTAFP395v4YKFDC-sDAwMT_GChQwv7AwMDA
-hgoUML_wMDAwP4YKFDQJMAU5P7AwMDiJMAUxCTA-hgoUMAEyP6giHjA-sDAwMD_AOAwxBTCBMok
whTA-rgAOMT_AOAwyP64ADjG-gDgMMj_uAA4wv4A4DDI-iBgsMD_GChQwATE-rgAOMT_AOAwyP64
ADjE-gDgMML_uAA4wP4A4DDE-rgAOMYUwATG-gDgMMr_uAA4yhTAJMD_wMDAxCTAFP395v4YKFDC
-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDcJMAU1P7AwMDkJMD_GChQwCTA-sDAwMAkxATI
-qCIeMAUwP4A4DDQJMIUwv64ADjE-gDgMMz_uAA4wv4A4DDM-iBgsMAEyCTA-hgoUMAExP64ADjC
-gDgMMz_uAA4wv4A4DDM-rgAOML_AOAwxP64ADjC-gDgMM7_uAA4yCTE-sDAwMAkwP4YKFDAJMD_
wMDA-f3k-hgoUML_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUNwkwBTU-sDAwOQkwP4YKFDA
JMD_wMDAwCTEBMj_oIh4wBTA-gDgMNAkwhTC-rgAOMT_AOAwzP64ADjC-gDgMMz_IGCwwATIJMD_
GChQwATE-rgAOML_AOAwzP64ADjC-gDgMMz_uAA4wv4A4DDE-rgAOML_AOAwzv64ADjIJMT_wMDA
wCTA-hgoUMAkwP7AwMD9-eT_GChQwv7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ0v4AoKDA
-hgoUMD_AKCgwP4YKFDAJMIU0P7AwMDmJMD_GChQwATAFMAkxBTABMj_oIh4wP7AwMDA-gDgMMwk
whTC-rgAOMD_AOAwwP64ADjC-hgoUMD_AOAwxBTCBML_IGCwwBTABMQUwATEJMAUwATGFMAExv64
ADjAFMD_AOAwxBTCBMIkwBTABMgUwv64ADjAFMD_AOAwxP64ADjAFMD_AOAwxCTAFMAEwhTA-rgA
OMgUwCTEFMAEwBTAJMD_wMDA-f3i-hgoUML_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUNL_
AKCgwP4YKFDA-gCgoMD_GChQwCTCFND_wMDA5iTA-hgoUMAEwBTAJMQUwATI-qCIeMD_wMDAwP4A
4DDMJMIUwv64ADjA-gDgMMD_uAA4wv4YKFDA-gDgMMQUwgTC-iBgsMAUwATEFMAExCTAFMAExhTA
BMb_uAA4wBTA-gDgMMQUwgTCJMAUwATIFML_uAA4wBTA-gDgMMT_uAA4wBTA-gDgMMQkwBTABMIU
wP64ADjIFMAkxBTABMAUwCTA-sDAwP394v4YKFDC-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4Y
KFDU-gCgoMYkwP4YKFDIJMIUxv7AwMDgJMD_GChQwATEFMAkwBTABMr_oIh4wP7AwMDA-gDgMMgk
whTC-rgAOML_AOAwxP4gYLDA-hgoUMAExCTAFMAEwBTAJMAUwgTA-rgAOMAkwP4A4DDEJMAUwATG
FMAExiTAFMAExCTABMQkwBTABMQUwATCFMAkwBTABMT_uAA4wBTA-gDgMMT_uAA4wP4A4DDCFML_
uAA4yhTAJMAUwATEFMAkwP7AwMD9-eD_GChQwv7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ
1P4AoKDGJMD_GChQyCTCFMb_wMDA4CTA-hgoUMAExBTAJMAUwATK-qCIeMD_wMDAwP4A4DDIJMIU
wv64ADjC-gDgMMT_IGCwwP4YKFDABMQkwBTABMAUwCTAFMIEwP64ADjAJMD_AOAwxCTAFMAExhTA
BMYkwBTABMQkwATEJMAUwATEFMAEwhTAJMAUwATE-rgAOMAUwP4A4DDE-rgAOMD_AOAwwhTC-rgA
OMoUwCTAFMAExBTAJMD_wMDA-f3g-hgoUML_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUNj_
AKCgxP4YKFDE-gCgoMQkwP4YKFDAJMAUwv7AwMDA-hgoUML_wMDA2CTA-hgoUMAE2P6giHjA-sDA
wMD_AOAwxiTAFML_uAA4xP4A4DDI-hgoUMAExP64ADjG-iBgsMAUwP4A4DDC-rgAOMAkwP4A4DDE
JMIUwATEFMAExP64ADjCJMAUxP4A4DDGJMAUwATC-rgAOMAkwP4A4DDEJMAUwATCFMD_uAA4wBTG
-gDgMMj_uAA42BTAJMD_wMDA-f3e-hgoUML_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUNj_
AKCgxP4YKFDE-gCgoMQkwP4YKFDAJMAUwv7AwMDA-hgoUML_wMDA2CTA-hgoUMAE2P6giHjA-sDA
wMD_AOAwxiTAFML_uAA4xP4A4DDI-hgoUMAExP64ADjG-iBgsMAUwP4A4DDC-rgAOMAkwP4A4DDE
JMIUwATEFMAExP64ADjCJMAUxP4A4DDGJMAUwATC-rgAOMAkwP4A4DDEJMAUwATCFMD_uAA4wBTG
-gDgMMj_uAA42BTAJMD_wMDA-f3e-hgoUML_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUNr_
AKCgziTG-hgoUMT_wMDA2CTA-hgoUMAE2v6giHjA-sDAwMD_AOAwxCTAFMD_uAA4xv4gYLDA-hgo
UMD_AOAwxCTAFMAExP64ADjGJMAUwP4A4DDC-rgAOMAkwP4A4DDE-rgAOMAkwBTA-gDgMMQUwATE
-rgAOMQkwv4A4DDGFMAkwBTCBMD_uAA4wCTA-gDgMMQkwBTCBML_uAA4xCTA-gDgMMr_uAA42hTA
JMD_wMDA-f3c-hgoUML_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUNr_AKCgziTG-hgoUMT_
wMDA2CTA-hgoUMAE2v6giHjA-sDAwMD_AOAwxCTAFMD_uAA4xv4gYLDA-hgoUMD_AOAwxCTAFMAE
xP64ADjGJMAUwP4A4DDC-rgAOMAkwP4A4DDE-rgAOMAkwBTA-gDgMMQUwATE-rgAOMQkwv4A4DDG
FMAkwBTCBMD_uAA4wCTA-gDgMMQkwBTCBML_uAA4xCTA-gDgMMr_uAA42hTAJMD_wMDA-f3c-hgo
UML_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUOD_AKCgwCTAFMIkwP4YKFDmJMAUwATa-qCI
eMD_wMDAwP4A4DDEJMAUwP64ADjI-iBgsMD_GChQwP4A4DDA-rgAOMAkwBTC-gDgMML_uAA4xiTA
FMD_AOAwwv64ADjAJMD_AOAwxP64ADjAJMAUwv4A4DDK-rgAOMb_AOAwyiTAFMAEwv64ADjAJMD_
AOAwxCTAFMAExP64ADjE-gDgMMz_uAA42hTAJMAU-dr_wMDAwP4YKFDE-sDAwMD_GChQwv7AwMDE
-hgoUML_wMDA5v4YKFDC-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDg-gCgoMAkwBTCJMD_
GChQ5iTAFMAE2v6giHjA-sDAwMD_AOAwxCTAFMD_uAA4yP4gYLDA-hgoUMD_AOAwwP64ADjAJMAU
wv4A4DDC-rgAOMYkwBTA-gDgMML_uAA4wCTA-gDgMMT_uAA4wCTAFML_AOAwyv64ADjG-gDgMMok
wBTABML_uAA4wCTA-gDgMMQkwBTABMT_uAA4xP4A4DDM-rgAONoUwCTAFP3a-sDAwMD_GChQxP7A
wMDA-hgoUML_wMDAxP4YKFDC-sDAwOb_GChQwv7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ
7v4AoKDE-hgoUMAk3hTABNj_oIh4wP7AwMDA-gDgMMQkwBTA-rgAOMj_AOAwyP4YKFDCBML_uAA4
xv4gYLDAFMD_AOAwwv64ADjAJMD_AOAwxP64ADjAJMIUwv4A4DDGFMD_uAA4xP4A4DDAFMAEwhTA
BMIkwBTABML_uAA4wCTA-gDgMMQkwBTABMT_uAA4wv4A4DDGFMAExP64ADjYFMAk-d7_wMDAwCTE
FMAkwhTEJMIU5v4YKFDC-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDu-gCgoMT_GChQwCTe
FMAE2P6giHjA-sDAwMD_AOAwxCTAFMD_uAA4yP4A4DDI-hgoUMIEwv64ADjG-iBgsMAUwP4A4DDC
-rgAOMAkwP4A4DDE-rgAOMAkwhTC-gDgMMYUwP64ADjE-gDgMMAUwATCFMAEwiTAFMAEwv64ADjA
JMD_AOAwxCTAFMAExP64ADjC-gDgMMYUwATE-rgAONgUwCT93v7AwMDAJMQUwCTCFMQkwhTm-hgo
UMAkwP7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ2v4oqPjA-gCgoMD_GChQxBzA-gCgoMIc
wBTG-hgoUMAkwBzaJMIUwATEFMAkwBTABMr_oIh4wP7AwMDA-gDgMMQkwBTA-rgAOMb_GChQwP4A
4DDIFMAExP64ADjG-iBgsMAUwP4A4DDC-rgAOMAkwP4A4DDE-rgAOMIkwP4A4DDKFMD_uAA4whTC
-gDgMMIkwBTABMIkwBTABML_uAA4wCTAFMD_AOAwwiTAFMAExP64ADjAJMD_AOAwxBTCBMAUwv64
ADjKFMAkwBTABMQUwCTCHMokwhzC-gCgoMAcwhTCHMQkwBTAJMoUwiTAFML_gHCYwhTIJMAUwCzA
FMD_4GgAwCTA-mBAiMD_gHCYwP7AwMDAJMD_GChQwCTA-sDAwMD_AKCgwCTA-sDAwMT_YECIwhTm
-hgoUMAkwP7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ2hzA-gCgoMD_GChQxBzA-gCgoMIc
wBTG-hgoUMAkwBzaJMIUwATEFMAkwBTABMr_oIh4wP7AwMDA-gDgMMQkwBTA-rgAOMb_GChQwP4A
4DDIFMAExP64ADjG-iBgsMAUwP4A4DDC-rgAOMAkwP4A4DDE-rgAOMIkwP4A4DDKFMD_uAA4whTC
-gDgMMIkwBTABMIkwBTABML_uAA4wCTAFMD_AOAwwiTAFMAExP64ADjAJMD_AOAwxBTCBMAUwv64
ADjKFMAkwBTABMQUwCTCHMokwhzC-gCgoMAcwhTCHMQkwBTAJMoUwiTAFML_gHCYwhTIJMAUwCzA
FMA8wCTA-mBAiMD_gHCYwP7AwMDAJMD_GChQwCTA-sDAwMD_AKCgwCTA-sDAwMT_YECIwhTm-hgo
UML_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUNocwP4AoKDCHMIUzv4YKFDAJMIc1iTGFMAE
wBTAJMQUwATI-qCIeMD_wMDAwP4A4DDEJMAUwP64ADjE-iBgsMD_GChQwP4A4DDIFMAExP64ADjC
-gDgMMD_uAA4wCTAFML_AOAwwP64ADjAJMD_AOAwwhTA-rgAOMIkwBTA-gDgMMr_uAA4whTC-gDg
MMIkwBTABMIkwBTABML_uAA4wCTA-gDgMMQkwBTABMQkwBTABMT_uAA4wBTA-gDgMMT_uAA4yBTA
JMQUwATAFMAkxhzIJMIcwP4AoKDCHMIUwhzCJMYUzP5g2PDAFMz_gHCYwBTAJMQUwP4YKFDAJMD_
YECIwP6AcJjA-sDAwMD_GChQwCTC-sDAwMD_AKCgwv7AwMDE-mBAiMIU5v4YKFDC-sDAwMT_GChQ
wv7AwMDA-hgoUML_wMDAwP4YKFDaHMD_AKCgwhzCFM7_GChQwCTCHNYkxhTABMAUwCTEFMAEyP6g
iHjA-sDAwMD_AOAwxCTAFMD_uAA4xP4gYLDA-hgoUMD_AOAwyBTABMT_uAA4wv4A4DDA-rgAOMAk
wBTC-gDgMMD_uAA4wCTA-gDgMMIUwP64ADjCJMAUwP4A4DDK-rgAOMIUwv4A4DDCJMAUwATCJMAU
wATC-rgAOMAkwP4A4DDEJMAUwATEJMAUwATE-rgAOMAUwP4A4DDE-rgAOMgUwCTEFMAEwBTAJMYc
yCTCHMD_AKCgwhzCFMIcwiTGFMw8wBTM-oBwmMAUwCTEFMD_GChQwCTA-mBAiMD_gHCYwP7AwMDA
-hgoUMAkwv7AwMDA-gCgoML_wMDAxP5gQIjCFOb_GChQwv7AwMDE-hgoUML_wMDAwP4YKFDC-sDA
wMD_GChQ2CTA-gCgoNwkwBzWJMj_GChQwCTIBMj_oIh4wP7AwMDA-gDgMMQkwBTA-rgAOMT_IGCw
wP4YKFDA-gDgMMQUwATAFMAExBTABMQkwBTABMQkwATE-rgAOMQUwP4A4DDCFMAExP64ADjCFMD_
AOAwxCTABMAUwATAJMAUwATC-rgAOMAkwP4A4DDEJMAUwATEJMAUwATO-rgAOMgkyBTAJMgcyCTA
HML_AKCgwhzCFMIkxhTO-oBwmMIUzCzEFMAkxv5gQIjA-oBwmMD_wMDAwP4YKFDAJMD_AKCgwP7A
wMDA-gCgoMD_YECIwP7AwMDELMIU5v4YKFDC-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDY
JMD_AKCg3CTAHNYkyP4YKFDAJMgEyP6giHjA-sDAwMD_AOAwxCTAFMD_uAA4xP4gYLDA-hgoUMD_
AOAwxBTABMAUwATEFMAExCTAFMAExCTABMT_uAA4xBTA-gDgMMIUwATE-rgAOMIUwP4A4DDEJMAE
wBTABMAkwBTABML_uAA4wCTA-gDgMMQkwBTABMQkwBTABM7_uAA4yCTIFMAkyBzIJMAcwv4AoKDC
HMIUwiTGFM7_gHCYwhTMLMQUwCTG-mBAiMD_gHCYwP7AwMDA-hgoUMAkwP4AoKDA-sDAwMD_AKCg
wP5gQIjA-sDAwMQswhTm-hgoUML_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUNgkwP4AoKDc
JMAc2CTQ-hgoUMAEyP6giHjA-sDAwMD_AOAwxCTAFMD_uAA4xP4gYLDA-hgoUMD_AOAwxhTCBMwk
wBTABMz_uAA4xBTC-gDgMMj_uAA4whTA-gDgMMwkwBTABMAUwP64ADjAJMD_AOAwxCTAFMAExCTA
FMAEzv64ADjIFMAk0BzGJMQcwCTA-gCgoMIcwhTCJMAUxP6AcJjMFMAswBTcJMIUwP7AwMDA-hgo
UMAkwP4AoKDA-sDAwMD_AKCgwv7AwMDE-mBAiMIU5v4YKFDC-sDAwMT_GChQwv7AwMDA-hgoUML_
wMDAwP4YKFDYJMD_AKCg3CTAHNgk0P4YKFDABMj_oIh4wP7AwMDA-gDgMMQkwBTA-rgAOMT_IGCw
wP4YKFDA-gDgMMYUwgTMJMAUwATM-rgAOMQUwv4A4DDI-rgAOMIUwP4A4DDMJMAUwATAFMD_uAA4
wCTA-gDgMMQkwBTABMQkwBTABM7_uAA4yBTAJNAcxiTEHMAkwP4AoKDCHMIUwiTAFMT_gHCYzBTA
LMAU3CTCFMD_wMDAwP4YKFDAJMD_AKCgwP7AwMDA-gCgoML_wMDAxP5gQIjCFOb_GChQwv7AwMDE
-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ2CTA-gCgoOAc2CTM-hgoUMAEyv6giHjA-sDAwMD_AOAw
xCTAFMD_uAA4xP4gYLDA-hgoUMD_AOAwyCTAFMAEyP64ADjCJMAUwP4A4DDI-rgAOMYkwBTA-gDg
MMb_uAA4xCTAFMD_AOAwyP64ADjAJMAUwP4A4DDC-rgAOMAkwP4A4DDEJMAUwATE-rgAOMAkwBTA
-gDgMMr_uAA4zBTAJMwcyiTAHMIkwP4AoKDCHMIUyBzC-oBwmMQUxizAFN4kwv7AwMDA-hgoUMAk
wP4AoKDA-sDAwMD_AKCgwv7AwMDE-mBAiMIU5v4YKFDC-sDAwMT_GChQwv7AwMDA-hgoUML_wMDA
wP4YKFDYJMD_AKCg4BzYJMz_GChQwATK-qCIeMD_wMDAwP4A4DDEJMAUwP64ADjE-iBgsMD_GChQ
wP4A4DDIJMAUwATI-rgAOMIkwBTA-gDgMMj_uAA4xiTAFMD_AOAwxv64ADjEJMAUwP4A4DDI-rgA
OMAkwBTA-gDgMML_uAA4wCTA-gDgMMQkwBTABMT_uAA4wCTAFMD_AOAwyv64ADjMFMAkzBzKJMAc
wiTA-gCgoMIcwhTIHML_gHCYxBTGLMAU3iTC-sDAwMD_GChQwCTA-gCgoMD_wMDAwP4AoKDC-sDA
wMT_YECIwhTm-hgoUML_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUNokwP4AoKDeHNokyP4Y
KFDABMz_oIh4wP7AwMDA-gDgMMQkwBTA-rgAOMT_IGCwwP4YKFDIBMIkwBTGBMYkwBTGBMgkwBTA
-gDgMMb_uAA4xiTAFMYEwiTAFMQEwCTAFMIEwCTAFMYEwiTAFMgE0BTAJMgcyiTCHMIkwP4AoKDC
HMIUwBzG-oBwmMAUzizAFNoswBTALMAkwP7AwMDAJML_AKCgwP7AwMDA-gCgoML_wMDAxP5gQIjC
FOb_GChQwv7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ2iTA-gCgoN4c2iTI-hgoUMAEzP6g
iHjA-sDAwMD_AOAwxCTAFMD_uAA4xP4gYLDA-hgoUMgEwiTAFMYExiTAFMYEyCTAFMD_AOAwxv64
ADjGJMAUxgTCJMAUxATAJMAUwgTAJMAUxgTCJMAUyATQFMAkyBzKJMIcwiTA-gCgoMIcwhTAHMb_
gHCYwBTOLMAU2izAFMAswCTA-sDAwMAkwv4AoKDA-sDAwMD_AKCgwv7AwMDE-mBAiMIU5v4YKFDC
-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDaJMD_AKCg3hzcJMQcwCTA-hgoUMAEyv6giHjA
-sDAwMD_AOAwxCTAFMD_uAA4xP4gYLDIBMYkxATKJMQEyiTC-hgoUML_AOAwwv64ADjIJMQExCTE
BMIkxATAJMYExiTGBNAUwCTAFMAExP54IFDABMAUwAzABMAMwCTCHMQkwP4AoKDCHMIUwhzCFNL_
gHCYwBTaLMAUwCzC-sDAwMAkwv4AoKDA-sDAwMD_AKCgwv7AwMDE-mBAiMIU5v4YKFDC-sDAwMT_
GChQwv7AwMDA-hgoUML_wMDAwP4YKFDaJMD_AKCg3hzcJMQcwCTA-hgoUMAEyv6giHjA-sDAwMD_
AOAwxCTAFMD_uAA4xP4gYLDIBMYkxATKJMQEyiTC-hgoUML_AOAwwv64ADjIJMQExCTEBMIkxATA
JMYExiTGBNAUwCTAFMAExAzABMAUwAzABMAMwCTCHMQkwP4AoKDCHMIUwhzCFNL_gHCYwBTaLMAU
wCzC-sDAwMAkwv4AoKDA-sDAwMD_AKCgwv7AwMDE-mBAiMIU5v4YKFDC-sDAwMT_GChQwv7AwMDA
-hgoUML_wMDAwP4YKFDaJMD_AKCg4BzcJMAcxCTA-hgoUMAEyP6giHjA-sDAwMD_AOAwxCTAFMD_
uAA4-P4gYLDA-hgoUMD_AOAwwBTABMD_uAA4-dAUwCTAHMIUwATAFMIEwgzABMAUwCTCHMIkwv4A
oKDCHMAU_P6AcJjCFMAswv7AwMDA-gCgoMAkwBTA-sDAwMD_AKCgwv7AwMDEJMD_YECIwBTm-hgo
UML_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUNokwP4AoKDgHNwkwBzEJMD_GChQwATI-qCI
eMD_wMDAwP4A4DDEJMAUwP64ADj8-iBgsMD_GChQwP4A4DDAFMAEwP64ADj90BTAJMAcwhTABMAU
wgTCDMAEwBTAJMIcwiTC-gCgoMIcwBT4-oBwmMIUwCzC-sDAwMD_AKCgwCTAFMD_wMDAwP4AoKDC
-sDAwMQkwP5gQIjAFOb_GChQwv7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ2iTC-gCgoN4c
4iTE-hgoUMj_oIh4wP7AwMDA-gDgMMQkwBTA-hgoUPz_IGCwwBTABMIU-dIkxBzAFMD_uAA4wBTC
BMAUwgTAFMAcwCTAHMIkwv4AoKDE-oBwmMAU9izAFMIswP5gQIjA-sDAwMD_AKCgxP7AwMDA-gCg
oMD_gHCYwP7AwMDEJMIU5v4YKFDC-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDaJML_AKCg
3hziJMT_GChQyP6giHjA-sDAwMD_AOAwxCTAFMD_GChQ-P4gYLDAFMAEwhT90iTEHMAUwP64ADjA
FMIEwBTCBMAUwBzAJMAcwiTC-gCgoMQswBT2LMAUwizA-mBAiMD_wMDAwP4AoKDE-sDAwMD_AKCg
wP6AcJjA-sDAwMQkwhTm-hgoUML_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUNwkwP4AoKDU
-hgoUMD_AKCgyBzeJND_oIh4wP7AwMDA-gDgMMQkwBTA-iBgsP3CBMIk-doMwP64ADjADMD_GChQ
wATAFMAMwATADMAcwCTAHMAkwP4AoKD9yizC-sDAwMD_YECIwP6AcJjA-gCgoMD_wMDAwCzCFMT_
GChQwCTA-sDAwOb_GChQwv7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ3CTA-gCgoNT_GChQ
wP4AoKDIHN4k0P6giHjA-sDAwMD_AOAwxCTAFMD_IGCw-cIEwiT92gzA-rgAOMAMwP4YKFDABMAU
wAzABMAMwBzAJMAcwCTA-gCgoP3KLML_wMDAwP5gQIjA-oBwmMD_AKCgwP7AwMDALMIUxP4YKFDA
JMD_wMDA5v4AoKDA-hgoUMD_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUNwkwv4AoKDS-hgo
UMD_AKCgyhzeJM7_oIh4wP7AwMDA-gDgMMQkwBTA-iBgsP3CBMIk-ewcwCTAHMAkwP4AoKD9zCzA
-sDAwMD_YECIwP6AcJjA-mBAiMAUwP4AoKDA-oBwmMD_wMDAxP4YKFDAJMD_wMDA5v4AoKDA-hgo
UMD_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUNwkwv4AoKDS-hgoUMD_AKCgyhzeJM7_oIh4
wP7AwMDABMQkwBTA-iBgsP3CBMIk-ewcwCTAHMAkwP4AoKD9zCzA-sDAwMD_YECIwP6AcJjA-mBA
iMAUwP4AoKDA-oBwmMD_wMDAxP4YKFDAJMD_wMDA5v4AoKDA-hgoUMD_wMDAxP4YKFDC-sDAwMD_
GChQwv7AwMDA-hgoUN4kwP4AoKDiHN4kzP6giHjA-sDAwMAExCTAFMD_IGCw-cQEwCT91hzCJNAc
wCTC-gCgoP3OLMD_wMDAwCzC-gCgoMD_wMDAwCzCFMT_GChQwCTA-sDAwOb_AKCgwP4YKFDA-sDA
wMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDeJMD_AKCg4hzeJMz_oIh4wP7AwMDABMQkwBTA-iBg
sP3EBMAk-dYcwiTQHMAkwv4AoKD9zizA-sDAwMAswv4AoKDA-sDAwMAswhTE-hgoUMAkwP7AwMDm
-gCgoMAkwP7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ3iTC-gCgoOQc3CTK-qCIeMD_wMDA
wATEJMAUwP4gYLD9xATAJP3UHMQk0BzAJML_YECIwP4AoKDiJMYUwiTEFNT_gHCYwP7AwMDA-mBA
iMD_gHCYwP4AoKDA-sDAwMD_YECIwP4AoKDA-sDAwMT_GChQwCTA-sDAwOb_AKCgwCTA-sDAwMT_
GChQwv7AwMDA-hgoUML_wMDAwP4YKFDeJML_AKCg5BzcJMr_oIh4wP7AwMDABMQkwBTA-iBgsP3E
BMAk-dQcxCTQHMAkwizA-gCgoOIkxhTCJMQU1P6AcJjA-sDAwMD_YECIwP6AcJjA-gCgoMD_wMDA
wP5gQIjA-gCgoMD_wMDAxP4YKFDAJMD_wMDA5v4AoKDAJMD_wMDAxP4YKFDC-sDAwMD_GChQwv7A
wMDA-hgoUOAkwP4AoKDmHNwkyP6giHjA-sDAwMAExCTAFMD_IGCw-f3aHMYk0BzAJMAswv4AoKDA
-oBwmMAUwizAFMYk0CzOJMAswCTEFM7_wMDAwP4AoKDALMAUwP7AwMDA-mBAiMIUxP4YKFDAJMD_
wMDA5v4AoKDAJMD_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUOAkwP4AoKDmHNwkyP6giHjA
-sDAwMAExCTAFMD_IGCw-f3aHMYk0BzAJMAswv4AoKDA-oBwmMAUwizAFMYk0CzOJMAswCTEFM7_
wMDAwP4AoKDALMAUwP7AwMDA-mBAiMIUxP4YKFDAJMD_wMDA5v4AoKDAJMD_wMDAxP4YKFDC-sDA
wMD_GChQwv7AwMDA-hgoUOAkwv4AoKDcHMAUxhzkJMD_oIh4wP7AwMDABMAkwBTA-iBgsMAc-cIk
yP4AoKDE-oBwmML_YECIxP6AcJjA-mBAiMAkwhz0FMAc0CTAHMIkwBTOJMgswP6AcJja-mBAiML_
gHCYwv5gQIjAJMQUyP7AwMDA-gCgoMD_gHCYwBTA-sDAwMAswP4AoKDA-sDAwMT_GChQwCTA-sDA
wOb_AKCgwCTA-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDgJML_AKCg3BzAFMYc5CTA-qCI
eMD_wMDAwATAJMAUwP4gYLDAHP3CJMj_AKCgxCzC-mBAiMT_gHCYwP5gQIjAJMIc9BTAHNAkwBzC
JMAUziTILMD_gHCY2v5gQIjC-oBwmML_YECIwCTEFMj_wMDAwP4AoKDA-oBwmMAUwP7AwMDALMD_
AKCgwP7AwMDE-hgoUMAkwP7AwMDm-gCgoMAkwP7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ
4iTC-gCgoNocwhTIHOAkwP6giHjA-sDAwMAEwCTAFMD_IGCwwBz9xCTE-gCgoMT_YECIwBTCLML_
gHCYwv5gQIjCJMIc8BTCHNAkwBzCJMAswBTA-oBwmMAUxCTE-mBAiML_gHCYwv5gQIjA-oBwmMD_
YECI5iTEFMT_wMDAwP4AoKDA-oBwmMAUwP7AwMDA-mBAiMD_AKCgwP7AwMDEJMIU5v4AoKDAJMD_
wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUOIkwv4AoKDaHMIUyBzgJMD_oIh4wP7AwMDABMAk
wBTA-iBgsMAc-cQkxP4AoKDELMAUwizC-oBwmML_YECIwiTCHPAUwhzQJMAcwiTALMAUwP6AcJjA
FMQkxP5gQIjC-oBwmML_YECIwP6AcJjA-mBAiOYkxBTE-sDAwMD_AKCgwP6AcJjAFMD_wMDAwP5g
QIjA-gCgoMD_wMDAxCTCFOb_AKCgwCTA-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDkJML_
AKCgzBzAFMIcwBTIHMAUxhzc-qCIeMIExiTA-sDAwMAc-cT_IGCwxP4AoKDCLMAUxCzC-oBwmMD_
YECIxCTCHO4UwhzSJMAcwiTAFMYkwv4YKFDELMT_gHCYwP5gQIjG-gCgoMD_gHCYwP5gQIjC-oBw
mMAUwCTC-hgoUMQkwP5gQIjIJMIUwCTE-gCgoMD_wMDAwP4AoKDE-sDAwMAswP4AoKDA-sDAwMQk
whTm-gCgoMAkwP7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ5CTC-gCgoMwcwBTCHMAUyBzA
FMYc3P6giHjCBMYkwP7AwMDAHP3E-iBgsMT_AKCgwizAFMQswv6AcJjA-mBAiMQkwhzuFMIc0iTA
HMIkwBTGJML_GChQxCzE-oBwmMD_YECIxv4AoKDA-oBwmMD_YECIwv6AcJjAFMAkwv4YKFDEJMD_
YECIyCTCFMAkxP4AoKDA-sDAwMD_AKCgxP7AwMDALMD_AKCgwP7AwMDEJMIU5v4AoKDAJMD_wMDA
xP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUOgkwBTAHMD_AKCgxhzCFMIcxBTCHMQUxhza-qCIeMD_
wMDAwATEFMD_IGCwwBz9xCTC-gCgoMI8wBTA-oBwmMAUxCzA-mBAiMQUwCTEHOoUwhzUJMAcwiTA
LMAUwiTC-hgoUMAkxhTAJML_AKCg0iTC-hgoUMokxBTAJMIUxCTA-sDAwMD_AKCgxP7AwMDA-oBw
mMD_AKCgwP7AwMDE-mBAiMAkwBTm-gCgoMAkwP7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ
6CTAFMAcwP4AoKDGHMIUwhzEFMIcxBTGHNr_oIh4wP7AwMDABMQUwP4gYLDAHP3EJML_AKCgwjzA
FMD_gHCYwBTELMD_YECIxBTAJMQc6hTCHNQkwBzCJMAswBTCJML_GChQwCTGFMAkwv4AoKDSJML_
GChQyiTEFMAkwhTEJMD_wMDAwP4AoKDE-sDAwMD_gHCYwP4AoKDA-sDAwMT_YECIwCTAFOb_AKCg
wCTA-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDwHML_AKCgwBz8-qCIeMD_wMDAwATAJMAU
wBz9xv4gYLDALMA8xv6AcJjA-mBAiMD_AKCgxP6AcJjA-mBAiML_gHCYwhTAJMIc5BTCHNgkwBzC
JMD_YECIwCTC-hgoUMAkxBTAJMb_AKCg1iTE-hgoUMAkxP4AoKDC-oBwmMAkyP4YKFDC-sDAwMAk
wP4AoKDC-sDAwMAswP4AoKDA-sDAwMT_YECIwCTAFOb_AKCgwCTA-sDAwMT_GChQwv7AwMDA-hgo
UML_wMDAwP4YKFDwHML_AKCgwBz8-qCIeMD_wMDAwATAJMAUwBz9xv4gYLDALMA8xv6AcJjA-mBA
iMD_AKCgxP6AcJjA-mBAiML_gHCYwhTAJMIc5BTCHNgkwBzCJMD_YECIwCTC-hgoUMAkxBTAJMb_
AKCg1iTE-hgoUMAkxP4AoKDC-oBwmMAkyP4YKFDC-sDAwMAkwP4AoKDC-sDAwMAswP4AoKDA-sDA
wMT_YECIwCTAFOb_AKCgwCTA-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFD2HPz_oIh4wP7A
wMDABMAkwBTAHP3E-iBgsMD_gHCYwP5gQIjA-oBwmMA8wP4AoKDCLMD_YECIwP6AcJjC-mBAiMD_
gHCYwP5gQIjG-oBwmMAkwhzQFMIczBTCHNokwBzCJND_YECIwhTY-oBwmMAkzBTCLMD_YECIwiTG
-hgoUMD_wMDAwP4YKFDAJML_wMDAwCzA-gCgoMD_wMDAxCzAJMAU5v4AoKDAJMD_wMDAxP4YKFDC
-sDAwMD_GChQwv7AwMDA-hgoUPYc-P6giHjA-sDAwMAEwCTAFMAc-cT_IGCwwP6AcJjA-mBAiMD_
gHCYwDzA-gCgoMIswP5gQIjA-oBwmML_YECIwP6AcJjA-mBAiMb_gHCYwCTCHNAUwhzMFMIc2iTA
HMIk0P5gQIjCFNj_gHCYwCTMFMIswP5gQIjCJMb_GChQwP7AwMDA-hgoUMAkwv7AwMDALMD_AKCg
wP7AwMDELMAkwBTm-gCgoMAkwP7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ_iTIHOokxP6g
iHjC-sDAwMD_IGCwwhz9wCTC-gCgoND_gHCYwP5gQIjA-oBwmMT_YECIwv6AcJjAFMAkwhzMFMIc
zBTCHMoUwhzMJMAcwiTQ-mBAiMAU2v6AcJjAFMIkwP7gaADAJMQUwizAFMAswP5gQIjCJMT_wMDA
wCTEFMAswhTELMAkwBTm-gCgoMAkwP7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ_iTIHOok
xP6giHjC-sDAwMD_IGCwwhz9wCTC-gCgoND_gHCYwP5gQIjA-oBwmMT_YECIwv6AcJjAFMAkwhzM
FMIczBTCHMoUwhzMJMAcwiTQ-mBAiMAU2v6AcJjAFMIkwDzAJMQUwizAFMAswP5gQIjCJMT_wMDA
wCTEFMAswhTELMAkwBTm-gCgoMAkwP7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ-cQk1hzW
JML_oIh4wP7AwMDA-iBgsMIc-cAkwv6AcJjI-gCgoMIsxhTALMD_YECIyP6AcJjA-hgoUMAkwBzI
-gCgoMQcyhTEHMgUxBzOJMAcwiTO-mBAiMIU2v6AcJjAFMIkwP74oADAJMAUxizG-mBAiMIkwP4Y
KFDA-sDAwMAkwv4YKFDA-sDAwMAkwCzAFMQswCTAFOb_AKCgwCTA-sDAwMT_GChQwv7AwMDA-hgo
UML_wMDAwP4YKFD9xCTW-iio_NYkwv6giHjA-sDAwMD_IGCwwhz9wCTC-oBwmMj_AKCgwizGFMAs
wP5gQIjI-oBwmMD_GChQwCTAHMj_AKCgxBzKFMQcyBTEHM4kwBzCJM7_YECIwhTa-oBwmMAUwiTA
-vigAMAkwBTGLMb_YECIwiTA-hgoUMD_wMDAwCTC-hgoUMD_wMDAwCTALMAUxCzAJMAU5v4AoKDA
JMD_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUP3aJN7_wMDAwCTK-iio_PYkwv6AcJjE-gCg
oM4sxv5gQIjGJMQcxBTCHMwUwhzKFMIcxBTAHMokwBzA-hgoUMAkxhTAJMYswP4AoKDU-mDY8MAU
yP7gaADA-vjoIMA8wBTG-oBwmMAUwCzE-mBAiML_IGCwwP7AwMDAJMQUwCTALMAUxCzAJMAU5v4A
oKDAJMD_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUP3aJN7_wMDAwCTKHPYkwv6AcJjE-gCg
oM4sxv5gQIjGJMQcxBTCHMwUwhzKFMIcxBTAHMokwBzA-hgoUMAkxhTAJMYswP4AoKDU-mDY8MAU
yP7gaADA-vjoIMA8wBTG-oBwmMAUwCzE-mBAiML_IGCwwP7AwMDAJMQUwCTALMAUxCzAJMAU5v4A
oKDAJMD_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUP32JML_wMDAwCTC-hgoUMQkyBzsJMj_
AKCgwP6AcJjS-mBAiMD_gHCYxP5gQIjCFMAkxBTCHMwUxBzKFMIcwhTCHMokwhzAJMb_GChQwCTE
FMAkwCzA-gCgoN4kwv74oADAJMAUxv6AcJjAFMD_YECIxP6AcJjA-mBAiML_wMDAwP4YKFDAJML_
wMDAwP4YKFDAJMD_wMDAxCzAJMAU5v4AoKDAJMD_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgo
UP32JML_wMDAwCTC-hgoUMQkyP4oqPjsJMj_AKCgwP6AcJjS-mBAiMD_gHCYxP5gQIjCFMAkxBTC
HMwUxBzKFMIcwhTCHMokwhzAJMb_GChQwCTEFMAkwCzA-gCgoN4kwv74oADAJMAUxv6AcJjAFMD_
YECIxP6AcJjA-mBAiML_wMDAwP4YKFDAJML_wMDAwP4YKFDAJMD_wMDAxCzAJMAU5v4AoKDAJMD_
wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUP34JMQUziTG-iio_Ogkxv6AcJjKJMD_AKCgxizE
-mBAiMD_gHCYwiTCFMQczBTCHMoUwhzEFMIczCTC-hgoUMAkyBTCJMAUwCTA-gCgoOAkwjzAJMAU
xizAFMAswBTALMD_YECIwP6AcJjA-mBAiMD_wMDAwCzAJMIUwCTCFMQswCTAFOb_AKCgwCTA-sDA
wMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFD9_CTEFM4kxhzoJMb_gHCYyiTA-gCgoMYsxP5gQIjA
-oBwmMIkwhTEHMwUwhzKFMIcxBTCHMwkwv4YKFDAJMgUwiTAFMAkwP4AoKDgJMI8wCTAFMYswBTA
LMAUwCzA-mBAiMD_gHCYwP5gQIjA-sDAwMAswCTCFMAkwhTELMAkwBTm-gCgoMAkwP7AwMDE-hgo
UML_wMDAwP4YKFDC-sDAwMD_GChQ-fgkwhTWJMYUwBzU-gCgoMAczCTCFMQkxhTAJMT_gHCYxP5g
QIjA-oBwmMD_YECIwCTAFMIkwBzKFMQcyBTEHMQUwhzM-nAoKPoUwCTC-hgoUMAkwP4AoKDG-oBw
mMAUwCzAFMAswv5gQIjC-sDAwMAswCTCFMAkwhTEJMIU5v4AoKDAJMD_wMDAxP4YKFDC-sDAwMD_
GChQwv7AwMDA-hgoUP34JMIU1iTGFMAc1P4AoKDAHMwkwhTEJMYUwCTE-oBwmMT_YECIwP6AcJjA
-mBAiMAkwBTCJMAcyhTEHMgUxBzEFMIczAT6FMAkwv4YKFDAJMD_AKCgxv6AcJjAFMAswBTALML_
YECIwv7AwMDALMAkwhTAJMIUxCTCFOb_AKCgwCTA-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4Y
KFD9_iTAFNwkxhzQ-oBwmMD_WFBIwBzK-iBgsMD_AKCgxiTEFMIkwP5g2PDAFMAsxP5gQIjA-oBw
mMD_YECIwCTAHMIkwBzIFMIcyhTCHMYUwv64ADjA-qCIeMIEwCTC-kAoMMAkwCzA-sDAwMAkwCzA
JMYUwCTA-nAoKMAkxBTCBMD_uAA4wiTCFMAEwv5wKCjE-rgAOML_cCgozP4AoKDM-oBwmMD_YECI
wv6AcJjA-sDAwMD_IGCwwP4YKFDAJMD_wMDAwCTA-hgoUMD_wMDAxCTA-mBAiMAU5v4AoKDAJMD_
wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUP36JMAU3CTGHND_gHCYwP5YUEjAHMr_IGCwwP4A
oKDGJMQUwiTAPMAUwCzE-mBAiMD_gHCYwP5gQIjAJMAcwiTAHMgUwhzKFMIcxhTC-rgAOMD_oIh4
wgTAJML_QCgwwCTALMD_wMDAwCTALMAkxhTAJMD_cCgowCTEFMIEwP64ADjCJMIUwATC-nAoKMT_
uAA4wv5wKCjM-gCgoMz_gHCYwP5gQIjC-oBwmMD_wMDAwP4gYLDA-hgoUMAkwP7AwMDAJMD_GChQ
wP7AwMDEJMD_YECIwBTm-gCgoMAkwP7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ-fokwBTi
JMIczP6AcJjC-lhQSMIcyP4gYLDA-gCgoMIkxizEJMA8wBTCJMIswv5gQIjAJMAcyhTEHNAExv6g
iHjABMAkwATEJML_QCgwwATALMAEwCTALMAExv7AwMDAJMAswCTEFMAkwgTA-rgAOMIkwBTCBMIk
xATCFML_cCgowCTA-rgAOML_cCgoyP4AoKDC-oBwmMAUwCzAFMD_wMDAwP4gYLDA-hgoUMAkwP7A
wMDA-hgoUMAkwP7AwMDE-mBAiMIU5v4AoKDAJMD_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgo
UP36JMAU4iTCHMz_gHCYwv5YUEjCHMj_IGCwwP4AoKDCJMYsxCTAPMAUwiTCLML_YECIwCTAHMoU
xBzQBMb_oIh4wATAJMAExCTC-kAoMMAEwCzABMAkwCzABMb_wMDAwCTALMAkxBTAJMIEwP64ADjC
JMAUwgTCJMQEwhTC-nAoKMAkwP64ADjC-nAoKMj_AKCgwv6AcJjAFMAswBTA-sDAwMD_IGCwwP4Y
KFDAJMD_wMDAwP4YKFDAJMD_wMDAxP5gQIjCFOYcwCTAFMT_GChQwv7AwMDA-hgoUML_wMDAwP4Y
KFD9-eYkwBTAHMj_gHCYwP5YUEjGHMb_IGCwxizKJMD_AKCgwizEJMD_YECIwiTAHMoUwBzKBMT_
oIh4wATCJMD_QCgwwiTALMQExP4YKFDABMIswATQLMAExizCBMAkxATELMAkxv64ADjCJMT_wMDA
wgTAJMD_cCgoyv64ADjA-gCgoML_wMDAwP4gYLDA-hgoUMAkwP7AwMDAJMIUxP5gQIjCFOYcwCTA
FMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFD9-eYkwBTAHMj_gHCYwP5YUEjGHMb_IGCwxizKJMD_
AKCgwizEJMD_YECIwiTAHMoUwBzK-nAoKMT_oIh4wATCJMD_QCgwwiTALMQExP4YKFDABMIswATQ
LMAExizCBMAkxATELMAkxv64ADjCJMT_wMDAwgTAJMD_cCgoyv64ADjA-gCgoML_wMDAwP4gYLDA
-hgoUMAkwP7AwMDAJMIUxP5gQIjCFOYcwCTAFMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFD9-eIk
wv4AoKDGHML_gHCYwv5YUEjGHMT_IGCwwCzE-mBAiMIUwP6AcJjAFMIswCTAFMQsyCTAHND_cCgo
wP6giHjCBM7_GChQwP5AKDDGBMIcygTC-iBgsMb_AKCgwCzOBMYszATE-rgAOML_oIh4xP7AwMDE
JMAUwv5wKCjK-rgAOML_GChQwP4gYLDA-sDAwMD_YECIwhTELMIU5hzAJMAUxP4YKFDC-sDAwMD_
GChQwv7AwMDA-hgoUP394iTC-gCgoMYcwv6AcJjC-lhQSMYcxP4gYLDALMT_YECIwhTA-oBwmMAU
wizAJMAUxCzIJMAc0P5wKCjA-qCIeMIEzv4YKFDA-kAoMMYEwhzKBML_IGCwxv4AoKDALM4ExizM
BMT_uAA4wv6giHjE-sDAwMQkwBTC-nAoKMr_uAA4wv4YKFDA-iBgsMD_wMDAwP5gQIjCFMQswhTm
HMAkwBTE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ-f3cJMb_AKCgwhzI-oBwmML_WFBIxv4gYLDC
-mBAiML_gHCYwv5gQIjCFML_gHCYwBTEJMAUwjzAFMIswiTCHMr_cCgowP6giHjABML_QCgwwCTC
-rgAOMAc4P6AcJjCHMT_IGCwxBTWLMAUyP5wKCjA-kAoMMgEwizC-qCIeMT_uAA4wCTE-sDAwMIE
wP5wKCjI-rgAOML_IGCwwP5gQIjAFMQswhTmHMAkwBTE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ
-f3cJMb_AKCgwhzI-oBwmML_WFBIxv4gYLDC-mBAiML_gHCYwv5gQIjCFML_gHCYwBTEJMAUwjzA
FMIswiTCHMr_cCgowP6giHjABML_QCgwwCTC-rgAOMAc4P6AcJjCHMT_IGCwxBTWLMAUyP5wKCjA
-kAoMMgEwizC-qCIeMT_uAA4wCTE-sDAwMIEwP5wKCjI-rgAOML_IGCwwP5gQIjAFMQswhTmHMAk
wBTE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ4P5wKCjOFP3kJMT_AKCgxBzGFMT_gHCYwP5YUEjG
-hgoUMD_IGCwwP5gQIjC-oBwmMD_YECIwP6AcJjE-gCgoMIswBTEJMAUwjzAFMQswBTAJMIcwgTE
-qCIeML_QCgwxBzc-oBwmMAcxCzCHML_YECIwv4gYLDEFMz_gHCYwBTALMAUwizAFNL_QCgwyATC
-qCIeMD_wMDAwiTA-rgAOMIUwgTAJMAUwv5wKCjA-rgAOMD_cCgowv64ADjEFMD_YECIwhTmHMD_
IGCwwBTE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ4P5wKCjOFP3kJMT_AKCgxBzGFMT_gHCYwP5Y
UEjG-hgoUMD_IGCwwP5gQIjC-oBwmMD_YECIwP6AcJjE-gCgoMIswBTEJMAUwjzAFMQswBTAJMIc
wgTE-qCIeML_QCgwxBzc-oBwmMAcxCzCHML_YECIwv4gYLDEFMz_gHCYwBTALMAUwizAFNL_QCgw
yATC-qCIeMD_wMDAwiTA-rgAOMIUwgTAJMAUwv5wKCjA-rgAOMD_cCgowv64ADjEFMD_YECIwhTm
-gCgoMD_IGCwwP7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQ1v5AKDDA-nAoKMj_uAA4wP6g
iHjA-sDAwMD_cCgozv4YKFD92P4gYLDE-gCgoMQcxhTEHMAUwP6AcJjA-lhQSMQs0hTCLMAUxP4g
YLDAFNL_uAA4wP5AKDDA-qCIeMAsxBzi-oBwmMIcwizCHMIswP5gQIjA-iBgsMYUyP6AcJjAFMAs
wBTSHMAUyizA-nAoKMD_QCgwxATG-rgAOMIswP6giHjABML_wMDAwiTABML_cCgoxP64ADjE-mBA
iMAU5v4AoKDA-iBgsMD_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUNb_QCgwwP5wKCjI-rgA
OMD_oIh4wP7AwMDA-nAoKM7_GChQ-dj_IGCwxP4AoKDEHMYUxBzAFMD_gHCYwP5YUEjELNIUwizA
FMT_IGCwwBTS-rgAOMD_QCgwwP6giHjALMQc4v6AcJjCHMIswhzCLMD_YECIwP4gYLDGFMj_gHCY
wBTALMAU0hzAFMoswP5wKCjA-kAoMMQExv64ADjCLMD_oIh4wATC-sDAwMIkwATC-nAoKMT_uAA4
xP5gQIjAFOb_AKCgwP4gYLDA-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDS-kAoMMD_cCgo
xP6giHjABMD_uAA4xCTA-sDAwMD_cCgowiTEFMAkwATG-hgoUP3O-iBgsMIcwP4AoKDEHMgUwhzE
-oBwmML_WFBIxv4gYLDA-mBAiMD_gHCYwhTALMAUwCzAFMwkwBTM-rgAOMD_cCgowP5AKDDC-qCI
eMAswP4gYLDCHOL_gHCYwhzC-mBAiMD_gHCYwBzCLML_YECIwCTEHMIUwhzEFNYcwBTK-oBwmMIU
xgTG-kAoMMAEwv6giHjA-rgAOMIkwgTC-sDAwML_cCgoxCzEFOT_AKCgwP4gYLDA-sDAwMT_GChQ
wv7AwMDA-hgoUML_wMDAwP4YKFDSLMAExP6giHjABMD_uAA4xCTA-sDAwMD_cCgowiTEFMAkwATG
-hgoUP3O-iBgsMIcwP4AoKDEHMgUwhzE-oBwmML_WFBIxv4gYLDA-mBAiMD_gHCYwhTALMAUwCzA
FMwkwBTM-rgAOMD_cCgowP5AKDDC-qCIeMAswP4gYLDCHOL_gHCYwhzC-mBAiMD_gHCYwBzCLML_
YECIwCTEHMIUwhzEFNYcwBTK-oBwmMIUxgTG-kAoMMAEwv6giHjA-rgAOMIkwgTC-sDAwML_cCgo
xCzEFOT_AKCgwP4gYLDA-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDQBMr_oIh4wP64ADjE
-nAoKMIswP64ADjE-nAoKMIkwATAJMAExhT9xv4gYLDEHMD_AKCgwhzIFMIcxhTA-oBwmMD_WFBI
wCzCJML_IGCwwP5gQIjA-oBwmMIUwCzAFNAkwBTI-rgAOMD_cCgowP5AKDDA-qCIeMAswhTC-iBg
sMAc2v6AcJjCHMIsxBzC-mBAiMAUwCzA-oBwmML_YECIwiTEHMIUwBzGFNYcwBTK-oBwmMIUyizA
FMAEyP64ADjA-qCIeMAEwiTABMD_wMDAwiTA-nAoKMD_uAA4wP5wKCjC-rgAOMAU4v4AoKDA-iBg
sMD_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUND_cCgoyv6giHjA-rgAOMT_cCgowv5AKDDA
-rgAOMT_cCgowiTABMAkwATGFP3G-iBgsMQcwP4AoKDCHMgUwhzGFMD_gHCYwP5YUEjALMIkwv4g
YLDA-mBAiMD_gHCYwhTALMAU0CTAFMj_uAA4wP5wKCjA-kAoMMD_oIh4wCzCFML_IGCwwBza-oBw
mMIcwizEHML_YECIwBTALMD_gHCYwv5gQIjCJMQcwhTAHMYU1hzAFMr_gHCYwhTKLMAUwATI-rgA
OMD_oIh4wATCJMAEwP7AwMDCJMD_cCgowP64ADjA-nAoKML_uAA4wBTi-gCgoMD_IGCwwP7AwMDE
JMD_GChQwP7AwMDA-hgoUML_wMDAwP4YKFDO-nAoKML_QCgwwP6giHjABML_uAA4wBTI-nAoKMAs
xv64ADjA-nAoKMIswATA-rgAOMD_wMDAwgTA-nAoKML_GChQ-P4gYLDEHMD_AKCgxBzGFMQcyP6A
cJjI-lhQSML_IGCwwCzEFMAswBTQJMAUxATC-qCIeMAEwv5AKDDAFMb_IGCwwBzWJMD_gHCYwhzC
LMIcxP5gQIjAFMAswP6AcJjC-mBAiMIcwCTEHMIUwBzEFNgcwBTCHMQUwP6AcJjCFMoswBTGBMD_
QCgwwgTALMD_uAA4yP6giHjCBML_wMDAwP5wKCjC-rgAOMAU3v4AoKDA-iBgsMD_wMDAxCTA-hgo
UMD_wMDAwP4YKFDC-sDAwMD_GChQzv5wKCjCLMD_oIh4wATC-rgAOMAUyP5wKCjALMb_uAA4wP5w
KCjCLMAEwP64ADjA-sDAwMIEwP5wKCjC-hgoUPz_IGCwxBzA-gCgoMQcxhTEHMj_gHCYyP5YUEjC
-iBgsMAsxBTALMAU0CTAFMQEwv6giHjABML_QCgwwBTG-iBgsMAc1iTA-oBwmMIcwizCHMT_YECI
wBTALMD_gHCYwv5gQIjCHMAkxBzCFMAcxBTYHMAUwhzEFMD_gHCYwhTKLMAUxgTA-kAoMMIEwCzA
-rgAOMj_oIh4wgTC-sDAwMD_cCgowv64ADjAFN7_AKCgwP4gYLDA-sDAwMQkwP4YKFDA-sDAwMD_
GChQwv7AwMDA-hgoUMr_cCgoxP6giHjALMAEwhTULMj_uAA4wv5wKCjA-sDAwMAkwATA-rgAOMD_
cCgoxP4YKFD0-iBgsMIcwv4AoKDCHMgUwhzM-oBwmMQUwv4AgFDA-lhQSMD_IGCwwCzEFMAswBTQ
JMAUwP5wKCjG-qCIeMAUzP4gYLDCHMwkwCzCJMAswhzCLMIcxhTA-mBAiMD_gHCYwv5gQIjCHMAs
wCTEHMAUwBzCFNocwhTK-oBwmMIUyizCFMj_wMDAwP5AKDDEBML_oIh4wP64ADjCJMIUxP5wKCjE
-rgAOMAU2v4AoKDA-iBgsMD_wMDAxCTA-hgoUMD_wMDAwP4YKFDC-sDAwMD_GChQyv5wKCjE-qCI
eMAswATCFNQsyP64ADjC-nAoKMD_wMDAwCTABMD_uAA4wP5wKCjE-hgoUPT_IGCwwhzC-gCgoMIc
yBTCHMz_gHCYxBTC-gCAUMD_WFBIwP4gYLDALMQUwCzAFNAkwBTA-nAoKMb_oIh4wBTM-iBgsMIc
zCTALMIkwCzCHMIswhzGFMD_YECIwP6AcJjC-mBAiMIcwCzAJMQcwBTAHMIU2hzCFMr_gHCYwhTK
LMIUyP7AwMDA-kAoMMQEwv6giHjA-rgAOMIkwhTE-nAoKMT_uAA4wBTa-gCgoMD_IGCwwP7AwMDE
-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQyP5wKCjE-qCIeMAEwhTeLML_uAA4xP5wKCjC-rgAOMIk
wP5wKCjEFO7_IGCwwhzC-gCgoMQcxhTCHMwUwv6AcJjCFML_AIBQwv5YUEjA-iBgsMD_YECIwP6A
cJjCFMAswBTQ-nAoKML_GChQwATA-gCgoNIkwhzAJMYsyBTAJMQcwCzAHMQUwv5gQIjCHMAUwCzA
HMAswiTEHMAUwBzAFNgcxhTM-oBwmMAUzCzC-mBAiMD_gHCYwhTA-sDAwMD_YECIwv5AKDDEBML_
uAA4wP6giHjEBMIkwP5wKCjE-rgAOMAU2P4AoKDA-iBgsMD_wMDAxP4YKFDC-sDAwMD_GChQwv7A
wMDA-hgoUMj_cCgoxP6giHjABMIU3izC-rgAOMT_cCgowv64ADjCJMD_cCgoxBTu-iBgsMIcwv4A
oKDEHMYUwhzMFML_gHCYwhTC-gCAUML_WFBIwP4gYLDA-mBAiMD_gHCYwhTALMAU0P5wKCjC-hgo
UMAEwP4AoKDSJMIcwCTGLMgUwCTEHMAswBzEFML_YECIwhzAFMAswBzALMIkxBzAFMAcwBTYHMYU
zP6AcJjAFMwswv5gQIjA-oBwmMIUwP7AwMDA-mBAiML_QCgwxATC-rgAOMD_oIh4xATCJMD_cCgo
xP64ADjAFNgcwP4gYLDAFMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDI-nAoKML_oIh4wATCFOQs
xATC-rgAOML_cCgowiTABMQU5v4gYLDEHML_AKCgwhzGFMQcyv5YUEjAFMIcwP6AcJjAHMAUwP6Q
8EDA-gCAUMIkwP4gYLDALMQUwCzAFMz_cCgowv4YKFDA-kAoMMD_qFAwyv4AoKDMJMAcwCTE-oBw
mMQUxjzALMIkwBzEFML_YECIwhTCLMgkxBzEFMYkwBTA-oBwmMAUwCzCHMwUzCzAFMwswBTGLMD_
wMDAwP5gQIjEFMD_QCgwxgTC-qCIeMD_uAA4xCTC-nAoKMT_uAA4wBTUHMD_IGCwwBTE-hgoUML_
wMDAwP4YKFDC-sDAwMD_GChQyP5wKCjC-qCIeMAEwhTkLMQEwv64ADjC-nAoKMIkwATEFOb_IGCw
xBzC-gCgoMIcxhTEHMr_WFBIwBTCHMD_gHCYwBzAFMA0wP4AgFDCJMD_IGCwwCzEFMAswBTM-nAo
KML_GChQwP5AKDDA-qhQMMr_AKCgzCTAHMAkxP6AcJjEFMY8wCzCJMAcxBTC-mBAiMIUwizIJMQc
xBTGJMAUwP6AcJjAFMAswhzMFMwswBTMLMAUxizA-sDAwMD_YECIxBTA-kAoMMYEwv6giHjA-rgA
OMQkwv5wKCjE-rgAOMAU1BzA-iBgsMAUxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUMYEwP6giHjC
-nAoKMIU6izI-rgAOMD_cCgowiTABMQU4P4gYLDEHML_AKCgxBzGFMIcyBTE-lhQSMAcyBTA-gCA
UMQkwP4gYLDA-oBwmMIUzv5wKCjC-kAoMMYEwP6oUDDKFMokyBTOJMD_YECIwv6AcJjAJMAUwv5g
QIjCFMIsxhTALMAkxBzCFMQkxhTGHMAUzhzAFMb_gHCYwBTALMAU0izA-sDAwMAswv5gQIjAFMAk
wCzA-kAoMMYEwv6giHjC-rgAOMIUxP5wKCjA-rgAOMAU0hzA-iBgsMAUxP4YKFDC-sDAwMD_GChQ
wv7AwMDA-hgoUMYEwP6giHjC-nAoKMIU6izI-rgAOMD_cCgowiTABMQU4P4gYLDEHML_AKCgxBzG
FMIcyBTE-lhQSMAcyBTA-gCAUMQkwP4gYLDA-oBwmMIUzv5wKCjC-kAoMMYEwP6oUDDKFMokyBTO
JMD_YECIwv6AcJjAJMAUwv5gQIjCFMIsxhTALMAkxBzCFMQkxhTGHMAUzhzAFMb_gHCYwBTALMAU
0izA-sDAwMAswv5gQIjAFMAkwCzA-kAoMMYEwv6giHjC-rgAOMIUxP5wKCjA-rgAOMAU0hzA-gCg
oMD_wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUMT_cCgowiTCBMAU1v4QUFjAFNQsxgTA-rgA
OMIkxP5wKCjEFNr_IGCwxhzA-gCgoMIcxhTEHMgUwP5YUEjAFMAkxBzGFMD_AIBQxCTA-iBgsMD_
YECIwBTM-kAoMMD_oIh4wCzE-iBgsMD_qFAwwP5wKCjA-vjIqMIswP5AKDDCBMD_qFAwwATGFMIk
yBTKJMAUxP5gQIjC-oBwmMAkwhzAFML_YECIwBzALMIcwCzCJMIcwBTAHMAUwiTEHMIU2BzCFMT_
gHCYwBTY-sDAwMD_YECIwP6AcJjCFMAkwP5gQIjAFMT_QCgwxgTA-qCIeMD_uAA4wCTAFML_cCgo
whTSHMD_AKCgwP7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQxATCJMIEwBTW-hBQWMAU1CzG
BMD_uAA4wiTE-nAoKMQU2v4gYLDGHMD_AKCgwhzGFMQcyBTA-lhQSMAUwCTEHMYUwP4AgFDEJMD_
IGCwwP5gQIjAFMz_QCgwwP6giHjALMT_IGCwwP6oUDDA-nAoKMD__MiowizA-kAoMMIEwP6oUDDA
BMYUwiTIFMokwBTE-mBAiML_gHCYwCTCHMAUwv5gQIjAHMAswhzALMIkwhzAFMAcwBTCJMQcwhTY
HMIUxP6AcJjAFNj_wMDAwP5gQIjA-oBwmMIUwCTA-mBAiMAUxP5AKDDGBMD_oIh4wP64ADjAJMAU
wv5wKCjCFNIcwP4AoKDA-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDEBMIkwATCFNb_EFBY
wBTYLMQEwP64ADjG-sDAwML_cCgoxP4YKFDS-iBgsMYcwP4AoKDEHML_WFBIwBzAFMIcyhTCJMD_
AIBQwBTAJMQcxBTABMQkwP4gYLDA-mBAiMAUyv5AKDDGFML_uAA4wCzA-vjIqMT_cCgowCzCBMD_
qFAwwATC-viAUMAEwhTAJMgUwv6oUDDCFMIkwBTG-mBAiMD_gHCYwP5gQIjAJMIcxBTALMgkwhzA
FMAcwBTAJMIcxhTWHMj_gHCYwhTY-sDAwMD_AKCgwCzC-sDAwMAkwP5gQIjAFMQswhTA-kAoMMIE
wP6giHjA-rgAOMIkwP5wKCjCFNIcwP4AoKDA-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDE
BMIkwATCFNb_EFBYwBTYLMQEwP64ADjG-sDAwML_cCgoxP4YKFDS-iBgsMYcwP4AoKDEHML_WFBI
wBzAFMIcyhTCJMD_AIBQwBTAJMQcxBTABMQkwP4gYLDA-mBAiMAUyv5AKDDGFML_uAA4wCzA-vjI
qMT_cCgowCzCBMD_qFAwwATC-viAUMAEwhTAJMgUwv6oUDDCFMIkwBTG-mBAiMD_gHCYwP5gQIjA
JMIcxBTALMgkwhzAFMAcwBTAJMIcxhTWHMj_gHCYwhTY-sDAwMD_AKCgwCzC-sDAwMAkwP5gQIjA
FMQswhTA-kAoMMIEwP6giHjA-rgAOMIkwP5wKCjCFNIcwP4AoKDA-sDAwMT_GChQwv7AwMDA-hgo
UML_wMDAwP4YKFDEBMAswP64ADjA-nAoKMAU1v4QUFjCFNwsxATA-rgAOMD_cCgowv7AwMDAJMAE
xP4YKFDQ-iBgsMQcwP4AoKDCHMb_WFBIwBTCHMoUwv6AcJjAFMD_AIBQxCTEHMIUwATG-iBgsMAU
yP5AKDDE-hgoUMD_cCgowP4AoKDE-rgAOMD__Miowv5wKCjALMYEyDzABMIUwiTCFMT_qFAwxBTA
JMAUxv6AcJjAFMD_YECIwiTEHMAsyiTCHMAUwBzKFNocwBTEHML_gHCYwBTILMAUzP7AwMDA-gCg
oMAswP5gQIjA-sDAwMAkwCzAFMQswhTC-kAoMMIEwP64ADjC-nAoKMD_oIh4wATAFNIcwP4AoKDA
-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDEBMAswP64ADjA-nAoKMAU1v4QUFjCFNwsxATA
-rgAOMD_cCgowv7AwMDAJMAExP4YKFDQ-iBgsMQcwP4AoKDCHMb_WFBIwBTCHMoUwv6AcJjAFMD_
AIBQxCTEHMIUwATG-iBgsMAUyP5AKDDE-hgoUMD_cCgowP4AoKDE-rgAOMD__Miowv5wKCjALMYE
yDzABMIUwiTCFMT_qFAwxBTAJMAUxv6AcJjAFMD_YECIwiTEHMAsyiTCHMAUwBzKFNocwBTEHML_
gHCYwBTILMAUzP7AwMDA-gCgoMAswP5gQIjA-sDAwMAkwCzAFMQswhTC-kAoMMIEwP64ADjC-nAo
KMD_oIh4wATAFNL_AKCgwv7AwMDE-hgoUML_wMDAwP4YKFDC-sDAwMD_GChQxATALMQU1v4QUFjG
FNwsxgTCJMIExBTK-iBgsMQcwv4AoKDCHMb_WFBIwhTAHMoUwv6AcJjA-gCAUMQ0wATAJMYcwBTG
BMD_IGCwwBTE-nAoKMD_QCgwxATCFMT_uAA4wv74yKjC-nAoKMAsxgTK-viAUMAEwhTAJMIUxP6o
UDDA-viAUMD_qFAwwBTAJMAUxv6AcJjG-mBAiMAkxBzAFMAsxCTEHMAUwBzGFN7_gHCYwBTELMAU
wCzAFNj_wMDAwP4AoKDALMD_YECIwP7AwMDAJMAswBTELMIUxv5AKDDCBMD_oIh4xBTS-gCgoML_
wMDAxP4YKFDC-sDAwMD_GChQwv7AwMDA-hgoUMQEwCzEFNb_EFBYxhTcLMYEwiTCBMQUyv4gYLDE
HML_AKCgwhzG-lhQSMIUwBzKFML_gHCYwP4AgFDENMAEwCTGHMAUxgTA-iBgsMAUxP5wKCjA-kAo
MMQEwhTE-rgAOML__Miowv5wKCjALMYEyv74gFDABMIUwCTCFMT_qFAwwP74gFDA-qhQMMAUwCTA
FMb_gHCYxv5gQIjAJMQcwBTALMQkxBzAFMAcxhTe-oBwmMAUxCzAFMAswBTY-sDAwMD_AKCgwCzA
-mBAiMD_wMDAwCTALMAUxCzCFMb_QCgwwgTA-qCIeMQU0v4AoKDC-sDAwMT_GChQwv7AwMDA-hgo
UML_wMDAwP4YKFDCBMIkwATCFNb_EFBYxBTgLMT_uAA4wP5wKCjE-sDAwMAExP4YKFDG-iBgsMQc
wP4AoKDCHMQUwP5YUEjGHMoUxP6AcJjA-gCAUMIswDTALMAkxBTGBMT_IGCwwBTA-nAoKMD_oIh4
wP5AKDDA-hgoUMAEwv4AoKDI-rgAOMAswP74yKjA-nAoKMAsyATCPMAExDzA-viAUMAEwhTA-iBg
sMAUxP6oUDDA-viAUMD_qFAwxBTM-oBwmML_YECIwCTEHMAsxCTEHMAUwBzAFMAcwhTe-oBwmMQU
xCzAFMIswBTALMIUzP7AwMDA-gCgoMAswP5gQIjA-sDAwMAkwCzAFMQswhTI-kAoMMIEwP64ADjA
-qCIeMAU0v4AoKDC-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDC-nAoKMIkwATCFNb_EFBY
xBTgLMT_uAA4wP5wKCjE-sDAwMAExP4YKFDG-iBgsMQcwP4AoKDCHMQUwP5YUEjGHMoUxP6AcJjA
-gCAUMIswDTALMAkxBTGBMT_IGCwwBTA-nAoKMD_oIh4wP5AKDDA-hgoUMAEwv4AoKDI-rgAOMAs
wP74yKjA-nAoKMAsyATCPMAExDzA-viAUMAEwhTA-iBgsMAUxP6oUDDA-viAUMD_qFAwxBTM-oBw
mML_YECIwCTEHMAsxCTEHMAUwBzAFMAcwhTe-oBwmMQUxCzAFMIswBTALMIUzP7AwMDA-gCgoMAs
wP5gQIjA-sDAwMAkwCzAFMQswhTI-kAoMMIEwP64ADjA-qCIeMAU0v4AoKDC-sDAwMT_GChQwv7A
wMDA-hgoUML_wMDAwP4YKFDC-nAoKMAkwATEFNj_EFBYwhTAPMAUyjzAFNIsxATC-sDAwMAEwCTA
BML_GChQwv4gYLDCHML_AKCgwhzEFML_gHCYwBTA-lhQSMIUwCTAHMQUwhzAFMI0wP4AgFDAFMAE
wBTAJMIUyATE-nAoKML_QCgwwP4YKFDCBMAUwP4gYLDG-gCgoMD_uAA4wv5wKCjA-vjIqMAEwCzI
BMI8wATEPMD__IBQwATCFMAkwBTE-qhQMMD__IBQwP6oUDDIFMr_gHCYwP5gQIjCJMQsxCTEHMAU
wBzEFMwcwhTc-oBwmMIUzCzAFMT_wMDAwP4AoKDALMD_YECIwP7AwMDAJMAswBTE-gCgoML_wMDA
yv5AKDDE-rgAOMAU0v4AoKDC-sDAwMT_GChQwv7AwMDA-hgoUML_wMDAwP4YKFDC-nAoKMD_oIh4
wATEFNj_EFBYwhTAPMAUyjzAFNIsxATC-sDAwMAEwCTABML_GChQwv4gYLDCHML_AKCgwhzEFML_
gHCYwBTA-lhQSMIUwCTAHMQUwhzAFMI0wP4AgFDAFMAEwBTAJMIUyATE-nAoKML_QCgwwP4YKFDC
BMAUwP4gYLDG-gCgoMD_uAA4wv5wKCjA-vjIqMAEwCzIBMI8wATEPMD__IBQwATCFMAkwBTE-qhQ
MMD__IBQwP6oUDDIFMr_gHCYwP5gQIjCJMQsxCTEHMAUwBzEFMwcwhTc-oBwmMIUzCzAFMT_wMDA
wP4AoKDALMD_YECIwP7AwMDAJMAswBTE-gCgoML_wMDAyv5AKDDE-rgAOMAU0v4AoKDC-sDAwMT_
GChQwCTA-sDAwMD_GChQwv7AwMDA-hgoUML_cCgowP6giHjABMIUzP4QUFjAFMY8wBTAPMoUxjzA
FNQsxATE-rgAOMD_cCgowP64ADjA-nAoKMD_IGCwwhzA-gCgoMQcxhTA-oBwmML_AIBQwhTABMD_
WFBIwBzAFMIcxCzCNMAEwBTABMAkxBTCJMAUwgTA-hgoUML_QCgwxP5wKCjAFMD_IGCwzP64ADjC
-qhQMMD__IBQwP5AKDDA-vjIqMAsxv5wKCjCPMAExDzABMT_AKCgwCTAFMD_qFAwwBTALMD__IBQ
xP6oUDDGFMj_gHCYwBTA-mBAiMIkwizCHMAkxBzAFMAcxBTE-oBwmMAUwCzCHMQUyP5g2PDAFNIs
wBTCLMAUxP5gQIjA-oBwmMT_wMDAwP4AoKDALMD_YECIwP7AwMDAJMAswBTE-gCgoMAswP7AwMDO
-kAoMMAEwBTS-gCgoML_wMDAxP4YKFDAJMD_wMDAwP4YKFDC-sDAwMD_GChQwgTA-qCIeMAEwhTM
-hBQWMAUxjzAFMA8yhTGPMAU1CzEBMT_uAA4wP5wKCjA-rgAOMD_cCgowP4gYLDCHMD_AKCgxBzG
FMD_gHCYwv4AgFDCFMAEwP5YUEjAHMAUwhzELMI0wATAFMAEwCTEFMIkwBTCBMD_GChQwv5AKDDE
-nAoKMAUwP4gYLDM-rgAOML_qFAwwP74gFDA-kAoMMD__MiowCzG-nAoKMI8wATEPMAExP4AoKDA
JMAUwP6oUDDAFMAswP74gFDE-qhQMMYUyP6AcJjAFMD_YECIwiTCLMIcwCTEHMAUwBzEFMT_gHCY
wBTALMIcxBTI-mDY8MAU0izAFMIswBTE-mBAiMD_gHCYxP7AwMDA-gCgoMAswP5gQIjA-sDAwMAk
wCzAFMT_AKCgwCzA-sDAwM7_QCgwwATAFNL_AKCgwv7AwMDE-hgoUMAkwP7AwMDAJMD_GChQwP7A
wMDA-hgoUMIEwv6giHjABMAUzP4QUFjAFMI8yBTOPMD_WFBIwDzAFNQsxATA-rgAOML_cCgowv64
ADjA-nAoKMAcwP4AoKDCHMoUwP6AcJjA-gCAUMAUxATAJMAUwhzGFMAswATCFMAEwCTEFMAkxBTA
-nAoKML_oIh4wP5AKDDA-lhQSMD_GChQwCTA-iBgsML_WFBIxP4gYLDE-rgAOML_qFAwwATA-kAo
MMQMwCzA-nAoKMgMwv74yKjCBMQkwP4AoKDA-qhQMMT__IBQyP6oUDDEFMb_gHCYwBTALML_YECI
wCTKHMIUwBzEFMT_gHCYwBTCLMIcxBTCHMAUxCzAFMQswBTILMAUyCzE-mBAiMD_wMDAwP4AoKDA
-oBwmMD_YECIwP7AwMDAJMAswBTE-gCgoMAswP7AwMDm-gCgoML_wMDAxP4YKFDAJMD_wMDAwCTA
-hgoUMD_wMDAwP4YKFDCBML_oIh4wATAFMz_EFBYwBTCPMgUzjzA-lhQSMA8wBTU-kAoMMQEwP64
ADjC-nAoKML_uAA4wP5wKCjAHMD_AKCgwhzKFMD_gHCYwP4AgFDAFMQEwCTAFMIcxhTALMAEwhTA
BMAkxBTAJMQUwP5wKCjC-qCIeMD_QCgwwP5YUEjA-hgoUMAkwP4gYLDC-lhQSMT_IGCwxP64ADjC
-qhQMMAEwP5AKDDEDMAswP5wKCjIDML__MiowgTEJMD_AKCgwP6oUDDE-viAUMj_qFAwxBTG-oBw
mMAUwCzC-mBAiMAkyhzCFMAcxBTE-oBwmMAUwizCHMQUwhzAFMQswBTELMAUyCzAFMgsxP5gQIjA
-sDAwMD_AKCgwP6AcJjA-mBAiMD_wMDAwCTALMAUxP4AoKDALMD_wMDA5v4AoKDC-sDAwMT_GChQ
wCTA-sDAwMAkwP4YKFDA-sDAwMD_GChQwgTC-rgAOMD_cCgowBTK-hBQWMIUxjzAFMA8wBTOPMD_
WFBIwDzCFNb_QCgwwv64ADjA-nAoKMT_oIh4wP64ADjA-nAoKMIcyv4AoKDC-oBwmMD_AIBQwjTA
BML_WFBIwBTAHMgUwCzAFMAEwBTABMAkzP5AKDDGJMD_IGCwwP5YUEjC-iBgsMD_WFBIxv4gYLDE
-rgAOML_4GgAwP5wKCjALMoMwCzABMIMxP74yKjABMQkwBTA-qhQMMD__IBQwP6oUDDA-viAUMr_
qFAwwhTG-oBwmMAUxCzA-mBAiMAkyBzCJMAcwhTAJMD_gHCYwBTKHMYUwBzAFNIswBTELMQUwizA
-mBAiML_gHCYwP7AwMDALML_YECIwBTAJMIUxCzCFOb_AKCgwv7AwMDE-hgoUMAkwP7AwMDAJMD_
GChQwP7AwMDA-hgoUMIEwv64ADjA-nAoKMAUyv4QUFjCFMY8wBTAPMAUzjzA-lhQSMA8whTW-kAo
MML_uAA4wP5wKCjE-qCIeMD_uAA4wP5wKCjCHMr_AKCgwv6AcJjA-gCAUMI0wATC-lhQSMAUwBzI
FMAswBTABMAUwATAJMz_QCgwxiTA-iBgsMD_WFBIwv4gYLDA-lhQSMb_IGCwxP64ADjC-uBoAMD_
cCgowCzKDMAswATCDMT__MiowATEJMAUwP6oUDDA-viAUMD_qFAwwP74gFDK-qhQMMIUxv6AcJjA
FMQswP5gQIjAJMgcwiTAHMIUwCTA-oBwmMAUyhzGFMAcwBTSLMAUxCzEFMIswP5gQIjC-oBwmMD_
wMDAwCzC-mBAiMAUwCTCFMQswhTm-gCgoML_wMDAxP4YKFDAJMD_wMDAwCTA-hgoUMD_wMDAwP4Y
KFDCBML_uAA4wP5wKCjAFMT_EFBYwBTAPMYUxDzIFMg8wv5YUEjCPMIU1ATC-rgAOMD_cCgowv6g
iHjABML_uAA4wP5wKCjCHMb_AKCgxP4AgFDANMAEwDTA-oBwmMD_WFBIxBzCJMAcwhTCBMYkyP5w
KCjA-hgoUMD_oIh4wP5AKDDA-lhQSNr_uAA4wv7gaADGLNAMwv74yKjA-nAoKMT_IGCwwP4AoKDA
-qhQMMD__IBQzv6oUDDCFMb_gHCYwBTELML_YECIwCTGHMIkwBzAFMIkwBTOHMQUwBzAFM7_YNjw
wBTI-oBwmMIUxCzAFMD_YECIwv7AwMDALMD_gHCYwP5gQIjAFMAkwhTELMIU5v4AoKDC-sDAwMT_
GChQwCTA-sDAwMAkwP4YKFDA-sDAwMD_GChQwgTC-rgAOMD_cCgowBTE-hBQWMAUwDzGFMQ8yBTI
PML_WFBIwjzCFNQEwv64ADjA-nAoKML_oIh4wATC-rgAOMD_cCgowhzG-gCgoMT_AIBQwDTABMA0
wP6AcJjA-lhQSMQcwiTAHMIUwgTGJMj_cCgowP4YKFDA-qCIeMD_QCgwwP5YUEja-rgAOML_4GgA
xizQDML__MiowP5wKCjE-iBgsMD_AKCgwP6oUDDA-viAUM7_qFAwwhTG-oBwmMAUxCzC-mBAiMAk
xhzCJMAcwBTCJMAUzhzEFMAcwBTO-mDY8MAUyP6AcJjCFMQswBTA-mBAiML_wMDAwCzA-oBwmMD_
YECIwBTAJMIUxCzCFOb_AKCgwP4YKFDA-sDAwMQkwhTAJMD_GChQwP7AwMDA-hgoUMIEwP6giHjA
-rgAOMAUxv4QUFjAFMI8xhTCPMYUwDzCFMI8whTAPMD_WFBIwDzCFNb_cCgowv64ADjC-nAoKML_
wMDAwv6giHjABMIcwv4AoKDCHMAUwP6AcJjANMD_AIBQwhTA-lhQSMQcwiTAHMAUxATGJMT_cCgo
wP6giHjABML_WFBI1v4AgFDG-rgAOML_cCgowP7gaADG-kAoMM4MwP6oUDDCBMQswBTALMD__IBQ
zv6oUDDCFND_YECIwv4gYLDGHMIkwBTCJMQU0BzA-oBwmMAcwBTaLMAUzP5gQIjA-sDAwMD_gHCY
wv5gQIjAFMAkwhTELMIU5v4AoKDA-hgoUMD_wMDAxCTCFMAkwP4YKFDA-sDAwMD_GChQwgTA-qCI
eMD_uAA4wBTG-hBQWMAUwjzGFMI8xhTAPMIUwjzCFMA8wP5YUEjAPMIU1v5wKCjC-rgAOML_cCgo
wv7AwMDC-qCIeMAEwhzC-gCgoMIcwBTA-oBwmMA0wP4AgFDCFMD_WFBIxBzCJMAcwBTEBMYkxP5w
KCjA-qCIeMAEwv5YUEjW-gCAUMb_uAA4wv5wKCjA-uBoAMb_QCgwzgzA-qhQMMIExCzAFMAswP74
gFDO-qhQMMIU0P5gQIjC-iBgsMYcwiTAFMIkxBTQHMD_gHCYwBzAFNoswBTM-mBAiMD_wMDAwP6A
cJjC-mBAiMAUwCTCFMQswhTm-gCgoML_wMDAxCTA-hgoUMD_wMDAwP4YKFDC-sDAwMD_GChQwv64
ADjA-nAoKMD_uAA4wBTE-hBQWMIUwDzEFMA8wBTEPMoUwjzI-lhQSMAUwjzCFND_IGCwwP5wKCjC
-qhQMMAEwP4AoKDA-sDAwML_oIh4wgTCHMT_WFBIwv4AgFDIJMQcwiTA-gCgoMY0wATCJMT_cCgo
wP5AKDDABMIk0v4AgFDMFMD_uAA4wP5wKCjC-uBoAML_qFAwxP5AKDDAPMAsxDzA-qhQMMT__Mio
wATA-iBgsMAswBTALMb__IBQwP6oUDDE-rgAOMIU0v6AcJjA-mBAiMIkxBzCJMAU3BzCFNb_YNjw
whTQ-sDAwMAswv6AcJjAFMAkwhTE-mBAiMD_AKCgwP7AwMDm-gCgoML_wMDAxCTA-hgoUMD_wMDA
wP4YKFDC-sDAwMD_GChQwgTA-nAoKMD_uAA4wBTE-hBQWMIUwDzEFMA8wBTEPMoUwjzI-lhQSMAU
wjzCFND_IGCwwP5wKCjC-qhQMMAEwP4AoKDA-sDAwML_oIh4wgTCHMT_WFBIwv4AgFDIJMQcwiTA
-gCgoMY0wATCJMT_cCgowP5AKDDABMIk0v4AgFDMFMD_uAA4wP5wKCjC-uBoAML_qFAwxP5AKDDA
PMAsxDzA-qhQMMT__MiowATA-iBgsMAswBTALMb__IBQwP6oUDDE-rgAOMIU0v6AcJjA-mBAiMIk
xBzCJMAU3BzCFNb_YNjwwhTQ-sDAwMAswv6AcJjAFMAkwhTE-mBAiMD_AKCgwP7AwMDm-gCgoML_
wMDAxCTA-hgoUMD_wMDAwCTA-hgoUMD_wMDAwP4YKFDE-kAoMMD_oIh4wBTE-hBQWMQUwDzSFMg8
wP4AgFDG-lhQSMA8xhTO-iBgsMT_cCgowizC-qCIeMT_qFAwwgTCHMT_gHCYwP4AgFDA-gCgoMAE
wizA-lhQSMQcwCTCHMIUwgTG-nAoKMD_oIh4wATA-kAoMMAEwP5YUEjQ-gCAUMQUwATEFMT_uAA4
wv5wKCjA-qhQMML_4GgAwizKPMIsxATC-rgAOMAUxizOFMz_gHCYwBTALML_YECIwP4gYLDEHMIk
wBTi-oBwmMAU3izAJMAUwP5gQIjA-oBwmMD_wMDAwP5gQIjEFMAkwhTE-gCgoML_wMDA5v4AoKDC
-sDAwMQkwP4YKFDA-sDAwMAkwP4YKFDA-sDAwMD_GChQxP5AKDDA-qCIeMAUxP4QUFjEFMA80hTI
PMD_AIBQxv5YUEjAPMYUzv4gYLDE-nAoKMIswv6giHjE-qhQMMIEwhzE-oBwmMD_AIBQwP4AoKDA
BMIswP5YUEjEHMAkwhzCFMIExv5wKCjA-qCIeMAEwP5AKDDABMD_WFBI0P4AgFDEFMAExBTE-rgA
OML_cCgowP6oUDDC-uBoAMIsyjzCLMQEwv64ADjAFMYszhTM-oBwmMAUwCzC-mBAiMD_IGCwxBzC
JMAU4v6AcJjAFN4swCTAFMD_YECIwP6AcJjA-sDAwMD_YECIxBTAJMIUxP4AoKDC-sDAwOb_AKCg
wv7AwMDE-gCgoML_wMDAwCTA-hgoUMD_wMDAwCTA-hgoUML_QCgwwP5wKCjALMAUxP4QUFjAFMA8
wBTAPMAUwDzEFMA8xBTEPMAUwDzCNMD_AIBQwP5YUEjEPMIUzCTA-iBgsMj_cCgowizC-qhQMMT_
wMDAwgTCHML_gHCYwP4AoKDC-gCAUMIswATA-lhQSMIUwCTCHMIUwgTE-kAoMMD_cCgowiTQ-gCA
UMAkwATEFM7_uAA4wv5wKCjGDMAswP6oUDDM-kAoMMD__MioxATA-uBoAMAUyP6oUDDE-viAUML_
uAA4wP6oUDDAFMz_gHCYwBTALML_YECIwP4gYLDCHMQkwBTIJMIU0P6AcJjAFMAswBTgJMAUwP5g
QIjC-sDAwMD_AKCgwCzC-sDAwMAkwhTE-gCgoMAswP7AwMDm-gCgoML_wMDAxP4AoKDC-sDAwMAk
wP4YKFDA-sDAwMAkwP4YKFDC-kAoMMD_cCgowCzAFMT_EFBYwBTAPMAUwDzAFMA8xBTAPMQUxDzA
FMA8wjTA-gCAUMD_WFBIxDzCFMwkwP4gYLDI-nAoKMIswv6oUDDE-sDAwMIEwhzC-oBwmMD_AKCg
wv4AgFDCLMAEwP5YUEjCFMAkwhzCFMIExP5AKDDA-nAoKMIk0P4AgFDAJMAExBTO-rgAOML_cCgo
xgzALMD_qFAwzP5AKDDA-vjIqMQEwP7gaADAFMj_qFAwxP74gFDC-rgAOMD_qFAwwBTM-oBwmMAU
wCzC-mBAiMD_IGCwwhzEJMAUyCTCFND_gHCYwBTALMAU4CTAFMD_YECIwv7AwMDA-gCgoMAswv7A
wMDAJMIUxP4AoKDALMD_wMDA5v4AoKDC-sDAwMT_AKCgwv7AwMDAJMIUwCTA-hgoUML_cCgowv6g
iHjAFML_EFBYwhTAPMAUwDzSFMY8wjTA-gCAUMD_WFBIxBTEPMIUwjzCJMA8wCTA-iBgsMT_AKCg
wP5wKCjC-kAoMML_qFAwwP6giHjA-sDAwMIkwATAHML_AKCgxP4AgFDG-lhQSMIcwCTCFMYEwP5w
KCjA-qCIeMD_QCgwwATA-lhQSMb_AIBQwCTGBMAkwATGFML_qFAwyP64ADjALMD_GChQwP5wKCjG
-kAoMMAMwCzEBMD_qFAwwv5AKDDE-vjIqMIEwv4AoKDI-qhQMML__IBQxv6oUDDCFM7_gHCYwP5g
QIjAFMD_IGCwwhzEJMAUwiTOFM7_gHCYwBTA-mDY8MAU3CTAFML_YECIwP7AwMDALMQUwCTCFMT_
AKCgwCzA-sDAwOb_AKCgwv7AwMDE-gCgoML_wMDAwCTCFMAkwP4YKFDCBML_oIh4wBTC-hBQWMIU
wDzAFMA80hTGPMI0wP4AgFDA-lhQSMQUxDzCFMI8wiTAPMAkwP4gYLDE-gCgoMD_cCgowv5AKDDC
-qhQMMD_oIh4wP7AwMDCJMAEwBzC-gCgoMT_AIBQxv5YUEjCHMAkwhTGBMD_cCgowP6giHjA-kAo
MMAEwP5YUEjG-gCAUMAkxgTAJMAExhTC-qhQMMj_uAA4wCzA-hgoUMD_cCgoxv5AKDDADMAsxATA
-qhQMML_QCgwxP74yKjCBML_AKCgyP6oUDDC-viAUMb_qFAwwhTO-oBwmMD_YECIwBTA-iBgsMIc
xCTAFMIkzhTO-oBwmMAUwP5g2PDAFNwkwBTC-mBAiMD_wMDAwCzEFMAkwhTE-gCgoMAswP7AwMDm
-gCgoML_wMDAxP4YKFDA-gCgoMD_wMDAwCTCFMAkwv4YKFDABML_uAA4wBTC-hBQWMIUwDzC-lhQ
SMA8zBTAPMIUxDzCNMD_AIBQwCTEFMI8zCTAPMAkwv4gYLDCPML_cCgowv5AKDDC-qhQMMD_wMDA
wP6giHjCBMIcwP4AoKDA-gCAUMAUwATC-oBwmMD_WFBIyhTA-hgoUMD_AKCgwP5AKDDA-qCIeML_
cCgowP5YUEjOFMAkxv4AgFDGFMD_qFAwxv74gFDC-uBoAMT_cCgoyv5AKDDADMAsxP6oUDDC-kAo
MMIMwP74yKjABMIUwATA-iBgsML_qFAwxv74gFDE-rgAOMD_qFAwwBTQ-oBwmMQkwBzEJMAUwP5g
QIjCJMQUwiTEFMz_gHCYwBTgJMAUxP7AwMDA-mBAiMQUwCTCFMQswhTm-gCgoML_wMDAxP4YKFDA
-gCgoMD_wMDAwCTCFMAkwv4YKFDA-nAoKML_uAA4wBTC-hBQWMIUwDzC-lhQSMA8zBTAPMIUxDzC
NMD_AIBQwCTEFMI8zCTAPMAkwv4gYLDCPML_cCgowv5AKDDC-qhQMMD_wMDAwP6giHjCBMIcwP4A
oKDA-gCAUMAUwATC-oBwmMD_WFBIyhTA-hgoUMD_AKCgwP5AKDDA-qCIeML_cCgowP5YUEjOFMAk
xv4AgFDGFMD_qFAwxv74gFDC-uBoAMT_cCgoyv5AKDDADMAsxP6oUDDC-kAoMMIMwP74yKjABMIU
wATA-iBgsML_qFAwxv74gFDE-rgAOMD_qFAwwBTQ-oBwmMQkwBzEJMAUwP5gQIjCJMQUwiTEFMz_
gHCYwBTgJMAUxP7AwMDA-mBAiMQUwCTCFMQswhTm-gCgoML_wMDAxCzA-gCgoMD_wMDAwCTCFMAk
xP4YKFDA-nAoKMD_uAA4wP5AKDDAFML_EFBYxv5YUEjAPMwUwDzEFMA8wBTAPMD_AIBQwiTEPMAU
wDzE-gCgoMD_GChQwDzEFMIkwv4gYLDAPMT_cCgowizC-qCIeML_qFAwwgTC-gCgoMD_AIBQxv5Y
UEjMFMD_QCgwxP5wKCjCJM7_AIBQwCTGBMYUwP6oUDDE-vjIqMT__IBQwv7gaADE-nAoKMj_QCgw
xgzALMD_qFAwxP5AKDDA-vjIqMIExP6oUDDE-rgAOMIswv74gFDEBMD_qFAwwBTO-oBwmMIUwP4g
YLDAHMT_YECIyCTAFMD_YNjwwBTCJMQUyv6AcJjAFOAkwBTE-sDAwMD_YECIwv6AcJjAFMAkwhTE
-mBAiMIU5v4AoKDC-sDAwMQswP4AoKDA-sDAwMAkwhTAJMT_GChQwP5wKCjA-rgAOMD_QCgwwBTC
-hBQWMb_WFBIwDzMFMA8xBTAPMAUwDzA-gCAUMIkxDzAFMA8xP4AoKDA-hgoUMA8xBTCJML_IGCw
wDzE-nAoKMIswv6giHjC-qhQMMIEwv4AoKDA-gCAUMb_WFBIzBTA-kAoMMT_cCgowiTO-gCAUMAk
xgTGFMD_qFAwxP74yKjE-viAUML_4GgAxP5wKCjI-kAoMMYMwCzA-qhQMMT_QCgwwP74yKjCBMT_
qFAwxP64ADjCLML__IBQxATA-qhQMMAUzv6AcJjCFMD_IGCwwBzE-mBAiMgkwBTA-mDY8MAUwiTE
FMr_gHCYwBTgJMAUxP7AwMDA-mBAiML_gHCYwBTAJMIUxP5gQIjCFOb_AKCgwv7AwMDE-gCgoMAc
wP7AwMDAJMD_AKCgwP7AwMDAJMb_cCgowP5AKDDA-qCIeMAswP4YKFDA-hBQWMb_WFBIwDzMFMA8
wBTAPMAUwjzC-gCAUMIkxDzA-gCgoMA8wv4YKFDEPMT_AKCgxv4YKFDAPMT_AKCgwP5wKCjCLML_
oIh4wP6oUDDA-sDAwMIEwv4AgFDE-lhQSMj_AKCgwv5AKDDE-qCIeMD_cCgowP5YUEjW-gCAUMAk
wATI-qhQMMT__Miowv74gFDI-uBoAMT_cCgoyP5AKDDKBMD_qFAwwgTA-vjIqMIExv5AKDDA-viA
UMT_qFAwwv74gFDC-kAoMMD_qFAwwBTQ-oBwmMAUwP4gYLDAHML_YECIyiTAFMgkxBTI-oBwmMAU
4CTAFMT_wMDAwP4AoKDA-mBAiMD_gHCYwP7AwMDAJMIUxP5gQIjA-gCgoMD_wMDA5v4AoKDC-sDA
wMT_AKCgwBzA-sDAwMAkwP4AoKDA-sDAwMAkxgTA-kAoMMD_oIh4wCzA-hgoUMD_EFBYxv5YUEjA
PMwUwDzAFMA8wBTCPML_AIBQwiTEPMD_AKCgwDzC-hgoUMQ8xP4AoKDG-hgoUMA8xP4AoKDA-nAo
KMIswv6giHjA-qhQMMD_wMDAwgTC-gCAUMT_WFBIyP4AoKDC-kAoMMT_oIh4wP5wKCjA-lhQSNb_
AIBQwCTABMj_qFAwxP74yKjC-viAUMj_4GgAxP5wKCjI-kAoMMoEwP6oUDDCBMD__MiowgTG-kAo
MMD__IBQxP6oUDDC-viAUML_QCgwwP6oUDDAFND_gHCYwBTA-iBgsMAcwv5gQIjKJMAUyCTEFMj_
gHCYwBTgJMAUxP7AwMDA-gCgoMD_YECIwP6AcJjA-sDAwMAkwhTE-mBAiMD_AKCgwP7AwMDm-gCg
oML_wMDAxP4AoKDC-sDAwMAkwP4AoKDA-sDAwMAkxgTC-rgAOMD_QCgwwP4QUFjI-lhQSMA8wCTA
PMj_GChQwDzEFMA8xP4AgFDCJMQ8wBTAPMIExDzU-gCgoML_cCgowizC-qhQMMD_wMDAwv6giHjA
BML_AIBQxP5YUEjEBMD_oIh4xP5wKCjC-lhQSND_AIBQwiTEBMr_AKCgwP64ADjALMD__Miowv74
gFDMBMD_4GgAxP5wKCjK-kAoMMQEyP74yKjC-viAUMD_qFAwwATC-kAoMMD__IBQxP6oUDDC-viA
UMD_QCgwwP6oUDDAFML_gHCYwhTILMAUwP4gYLDAHML_YECIyiTAFMb_gHCYwP5gQIjAJMQU6iTA
FMT_wMDAwP4AoKDC-oBwmMD_wMDAwCTCFMT_YECIwP4AoKDA-sDAwOb_AKCgwv7AwMDE-gCgoML_
wMDAwCTA-gCgoMD_wMDAwCTGBML_uAA4wP5AKDDA-hBQWMj_WFBIwDzAJMA8yP4YKFDAPMQUwDzE
-gCAUMIkxDzAFMA8wgTEPNT_AKCgwv5wKCjCLML_qFAwwP7AwMDC-qCIeMAEwv4AgFDE-lhQSMQE
wP6giHjE-nAoKML_WFBI0P4AgFDCJMQEyv4AoKDA-rgAOMAswP74yKjC-viAUMwEwP7gaADE-nAo
KMr_QCgwxATI-vjIqML__IBQwP6oUDDABML_QCgwwP74gFDE-qhQMML__IBQwP5AKDDA-qhQMMAU
wv6AcJjCFMgswBTA-iBgsMAcwv5gQIjKJMAUxv6AcJjA-mBAiMAkxBTqJMAUxP7AwMDA-gCgoML_
gHCYwP7AwMDAJMIUxP5gQIjA-gCgoMD_wMDA5v4AoKDC-sDAwMQcwP4AoKDA-sDAwMAcwhTAJMb_
EFBYwATC-kAoMMI8wv4YKFDAPMD_WFBIwDzAJMD_AIBQwDzAJMA8whTAPMgUyjzGBMY8yP4AoKDA
PMgEwBTC-nAoKMIswv6giHjE-rgAOMD_cCgowv4AgFDA-lhQSMQswv5wKCjA-qCIeMAEwv5YUEjc
-gCAUMAUwATG-rgAOML_qFAwwP74yKjA-viAUND_4GgAyP5AKDDA-nAoKMAswATC-vjIqMAExCzG
PML__IBQwP6oUDDABML_uAA4wP74gFDE-nAoKMAswP5AKDDA-qhQMMAUwv5gQIjC-oBwmMAUxizC
HML_GChQwP5gQIjC-oBwmMD_YECIwP6AcJjA-mBAiMD_IGCwwP4AoKDILMD_gHCYwCTEFOgkwBTE
-sDAwMD_AKCgwizA-sDAwMAkwhTE-gCgoML_wMDA5v4AoKDC-sDAwMQcwP4AoKDA-sDAwMAcwhTA
JMb_EFBYwATC-kAoMMI8wv4YKFDAPMD_WFBIwDzAJMD_AIBQwDzAJMA8whTAPMgUyjzGBMY8yP4A
oKDAPMgEwBTC-nAoKMIswv6giHjE-rgAOMD_cCgowv4AgFDA-lhQSMQswv5wKCjA-qCIeMAEwv5Y
UEjc-gCAUMAUwATG-rgAOML_qFAwwP74yKjA-viAUND_4GgAyP5AKDDA-nAoKMAswATC-vjIqMAE
xCzGPML__IBQwP6oUDDABML_uAA4wP74gFDE-nAoKMAswP5AKDDA-qhQMMAUwv5gQIjC-oBwmMAU
xizCHML_GChQwP5gQIjC-oBwmMD_YECIwP6AcJjA-mBAiMD_IGCwwP4AoKDILMD_gHCYwCTEFOgk
wBTE-sDAwMD_AKCgwizA-sDAwMAkwhTE-gCgoML_wMDA5v4AoKDC-sDAwMT_AKCgwv7AwMDAHMD_
AKCgwP7AwMDAJMb_EFBYwATE-kAoMMAEwDzE-lhQSMA8wCTC-gCAUMAkwjzI-hgoUMI8wCTABMAk
wgTAPMQkwv4AoKDCBMI8yiTAPMQUwATE-nAoKMIswv6giHjA-qhQMML_uAA4wP5wKCjC-gCAUMAk
wv5AKDDC-nAoKMAkwP5YUEjO-gCAUMAkyATAJMIEyBTA-rgAOMD_qFAwwv74yKjA-viAUNAEwP7g
aADA-qhQMMA8xP5AKDDC-nAoKMYswATC-vjIqMAEwCzCPML__IBQwP6oUDDABML_QCgwwv74gFDC
-kAoMML_qFAwwBTC-oBwmMAUwP5gQIjCFMT_gHCYwhzC-iBgsMD_YECIyiTAFMD_YNjwwBTG-oBw
mMD_YECIwCTCFMIkwBTE-oBwmM4UzCTAFMT_wMDAwP4AoKDCLMD_wMDAwCTCFMT_AKCgwP5gQIjA
-sDAwOb_AKCgwv7AwMDE-gCgoML_wMDAwBzA-gCgoMD_wMDAwCTG-hBQWMAExP5AKDDABMA8xP5Y
UEjAPMAkwv4AgFDAJMI8yP4YKFDCPMAkwATAJMIEwDzEJML_AKCgwgTCPMokwDzEFMAExP5wKCjC
LML_oIh4wP6oUDDC-rgAOMD_cCgowv4AgFDAJML_QCgwwv5wKCjAJMD_WFBIzv4AgFDAJMgEwCTC
BMgUwP64ADjA-qhQMML__MiowP74gFDQBMD_4GgAwP6oUDDAPMT_QCgwwv5wKCjGLMAEwv74yKjA
BMAswjzC-viAUMD_qFAwwATC-kAoMML__IBQwv5AKDDC-qhQMMAUwv6AcJjAFMD_YECIwhTE-oBw
mMIcwv4gYLDA-mBAiMokwBTA-mDY8MAUxv6AcJjA-mBAiMAkwhTCJMAUxP6AcJjOFMwkwBTE-sDA
wMD_AKCgwizA-sDAwMAkwhTE-gCgoMD_YECIwP7AwMDm-gCgoML_wMDAxP4AoKDC-sDAwMD_AKCg
wv7AwMDAJMAcwCTC-hBQWMIEwv64ADjA-qCIeMA8xP5YUEjAPMAkwv4AgFDAJMI8wiTAPML_GChQ
wCTEBMAkwgTAJMA8wATAJMz_AKCgwDzABMQkwDzCBMQ0wATC-nAoKML_QCgwwv6oUDDA-sDAwML_
uAA4wP5wKCjA-kAoMMYEwP64ADjAJM7_AIBQwCTIBMAkwgTI-gCgoML_uAA4wP6oUDDA-vjIqMD_
_IBQ1ATA-uBoAMb_QCgwwv5wKCjALMAExizABMD_qFAwwv5AKDDC-vjIqML__IBQwP6oUDDABMD_
QCgwxP74gFDA-kAoMML_qFAwwBTC-oBwmMAUwCzA-mBAiMD_gHCYwhTALMD_IGCwwBzCJMD_YECI
wP6AcJjA-mBAiMD_gHCYwP5gQIjA-oBwmMAkwBTKLMD_YECIwCTI-oBwmMAUwCzCFMwswBTCLMAU
yCzC-sDAwMD_AKCgwizA-sDAwMAkwhTE-gCgoMD_YECIwP7AwMDm-gCgoML_wMDAxP4AoKDC-sDA
wMD_AKCgwv7AwMDAJMAcwCTC-hBQWMIEwv64ADjA-qCIeMA8xP5YUEjAPMAkwv4AgFDAJMI8wiTA
PML_GChQwCTEBMAkwgTAJMA8wATAJMz_AKCgwDzABMQkwDzCBMQ0wATC-nAoKML_QCgwwv6oUDDA
-sDAwML_uAA4wP5wKCjA-kAoMMYEwP64ADjAJM7_AIBQwCTIBMAkwgTI-gCgoML_uAA4wP6oUDDA
-vjIqMD__IBQ1ATA-uBoAMb_QCgwwv5wKCjALMAExizABMD_qFAwwv5AKDDC-vjIqML__IBQwP6o
UDDABMD_QCgwxP74gFDA-kAoMML_qFAwwBTC-oBwmMAUwCzA-mBAiMD_gHCYwhTALMD_IGCwwBzC
JMD_YECIwP6AcJjA-mBAiMD_gHCYwP5gQIjA-oBwmMAkwBTKLMD_YECIwCTI-oBwmMAUwCzCFMws
wBTCLMAUyCzC-sDAwMD_AKCgwizA-sDAwMAkwhTE-gCgoMD_YECIwP7AwMDm-gCgoMAswP7AwMDE
-gCgoMAcwP7AwMDA-gCgoML_wMDAwP4AoKDCJML_EFBYwv4YKFDA-kAoMML_uAA4wP5wKCjAPML_
WFBIwP4AgFDIJMA8wiTAPMAkwBTAPMAkyATCJMAEwCTQPMAkwATAJMA8wgTENMAExP5wKCjA-qhQ
MMD_QCgwwP6giHjA-sDAwMAkwv6oUDDABMAkwP64ADjC-lhQSMj_AIBQwCTQ-gCgoMAEwCTABMoU
wv64ADjALMD__MiowP74gFDUBMD_4GgAxP74oADC-nAoKMD_QCgwwgTGLML__IBQwP6oUDDA-kAo
MMT__MiowP74gFDCBML_QCgwwv74gFDA-kAoMML_qFAwwBTC-oBwmMAUwCzA-mBAiML_gHCYwhTA
-iBgsML_GChQwCTA-mBAiMD_gHCYwP5gQIjEJML_AKCgyv6AcJjA-mBAiMAUwCTCLMAkwhTK-mDY
8MIUwv6AcJjCFMwswv7AwMDALMQUwCTCFMT_YECIwP4AoKDA-sDAwOb_AKCgwCzA-sDAwMT_AKCg
wP4oqPjA-sDAwMD_AKCgwv7AwMDA-gCgoMIkwv4QUFjC-hgoUMD_QCgwwv64ADjA-nAoKMA8wv5Y
UEjA-gCAUMgkwDzCJMA8wCTAFMA8wCTIBMIkwATAJNA8wCTABMAkwDzCBMQ0wATE-nAoKMD_qFAw
wP5AKDDA-qCIeMD_wMDAwCTC-qhQMMAEwCTA-rgAOML_WFBIyP4AgFDAJND_AKCgwATAJMAEyhTC
-rgAOMAswP74yKjA-viAUNQEwP7gaADE-vigAML_cCgowP5AKDDCBMYswv74gFDA-qhQMMD_QCgw
xP74yKjA-viAUMIEwv5AKDDC-viAUMD_QCgwwv6oUDDAFML_gHCYwBTALMD_YECIwv6AcJjCFMD_
IGCwwv4YKFDAJMD_YECIwP6AcJjA-mBAiMQkwv4AoKDK-oBwmMD_YECIwBTAJMIswCTCFMr_YNjw
whTC-oBwmMIUzCzC-sDAwMAsxBTAJMIUxP5gQIjA-gCgoMD_wMDA5v4AoKDALMD_wMDAxP4oqPjA
LMAUwCzA-gCgoMD_wMDAwP4QUFjA-hgoUMA8wP4AoKDAPML_GChQwATC-rgAOML_cCgowP4AgFDA
-lhQSMAEzjzCJMoExiTKBMQkxgTAJMA8wATQ-nAoKMD_qFAwwP5AKDDA-qCIeML_qFAwwCTALMAE
wv5YUEjG-gCAUMIkwgTAJMAEwCTG-gCgoMAEwiTABMgUxP64ADjALMD__IBQxP6oUDDG-viAUMj_
QCgwwATA-uBoAML__KAAwgzALMT_cCgoxv6oUDDA-viAUMD_qFAwwATALML_QCgwwP74yKjA-viA
UMD_qFAwwP5AKDDK-qhQMMAUxv6AcJjA-mBAiMD_gHCYwP5gQIjC-oBwmMD_IGCwyCzEFMAkwBTM
LMD_YECIwCTALMQkwhTK-oBwmM4UxCTEFMD_wMDAwCzEFMAkwhTE-gCgoML_wMDA5v4AoKDA-mBA
iMD_wMDAxP4oqPjALMAUwCzA-gCgoMD_wMDAwP4QUFjA-hgoUMA8wP4AoKDAPML_GChQwATC-rgA
OML_cCgowP4AgFDA-lhQSMAEzjzCJMoExiTKBMQkxgTAJMA8wATQ-nAoKMD_qFAwwP5AKDDA-qCI
eML_qFAwwCTALMAEwv5YUEjG-gCAUMIkwgTAJMAEwCTG-gCgoMAEwiTABMgUxP64ADjALMD__IBQ
xP6oUDDG-viAUMj_QCgwwATA-uBoAML__KAAwgzALMT_cCgoxv6oUDDA-viAUMD_qFAwwATALML_
QCgwwP74yKjA-viAUMD_qFAwwP5AKDDK-qhQMMAUxv6AcJjA-mBAiMD_gHCYwP5gQIjC-oBwmMD_
IGCwyCzEFMAkwBTMLMD_YECIwCTALMQkwhTK-oBwmM4UxCTEFMD_wMDAwCzEFMAkwhTE-gCgoML_
wMDA5v5gQIjCFMT_AKCgwP6AcJjA-sDAwMAswP4AoKDA-sDAwMD_EFBYwP4YKFDAPMT_WFBIwDzC
BML_uAA4wP5AKDDA-gCAUMw8wgTGJMA8wCTGBMwkwATQJMA8wATOLMD_cCgowizC-qhQMMgEwCTE
-gCAUMIkwgTEJMYExCTCBMb_AKCgwATAFML_uAA4wCzA-viAUMD_qFAwyP74gFDK-kAoMMD_qFAw
wAzA-uBoAMIcwizA-kAoMMb_cCgoxv6oUDDA-viAUMAEwP6oUDDA-kAoMMAEwP6oUDDA-viAUMD_
QCgwyP6oUDDCFMb_gHCYwhTA-mBAiMIUwP4gYLDAFMAkxBTW-oBwmMD_YECIwCTALMQkxBTc-oBw
mMAkxv7AwMDALMQUwP4AoKDC-sDAwMT_AKCgwP5gQIjA-sDAwOYswhTE-gCgoMD_gHCYwP7AwMDA
LMD_AKCgwP7AwMDA-hBQWMD_GChQwDzE-lhQSMA8wgTC-rgAOMD_QCgwwP4AgFDMPMIExiTAPMAk
xgTMJMAE0CTAPMAEzizA-nAoKMIswv6oUDDIBMAkxP4AgFDCJMIExCTGBMQkwgTG-gCgoMAEwBTC
-rgAOMAswP74gFDA-qhQMMj__IBQyv5AKDDA-qhQMMAMwP7gaADCHMIswP5AKDDG-nAoKMb_qFAw
wP74gFDABMD_qFAwwP5AKDDABMD_qFAwwP74gFDA-kAoMMj_qFAwwhTG-oBwmMIUwP5gQIjCFMD_
IGCwwBTAJMQU1v6AcJjA-mBAiMAkwCzEJMQU3P6AcJjAJMb_wMDAwCzEFMD_AKCgwv7AwMDE-gCg
oMD_YECIwP7AwMDmLMD_AKCgwP7AwMDE-oBwmMIUwP4QUFjA-gCgoMD_wMDAwDzA-hgoUMI8wv5Y
UEjAPMQEwP5AKDDA-qCIeMAEwP4AgFDKPMgEyv5YUEjEBMYkxgTeLMb_cCgowCzC-qCIeMIswP6o
UDDABML_WFBIxP4AgFDAJMD_AKCgwATAFMQkwgTGJMAEzBTC-rgAOMIsxP74yKjC-viAUM7_qFAw
wAzA-uBoAMIcwjzA-nAoKMD_QCgwxgTG-viAUMAEwP6oUDDCBMD__IBQwP5AKDDABMAsxv6oUDDA
FMj_gHCYwhTALMD_YECIwBTiLML_IGCwwCzEJMYU0v5g2PDAFMT_gHCYwiTE-sDAwMD_AKCgwizA
-sDAwMD_AKCgwCTA-sDAwMT_YECIwhTmLMD_AKCgwP7AwMDE-oBwmMIUwP4QUFjA-gCgoMD_wMDA
wDzA-hgoUMI8wv5YUEjAPMQEwP5AKDDA-qCIeMAEwP4AgFDKPMgEyv5YUEjEBMYkxgTeLMb_cCgo
wCzC-qCIeMIswP6oUDDABML_WFBIxP4AgFDAJMD_AKCgwATAFMQkwgTGJMAEzBTC-rgAOMIsxP74
yKjC-viAUM7_qFAwwAzA-uBoAMIcwjzA-nAoKMD_QCgwxgTG-viAUMAEwP6oUDDCBMD__IBQwP5A
KDDABMAsxv6oUDDAFMj_gHCYwhTALMD_YECIwBTiLML_IGCwwCzEJMYU0v5g2PDAFMT_gHCYwiTE
-sDAwMD_AKCgwizA-sDAwMD_AKCgwCTA-sDAwMT_YECIwhTmLMD_AKCgwP7AwMDE-oBwmMIUwP4Q
UFjA-gCgoMD_wMDAwDzA-lhQSMD_GChQwCTAPMAkwDzGBML_oIh4wATCPNT_AIBQyv5YUEjCBMIk
wATEJMYE1v5AKDDC-qCIeMAswv5wKCjCLMIkwCzA-qhQMMIEwv5YUEjE-gCAUMT_AKCgwgTKJMIE
xhTABMQUwP64ADjCLML__Miowv74gFDO-qhQMMIMwP7gaADEHMIMwP5AKDDG-nAoKML__IBQwATA
-qhQMML__IBQwATCLMD_qFAwwgTA-kAoMMQU0P6AcJjA-mBAiMAU4v6AcJjC-iBgsMD_YECIxCTI
FNj_gHCYwhTCJMD_wMDAwCTA-gCgoMAswP7AwMDALMAkwBTE-mBAiMD_AKCgwP7AwMDmLMD_AKCg
wP7AwMDE-oBwmMIUwP4QUFjA-gCgoMD_wMDAwDzA-lhQSMD_GChQwCTAPMAkwDzGBML_oIh4wATC
PNT_AIBQyv5YUEjCBMIkwATEJMYE1v5AKDDC-qCIeMAswv5wKCjCLMIkwCzA-qhQMMIEwv5YUEjE
-gCAUMT_AKCgwgTKJMIExhTABMQUwP64ADjCLML__Miowv74gFDO-qhQMMIMwP7gaADEHMIMwP5A
KDDG-nAoKML__IBQwATA-qhQMML__IBQwATCLMD_qFAwwgTA-kAoMMQU0P6AcJjA-mBAiMAU4v6A
cJjC-iBgsMD_YECIxCTIFNj_gHCYwhTCJMD_wMDAwCTA-gCgoMAswP7AwMDALMAkwBTE-mBAiMD_
AKCgwP7AwMDm-gCgoML_wMDAxP6AcJjCFMD_EFBYwP4AoKDA-sDAwMA8wP5YUEjAPML_AIBQyv64
ADjA-nAoKML_oIh4wATCPMD_AIBQwDzUBMj_WFBIwATOJMIE0v5wKCjA-kAoMMD_oIh4wATALML_
AIBQwP5wKCjALML_qFAwwP5AKDDAJMD_uAA4wv5wKCjA-rgAOML_qFAwwv4AgFDS-lhQSMAEwv4A
oKDEBMb_uAA4wizC-vjIqML__IBQ0P5AKDDA-qhQMMIMwP7gaADCHMIMwP5AKDDEBML_cCgowizA
BMD_qFAwwP74gFDABML_qFAwwv5AKDDABMD_qFAwwhTS-oBwmMD_YECIwBTG-oBwmMAUwCzAFNQs
wv4gYLDA-mBAiMQkwhTAJMIU0v6AcJjAFMIswiTAFML_wMDAwP4AoKDCLMD_wMDAwCzAJMAUxP5g
QIjA-gCgoMD_wMDA5v4AoKDC-sDAwMT_gHCYwhTA-hBQWMD_AKCgwP7AwMDAPMD_WFBIwDzC-gCA
UMr_uAA4wP5wKCjC-qCIeMAEwjzA-gCAUMA81ATI-lhQSMAEziTCBNL_cCgowP5AKDDA-qCIeMAE
wCzC-gCAUMD_cCgowCzC-qhQMMD_QCgwwCTA-rgAOML_cCgowP64ADjC-qhQMML_AIBQ0v5YUEjA
BML_AKCgxATG-rgAOMIswv74yKjC-viAUND_QCgwwP6oUDDCDMD_4GgAwhzCDMD_QCgwxATC-nAo
KMIswATA-qhQMMD__IBQwATC-qhQMML_QCgwwATA-qhQMMIU0v6AcJjA-mBAiMAUxv6AcJjAFMAs
wBTULML_IGCwwP5gQIjEJMIUwCTCFNL_gHCYwBTCLMIkwBTC-sDAwMD_AKCgwizA-sDAwMAswCTA
FMT_YECIwP4AoKDA-sDAwOb_KKj4wP6AcJjAFMQcwCzAFMD_EFBYwP5YUEjAFMA8wCTA-gCAUMY8
yP64ADjA-nAoKML_oIh4wATE-gCAUMw8zATW-lhQSMIEyv5AKDDA-nAoKMD_oIh4wATCLMT_AIBQ
wv5wKCjCLMQkwP64ADjADML__IBQxP6oUDDA-lhQSML_AIBQwP4AoKDABMgkwgTGFMAExBTC-rgA
OMIswP74yKjC-viAUND_QCgwwv6oUDDADMD_4GgAwv74oADE-kAoMMI8wgTA-nAoKMQswP6oUDDA
BMD_QCgwwATA-qhQMMD__IBQwP5AKDDABMAU1v6AcJjA-mBAiMAUyv6AcJjCFMQswhTM-iBgsMD_
YECIwv6AcJjAJMIsxCTAFNYswiTAFMAswP7AwMDA-mBAiMD_AKCgwP6AcJjA-sDAwMAswCTAFMT_
AKCgwv7AwMDm-iio_MAswBTEHMAswBTA-hBQWMD_WFBIwBTAPMAkwP4AgFDGPMj_uAA4wP5wKCjC
-qCIeMAExP4AgFDMPMwE1v5YUEjCBMr_QCgwwP5wKCjA-qCIeMAEwizE-gCAUML_cCgowizEJMD_
uAA4wAzC-viAUMT_qFAwwP5YUEjC-gCAUMD_AKCgwATIJMIExhTABMQUwv64ADjCLMD__Miowv74
gFDQ-kAoMML_qFAwwAzA-uBoAML__KAAxP5AKDDCPMIEwP5wKCjELMD_qFAwwATA-kAoMMAEwP6o
UDDA-viAUMD_QCgwwATAFNb_gHCYwP5gQIjAFMr_gHCYwhTELMIUzP4gYLDA-mBAiML_gHCYwCTC
LMQkwBTWLMIkwBTALMD_wMDAwP5gQIjA-gCgoMD_gHCYwP7AwMDALMAkwBTE-gCgoML_wMDA5v4A
oKDALMD_wMDAxP5gQIjCFMD_EFBYwP5YUEjAFMD_AIBQxDzKBMT_uAA4wP5wKCjE-qCIeMD_QCgw
wgTA-gCAUNA8yATO-lhQSMAEzv5wKCjALMAEwCzG-gCAUMj_cCgowCzCDMT__IBQyP6oUDDAJML_
AIBQxP4AoKDEBMIUxgTEFMT_uAA4xP74gFDA-vjIqMIs0P5AKDDC-qhQMMIEwP7gaADCHML_QCgw
wjzAHMAEwP5wKCjELMIEwCzABMD_qFAwwATA-kAoMMAEwBTG-oBwmMAUzCzCFM4swhTC-mBAiMAU
wP6AcJjAFMj_IGCwwBTAJMYsxCTAFNYswiTAFMAswP7AwMDA-gCgoMIswP7AwMDALMD_AKCgwP7A
wMDE-gCgoMD_YECIwP7AwMDm-gCgoMD_gHCYwP7AwMDE-mBAiMIUwP4QUFjA-lhQSMAUwP4AgFDE
PMoExP64ADjA-nAoKMT_oIh4wP5AKDDCBMD_AIBQ0DzIBM7_WFBIwATO-nAoKMAswATALMb_AIBQ
yP5wKCjALMIMxP74gFDI-qhQMMAkwv4AgFDE-gCgoMQEwhTGBMQUxP64ADjE-viAUMD__MiowizQ
-kAoMML_qFAwwgTA-uBoAMIcwv5AKDDCPMAcwATA-nAoKMQswgTALMAEwP6oUDDABMD_QCgwwATA
FMb_gHCYwBTMLMIUzizCFML_YECIwBTA-oBwmMAUyP4gYLDAFMAkxizEJMAU1izCJMAUwCzA-sDA
wMD_AKCgwizA-sDAwMAswP4AoKDA-sDAwMT_AKCgwP5gQIjA-sDAwOYswhTELMD_EFBYwBTAPMD_
WFBIwBTA-gCAUMA8xATAPMIEwDzABMb_uAA4wP5wKCjC-rgAOML_cCgoxv4AgFDWPMQEwiTABMQk
wATI-nAoKMD_oIh4wv5AKDDG-gCAUMz_cCgowP64ADjALMAMwP74gFDMDMAEwP5YUEjC-gCAUML_
AKCg3v64ADjA-gAAAMAswP74yKjALMI8xCzK-kAoMML_qFAwwAzA-uBoAMIcwv5AKDDAPMAcwgTA
-nAoKMQswgTALMAEwP6oUDDA-kAoMMIEwP4AoKDI-oBwmMAUyizCFNYswBTA-mBAiMIUyv4gYLDE
FML_gHCYwhTYLMIkwBTALMD_wMDAwP4AoKDC-mBAiMD_wMDAwP6AcJjA-gCgoMD_wMDAxP5gQIjC
FOYswhTELMD_EFBYwBTAPMD_WFBIwBTA-gCAUMA8xATAPMIEwDzABMb_uAA4wP5wKCjC-rgAOML_
cCgoxv4AgFDWPMQEwiTABMQkwATI-nAoKMD_oIh4wv5AKDDG-gCAUMz_cCgowP64ADjALMAMwP74
gFDMDMAEwP5YUEjC-gCAUML_AKCg3v64ADjA-gAAAMAswP74yKjALMI8xCzK-kAoMML_qFAwwAzA
-uBoAMIcwv5AKDDAPMAcwgTA-nAoKMQswgTALMAEwP6oUDDA-kAoMMIEwP4AoKDI-oBwmMAUyizC
FNYswBTA-mBAiMIUyv4gYLDEFML_gHCYwhTYLMIkwBTALMD_wMDAwP4AoKDC-mBAiMD_wMDAwP6A
cJjA-gCgoMD_wMDAxP5gQIjCFOYswP4AoKDA-sDAwMT_EFBYwhTAPMIUwP4AgFDAPMQEwjzCNMAE
xjzC-nAoKML_uAA4wP5wKCjA-rgAOMD_cCgoxP5AKDDABMD_AIBQ1DzEBMT_WFBIwATGLMD_oIh4
wP5wKCjCLMT_AIBQ0v64ADjA-qhQMMAMwP74yKjE-viAUMoMwP4AoKDG-nAoKMgUyP64ADjE-qhQ
MMIEwCzGBMI8xP74gFDI-kAoMML_qFAwwAzA-uBoAMIcxDzAHMAEwv5wKCjG-kAoMMQEwizCFND_
gHCYwBTELMIU0CzAFMIswBTALMAUwP5gQIjA-oBwmMAUyP4gYLDCFMIswhTILMQUyCzCJMAUwCzA
-sDAwMD_AKCgwCTA-mBAiMD_wMDAwP4AoKDAJMD_wMDAxCzCFOYswP4AoKDA-sDAwMT_EFBYwhTA
PMIUwP4AgFDAPMQEwjzCNMAExjzC-nAoKML_uAA4wP5wKCjA-rgAOMD_cCgoxP5AKDDABMD_AIBQ
1DzEBMT_WFBIwATGLMD_oIh4wP5wKCjCLMT_AIBQ0v64ADjA-qhQMMAMwP74yKjE-viAUMoMwP4A
oKDG-nAoKMgUyP64ADjE-qhQMMIEwCzGBMI8xP74gFDI-kAoMML_qFAwwAzA-uBoAMIcxDzAHMAE
wv5wKCjG-kAoMMQEwizCFND_gHCYwBTELMIU0CzAFMIswBTALMAUwP5gQIjA-oBwmMAUyP4gYLDC
FMIswhTILMQUyCzCJMAUwCzA-sDAwMD_AKCgwCTA-mBAiMD_wMDAwP4AoKDAJMD_wMDAxCzCFOb_
AKCgwv7AwMDE-hBQWMIUwP4AgFDCFMAEwjzCBMI8wjTCBMr_cCgoyv5AKDDCBMT_AIBQzv4YKFDA
BMI8xATCLMD_oIh4xP5wKCjCLMb_AIBQ0v64ADjC-qhQMMD__Miowv74gFDQ-nAoKMb_WFBIxATE
-qhQMMg8wizUPML__IBQyP5AKDDC-qhQMMD_4GgAxBzG-rgAOML_cCgowP5AKDDCBMAsxgTALML_
AKCg2P6AcJjCFNYswBTALMAUwP5gQIjC-oBwmMAUyP4gYLDCLMIkwCzCFMAsxBTGLMIUwCzCJMAU
wv7AwMDA-gCgoMAkwP5gQIjA-sDAwMD_gHCYwCTAFMT_YECIwP4AoKDA-sDAwOb_AKCgwv7AwMDE
-hBQWMIUwP4AgFDCFMAEwjzCBMI8wjTCBMr_cCgoyv5AKDDCBMT_AIBQzv4YKFDABMI8xATCLMD_
oIh4xP5wKCjCLMb_AIBQ0v64ADjC-qhQMMD__Miowv74gFDQ-nAoKMb_WFBIxATE-qhQMMg8wizU
PML__IBQyP5AKDDC-qhQMMD_4GgAxBzG-rgAOML_cCgowP5AKDDCBMAsxgTALML_AKCg2P6AcJjC
FNYswBTALMAUwP5gQIjC-oBwmMAUyP4gYLDCLMIkwCzCFMAsxBTGLMIUwCzCJMAUwv7AwMDA-gCg
oMAkwP5gQIjA-sDAwMD_gHCYwCTAFMT_YECIwP4AoKDA-sDAwOb_EFBYwhTEPMIUwP4AgFDCFMAE
wjzCNMAEwjzCNMAEzv5wKCjI-rgAOMD_cCgowBTABML_QCgwwATA-gCAUM7_oIh4wjzA-nAoKMAk
wCzABMQsxv4AgFDI-lhQSMIExv64ADjC-nAoKMD_qFAwwP5AKDDA-viAUMD_qFAwwv74yKjA-viA
UMoMwATC-uBoAMAkwDzAJMIEwP6oUDDC-vjIqMz__IBQzv6oUDDEPMD__IBQyP5AKDDC-qhQMMD_
4GgAwhzG-rgAOMb_QCgwwP5wKCjCLMz_AKCg2P6AcJjAFNIswBTCLMAUwCzAFMAswBTALMD_YECI
wBTI-iBgsMD_gHCYwBTAJMAsxBTILMAUxizAFMb_wMDAwP4AoKDAJMAswP7AwMDALMAkwBTE-mBA
iMD_AKCgwP7AwMDm-hBQWMIUxDzCFMD_AIBQwhTABMI8wjTABMI8wjTABM7_cCgoyP64ADjA-nAo
KMAUwATC-kAoMMAEwP4AgFDO-qCIeMI8wP5wKCjAJMAswATELMb_AIBQyP5YUEjCBMb_uAA4wv5w
KCjA-qhQMMD_QCgwwP74gFDA-qhQMML__MiowP74gFDKDMAEwv7gaADAJMA8wCTCBMD_qFAwwv74
yKjM-viAUM7_qFAwxDzA-viAUMj_QCgwwv6oUDDA-uBoAMIcxv64ADjG-kAoMMD_cCgowizM-gCg
oNj_gHCYwBTSLMAUwizAFMAswBTALMAUwCzA-mBAiMAUyP4gYLDA-oBwmMAUwCTALMQUyCzAFMYs
wBTG-sDAwMD_AKCgwCTALMD_wMDAwCzAJMAUxP5gQIjA-gCgoMD_wMDA5v4QUFjCFMT_AIBQwhTA
BMIUwATCPMI0wATEPMAE1P5wKCjK-rgAOMD_cCgowP5AKDDA-qCIeMAUwCTABMD_uAA4wP4AgFDA
LMAkwCzA-nAoKMIUwCTALMr_AIBQzv5YUEjABMIkwATC-rgAOMIsxv6oUDDA-viAUML_qFAwwv74
gFDGDML_cCgowP7gaADGJMAExCzk-vjIqMAsxv5AKDDC-qhQMMD_4GgAxBzE-rgAOMT_QCgwwv5w
KCjALM7_AKCg2P6AcJjAFNIswBTCLMAUwCzAFMAswBTA-mBAiMQUwP6AcJjAFMIswhTA-iBgsMAU
wCzIFMIswhTO-sDAwMD_AKCgwCTALMD_wMDAwCzA-gCgoMD_wMDAxP4AoKDC-sDAwOb_EFBYwhTE
-gCAUMIUwATCFMAEwjzCNMAExDzABNT_cCgoyv64ADjA-nAoKMD_QCgwwP6giHjAFMAkwATA-rgA
OMD_AIBQwCzAJMAswP5wKCjCFMAkwCzK-gCAUM7_WFBIwATCJMAEwv64ADjCLMb_qFAwwP74gFDC
-qhQMML__IBQxgzC-nAoKMD_4GgAxiTABMQs5P74yKjALMb_QCgwwv6oUDDA-uBoAMQcxP64ADjE
-kAoMML_cCgowCzO-gCgoNj_gHCYwBTSLMAUwizAFMAswBTALMAUwP5gQIjEFMD_gHCYwBTCLMIU
wP4gYLDAFMAsyBTCLMIUzv7AwMDA-gCgoMAkwCzA-sDAwMAswP4AoKDA-sDAwMT_AKCgwv7AwMDm
-hBQWMD_AIBQwBTEBMIUwATANMAUwATANMA8wjTABOL_cCgozv6giHjABMAkwBTAJMD_QCgw0DzC
-gCAUMb_WFBIwATAJMAEwCTEBMIkwATA-rgAOMAMwCzA-qhQMML_QCgwwv6oUDDI-viAUMQMwv5w
KCjCHMT_4GgAwCTABMIs7v5AKDDC-qhQMMD_uAA4wDzCHMIExP5AKDDE-gCgoMAszhTY-oBwmMAU
xizAFNYswBTALMD_YECIxBTA-oBwmMgU5P7AwMDA-gCgoMD_IGCwwBTA-sDAwMAswP4AoKDA-sDA
wMT_AKCgwv7AwMDm-hBQWMD_AIBQwBTEBMIUwATANMAUwATANMA8wjTABOL_cCgozv6giHjABMAk
wBTAJMD_QCgw0DzC-gCAUMb_WFBIwATAJMAEwCTEBMIkwATA-rgAOMAMwCzA-qhQMML_QCgwwv6o
UDDI-viAUMQMwv5wKCjCHMT_4GgAwCTABMIs7v5AKDDC-qhQMMD_uAA4wDzCHMIExP5AKDDE-gCg
oMAszhTY-oBwmMAUxizAFNYswBTALMD_YECIxBTA-oBwmMgU5P7AwMDA-gCgoMD_IGCwwBTA-sDA
wMAswP4AoKDA-sDAwMT_AKCgwv7AwMDm-kAoMMD_WFBIwBTE-gCAUMIUwATANMAUwATANMD_EFBY
wjTABOr_cCgo2jzA-gCAUMI8wATAPMYEwiTCBMAkxATAJMIEwP64ADjADMAswP6oUDDC-kAoMMT_
qFAw0P5wKCjC-uBoAMIcwDzAJMAEwP74gFDM-qhQMND__IBQ0P5AKDDC-qhQMMAMwDzAHMT_uAA4
xP5AKDDCDMD_AKCgwCzE-nAoKMAsxv6AcJjCFNQswBTC-mDY8MAUwizAFNQswBTALMb_YECIwBTA
-oBwmMD_YECIwv6AcJjA-iBgsMAU2CzAFMb_wMDAwP4AoKDAJMAUwP7AwMDA-gCgoMAkwP7AwMDE
-gCgoML_wMDA5v5AKDDA-lhQSMAUxP4AgFDCFMAEwDTAFMAEwDTA-hBQWMI0wATq-nAoKNo8wP4A
gFDCPMAEwDzGBMIkwgTAJMQEwCTCBMD_uAA4wAzALMD_qFAwwv5AKDDE-qhQMND_cCgowv7gaADC
HMA8wCTABMD__IBQzP6oUDDQ-viAUND_QCgwwv6oUDDADMA8wBzE-rgAOMT_QCgwwgzA-gCgoMAs
xP5wKCjALMb_gHCYwhTULMAUwv5g2PDAFMIswBTULMAUwCzG-mBAiMAUwP6AcJjA-mBAiML_gHCY
wP4gYLDAFNgswBTG-sDAwMD_AKCgwCTAFMD_wMDAwP4AoKDAJMD_wMDAxP4AoKDC-sDAwOb_QCgw
wP5YUEjAFMQkwP4AgFDAFMAEwDTAFMAEwv4QUFjCNMAE-cA8wATEPMIEwDzCBMA8xgTCJMwEwCTA
-rgAOMD_cCgowCzA-qhQMMT_QCgwxP6oUDDOBMIkwP7gaADEJMAEwP74gFDG-qhQMNj__IBQzv5A
KDDC-qhQMMAMwDzCHMA8wP64ADjADMD_QCgwwgzA-gCgoMAsxP5wKCjA-qhQMMAUwP5AKDDCFML_
gHCYxBTQ-mBAiMAU0P6AcJjAFMwswBTALMQUwCzA-mBAiMT_gHCYwBTA-iBgsMAU4v7AwMDAJMQU
wP4AoKDC-sDAwMT_AKCgwP4oqPjA-sDAwOb_QCgwwP5YUEjAFMQkwP4AgFDAFMAEwDTAFMAEwv4Q
UFjCNMAE-cA8wATEPMIEwDzCBMA8xgTCJMwEwCTA-rgAOMD_cCgowCzA-qhQMMT_QCgwxP6oUDDO
BMIkwP7gaADEJMAEwP74gFDG-qhQMNj__IBQzv5AKDDC-qhQMMAMwDzC-vigAMA8wP64ADjADMD_
QCgwwgzA-gCgoMAsxP5wKCjA-qhQMMAUwP5AKDDCFML_gHCYxBTQ-mBAiMAU0P6AcJjAFMwswBTA
LMQUwCzA-mBAiMT_gHCYwBTA-iBgsMAU4v7AwMDAJMQUwP4AoKDC-sDAwMT_AKCgwP4oqPjA-sDA
wOb_QCgwwhTE-lhQSMAswBTA-gCAUMAkwBTABP3E-hBQWMAEwjzCBMo8wATANMAEwDzEBMAkwgTA
JMIEwCTABML_uAA4wizC-qhQMML_QCgwyP6oUDDK-nAoKMIkxP5AKDDAJMAEwP6oUDDW-viAUMz_
qFAwxv74gFDA-qhQMMD_QCgwwP6oUDDC-rgAOML_4GgAwP74oADAPMAEwv5AKDDCDMD_AKCgwCzE
-qhQMMAUwv5AKDDCFMb_gHCYwhTOLMAUwizAFMwswhTILMAUwCzA-mBAiMAUwv6AcJjA-mBAiMT_
gHCYwv4gYLDAFNYswhTG-sDAwMD_AKCgwiTA-sDAwMAkwhTE-gCgoMD_YECIwP7AwMDm-kAoMMIU
xP5YUEjALMAUwP4AgFDAJMAUwAT9xP4QUFjABMI8wgTKPMAEwDTABMA8xATAJMIEwCTCBMAkwATC
-rgAOMIswv6oUDDC-kAoMMj_qFAwyv5wKCjCJMT_QCgwwCTABMD_qFAw1v74gFDM-qhQMMb__IBQ
wP6oUDDA-kAoMMD_qFAwwv64ADjC-uBoAMAcwDzABML_QCgwwgzA-gCgoMAsxP6oUDDAFML_QCgw
whTG-oBwmMIUzizAFMIswBTMLMIUyCzAFMAswP5gQIjAFML_gHCYwP5gQIjE-oBwmML_IGCwwBTW
LMIUxv7AwMDA-gCgoMIkwP7AwMDAJMIUxP4AoKDA-mBAiMD_wMDA5izCFMT_QCgwwP4AgFDAFMAE
wP5YUEjAFMAE-cT_EFBYwATEPMAEyjzCNMIEwDTAPMIEwiTCBMIkwATC-rgAOML_cCgowCzC-qhQ
MMD_QCgwyAzEBMokwizK-qhQMMr__IBQxv5AKDDC-qhQMNj_uAA4wv7gaADEBMD_QCgwxP4AoKDA
LMT_qFAwwBTE-kAoMMIUwv6AcJjAFNQswBTA-mBAiML_gHCYwBTOLMAUyizAFMQswP5gQIjEFMD_
IGCwwhTU-mDY8MAUwP6AcJjAFMAswBTC-sDAwMD_AKCgxP7AwMDAJMIUxP5gQIjCFOYswhTE-kAo
MMD_AIBQwBTABMD_WFBIwBTABP3E-hBQWMAExDzABMo8wjTCBMA0wDzCBMIkwgTCJMAEwv64ADjC
-nAoKMAswv6oUDDA-kAoMMgMxATKJMIsyv6oUDDK-viAUMb_QCgwwv6oUDDY-rgAOML_4GgAxATA
-kAoMMT_AKCgwCzE-qhQMMAUxP5AKDDCFML_gHCYwBTULMAUwP5gQIjC-oBwmMAUzizAFMoswBTE
LMD_YECIxBTA-iBgsMIU1P5g2PDAFMD_gHCYwBTALMAUwv7AwMDA-gCgoMT_wMDAwCTCFMT_YECI
whTmLMIUxP5AKDDCFMAswP5YUEjAFMD_AIBQ1jTABOr_EFBYwATCPMAEzDzCNMAEwDzABMI8wiTC
BMAkwATG-rgAOML_cCgowCzMDMAExv64ADjA-nAoKMws2v6oUDDW-kAoMMT_qFAwwAzA-uBoAML_
uAA4wAzA-kAoMMT_AKCgwCzCFMYswhTE-oBwmMAUzCzAFMr_YECIwP6AcJjEFNgswBTELMD_YECI
xBTA-iBgsMIU2P6AcJjAFMAswhTA-sDAwMD_AKCgxP7AwMDA-mBAiMAkwBTE-iio_MD_AKCgwP7A
wMDmLMIUxP5AKDDCFMAswP5YUEjAFMD_AIBQ1jTABOr_EFBYwATCPMAEzDzCNMAEwDzABMI8wiTC
BMAkwATG-rgAOML_cCgowCzMDMAExv64ADjA-nAoKMws2v6oUDDW-kAoMMT_qFAwwAzA-uBoAML_
uAA4wAzA-kAoMMT_AKCgwCzCFMYswhTE-oBwmMAUzCzAFMr_YECIwP6AcJjEFNgswBTELMD_YECI
xBTA-iBgsMIU2P6AcJjAFMAswhTA-sDAwMD_AKCgxP7AwMDA-mBAiMAkwBTEHMD_AKCgwP7AwMDm
-kAoMMD_YECIwBTELMD_QCgwwBTALMD_WFBIwBTA-gCAUNQ0wgTgNMAExv4QUFjABNI8wjTABMA8
wATEPMAExCTABMIkwATC-rgAOML_cCgowCzQBMD_qFAwwP6giHjABMb_uAA4wP5wKCjC-kAoMNL_
qFAw2v5AKDDI-qhQMMAMwv74AEjA-rgAOMD_QCgwxv4AoKDMLMAU1v6AcJjGFMIswP5gQIjE-oBw
mMIUzizCFMIswBTCLMT_YECIwhTA-iBgsMIUwv6AcJjCFMz_YNjwwBTALMAUxv7AwMDA-gCgoMT_
wMDAwP5gQIjAJMAUxBzA-gCgoMD_wMDA5v5AKDDA-mBAiMAUxCzA-kAoMMAUwCzA-lhQSMAUwP4A
gFDU-pDwQMIE4DTABMb_EFBYwATSPMI0wATAPMAExDzABMQkwATCJMAEwv64ADjC-nAoKMAs0ATA
-qhQMMD_oIh4wATG-rgAOMD_cCgowv5AKDDS-qhQMNr_QCgwyP6oUDDADML__ABIwP64ADjA-kAo
MMb_AKCgzCzAFNb_gHCYxhTCLMD_YECIxP6AcJjCFM4swhTCLMAUwizE-mBAiMIUwP4gYLDCFML_
gHCYwhTM-mDY8MAUwCzAFMb_wMDAwP4AoKDE-sDAwMD_YECIwCTAFMQcwP4AoKDA-sDAwOb_QCgw
wP5gQIjAFMQswhTA-kAoMMIUwP4AgFDA-lhQSMAE0P6Q8EDCBMw0wATCNMAEyjTCBMT_EFBYwgTA
NMIEzDzABMI8xATGPMAkwgTK-rgAOMD_cCgowCzEDMAswgTALML_qFAwwP6giHjA-rgAOMD_cCgo
wv64ADjA-gCAUMD_cCgoxP5AKDDo-qhQMMD_QCgwyv6oUDDADML_QCgwyAzA-gCgoNb_gHCYwBTS
LMIUwv5gQIjC-oBwmMD_YECIwv6AcJjAFM4swhTALMAUwizE-mBAiMIUwP4gYLDA-oBwmNIUxizA
FMb_wMDAwP4AoKDCLMD_wMDAwP5gQIjAJMAUxBzA-gCgoMD_wMDA5v5AKDDA-mBAiMAUxCzCFMD_
QCgwwhTA-gCAUMD_WFBIwATQNMIEzDTABMI0wATKNMIExDzCBMA0wgTMPMAEwjzEBMY8wCTCBMr_
uAA4wP5wKCjALMQMwCzCBMAswv6oUDDA-qCIeMD_uAA4wP5wKCjC-rgAOMD_AIBQwP5wKCjE-kAo
MOj_qFAwwP5AKDDK-qhQMMAMwv5AKDDIDMD_AKCg1v6AcJjAFNIswhTC-mBAiML_gHCYwP5gQIjC
-oBwmMAUzizCFMAswBTCLMT_YECIwhTA-iBgsMD_gHCY0hTGLMAUxv7AwMDA-gCgoMIswP7AwMDA
-mBAiMAkwBTEHMD_AKCgwP7AwMDm-kAoMMIUxP5gQIjCFMD_QCgwwhTALMD_WFBIwv4AgFDgNMAE
wjTABMw0wATGPMAEwDTCBMQ8wATCPMAExDzEBMA8wgTAPMAkwgTO-nAoKMQMwCzI-qCIeMT_uAA4
wP5wKCjC-gCAUML_uAA4wP4AgFDCLPT_uAA4wAzALMgMwv4AoKDC-oBwmMQU6izG-mBAiML_gHCY
wBTSLMAUwizE-mBAiMIUwP4gYLDCFMj_gHCYyBTAJMIswBTG-sDAwMD_AKCgxP7AwMDALMAkwBTE
HMD_AKCgwP7AwMDm-kAoMMIUxP5gQIjCFMD_QCgwwhTALMD_WFBIwv4AgFDgNMAEwjTABMw0wATG
PMAEwDTCBMQ8wATCPMAExDzEBMA8wgTAPMAkwgTO-nAoKMQMwCzI-qCIeMT_uAA4wP5wKCjC-gCA
UML_uAA4wP4AgFDCLPT_uAA4wAzALMgMwv4AoKDC-oBwmMQU6izG-mBAiML_gHCYwBTSLMAUwizE
-mBAiMIUwP4gYLDCFMj_gHCYyBTAJMIswBTG-sDAwMD_AKCgxP7AwMDALMAkwBTEHMD_AKCgwP7A
wMDm-kAoMMIUxP5gQIjCFMAswP5AKDDAFMAswv5YUEjA-gCAUOA0wATCNMAEzDTABMY8wDTEBMA0
wATAPMIEwDzCBMI8xATAPMIEwjzCBMAkwATAJMAEwCTABMr_uAA4wP5wKCjCLML_oIh4wP6oUDDC
JMD_uAA4wP5wKCjC-gCAUMz_WFBIwCzA-kAoMOj_uAA4wAzS-gCgoMT_gHCYwhToLMIUwCzC-mBA
iMD_gHCYwBTQLMIUwizC-mBAiMD_gHCYwP5gQIjAFMD_IGCwwhTA-oBwmMoUwizAFMAkwizAFMb_
wMDAwP4AoKDE-sDAwMD_AKCgwCzA-sDAwMQcwP4AoKDA-sDAwOb_QCgwwhTE-mBAiMIUwCzA-kAo
MMAUwCzC-lhQSMD_AIBQ4DTABMI0wATMNMAExjzANMQEwDTABMA8wgTAPMIEwjzEBMA8wgTCPMIE
wCTABMAkwATAJMAEyv64ADjA-nAoKMIswv6giHjA-qhQMMIkwP64ADjA-nAoKML_AIBQzP5YUEjA
LMD_QCgw6P64ADjADNL_AKCgxP6AcJjCFOgswhTALML_YECIwP6AcJjAFNAswhTCLML_YECIwP6A
cJjA-mBAiMAUwP4gYLDCFMD_gHCYyhTCLMAUwCTCLMAUxv7AwMDA-gCgoMT_wMDAwP4AoKDALMD_
wMDAxBzA-gCgoMD_wMDA5v5AKDDCFMT_YECIwhTALMIUwP5AKDDC-lhQSML_AIBQ5DTABNg8wDTI
PMQEwDzABMA8wATGPMAEwDzABMA0wDzCBMYkwgTEJMAEwv64ADjCLML_qFAwwP5AKDDA-qCIeMQE
wP5wKCjC-gCAUMT_WFBIxATAJML_uAA4xCzY-qhQMMAMzP74oADCBMAMxv4AoKDI-oBwmMIUxCzA
FOQswP5gQIjE-oBwmMAUzCzEFMAswv5gQIjEFMD_IGCwwP6AcJjEFMQkwBTEJMAswCTAFMAswBTG
-sDAwMD_AKCgxP7AwMDA-gCgoML_wMDAxP4AoKDC-sDAwOb_QCgwwhTE-mBAiMIUwCzCFMD_QCgw
wv5YUEjC-gCAUOQ0wATYPMA0yDzEBMA8wATAPMAExjzABMA8wATANMA8wgTGJMIExCTABML_uAA4
wizC-qhQMMD_QCgwwP6giHjEBMD_cCgowv4AgFDE-lhQSMQEwCTC-rgAOMQs2P6oUDDADMwcwgTA
DMb_AKCgyP6AcJjCFMQswBTkLMD_YECIxP6AcJjAFMwsxBTALML_YECIxBTA-iBgsMD_gHCYxBTE
JMAUxCTALMAkwBTALMAUxv7AwMDA-gCgoMT_wMDAwP4AoKDC-sDAwMT_AKCgwv7AwMDm-mBAiMIU
xCzCFMAswhTA-kAoMML_WFBIwv4AgFDCJMAE_jzCBMA0xATAPMIEwDzABM48wATANMA8xATAJMYE
xCTEBMD_uAA4wizE-qCIeMAswCTC-qhQMMD_cCgowv4AgFDA-lhQSNL_uAA4yP5AKDDKDMgczATC
DMj_AKCgyP6AcJjAFNwswBTKLMQUwCzCFMoswBTALMAUwizA-mBAiMT_gHCYwP4gYLDAFMIswBTC
JMIsxCTAFMAkwBTK-sDAwMD_AKCgxP7AwMDALMD_AKCgwP7AwMDE-gCgoML_wMDA5v5gQIjCFMQs
whTALMIUwP5AKDDC-lhQSML_AIBQwiTABPo8wgTANMQEwDzCBMA8wATOPMAEwDTAPMQEwCTGBMQk
xATA-rgAOMIsxP6giHjALMAkwv6oUDDA-nAoKML_AIBQwP5YUEjS-rgAOMj_QCgwygzIHMwEwgzI
-gCgoMj_gHCYwBTcLMAUyizEFMAswhTKLMAUwCzAFMIswP5gQIjE-oBwmMD_IGCwwBTCLMAUwiTC
LMQkwBTAJMAUyv7AwMDA-gCgoMT_wMDAwCzA-gCgoMD_wMDAxP4AoKDC-sDAwOb_QCgwwhTE-mBA
iMIUwCzCFMD_QCgwxP5YUEjI-gCAUMg8wATaNMAE0DzABMA0xATAPMIEwDzABMI8wATIPMAEwDTA
PMAEwDzCBMAkxgTEJMQEwP64ADjCLMb_oIh4wgTA-qhQMMD_cCgowP5YUEjU-rgAOMYMyBzADMYc
0P7gaADEBMAMxv4AoKDI-oBwmMQU5izC-mBAiMAUwP6AcJjCFMgswBTALMAUwizA-mBAiMD_gHCY
wP5gQIjA-oBwmMD_IGCwwBTCLMAUxCTAFMQkxBTAJMAUwCTAFML_wMDAwCTA-gCgoML_wMDAwP5g
QIjA-oBwmMAUxP4AoKDC-sDAwOb_QCgwwhTE-mBAiMIUwCzCFMD_QCgwxP5YUEjI-gCAUMj_EFBY
wATaNMAE0DzABMA0xATAPMIEwDzABMI8wATIPMAEwDTAPMAEwDzCBMAkxgTEJMQEwP64ADjCLMb_
oIh4wgTA-qhQMMD_cCgowP5YUEjU-rgAOMYMyBzADMYc0P7gaADEBMAMxv4AoKDI-oBwmMQU5izC
-mBAiMAUwP6AcJjCFMgswBTALMAUwizA-mBAiMD_gHCYwP5gQIjA-oBwmMD_IGCwwBTCLMAUxCTA
FMQkxBTAJMAUwCTAFML_wMDAwCTA-gCgoML_wMDAwP5gQIjA-oBwmMAUxP4AoKDC-sDAwOb_QCgw
whTE-mBAiMIUwCzCFMD_QCgwxv5YUEjC-hBQWMAkwP4AgFDEPMAEwDzCBNg0wATOLMA8wATENMAE
wjzABNI8wjTAPMIEwDzCBMIkxATAJMIEwCTCBMD_uAA4wizE-qCIeMAswCTABMD_qFAwwP5wKCjA
-lhQSMz_uAA4yP5AKDDCDMIEwP7gaADAHNo8zAzE-gCgoOT_gHCYwBTOLMD_YECIwv6AcJjEFMYs
wBTALMIUwCzA-mBAiMD_gHCYwP5gQIjAFMb_gHCYwBTA-iBgsMAUwCTAFMYkwhTAJMQUwv7AwMDA
JMD_AKCgwCzA-sDAwMD_YECIwP4AoKDA-sDAwMT_AKCgwv7AwMDm-kAoMMIUxP5gQIjCFMAswhTA
-kAoMMb_WFBIwv4QUFjAJMD_AIBQxDzABMA8wgTYNMAEzizAPMAExDTABMI8wATSPMI0wDzCBMA8
wgTCJMQEwCTCBMAkwgTA-rgAOMIsxP6giHjALMAkwATA-qhQMMD_cCgowP5YUEjM-rgAOMj_QCgw
wgzCBMD_4GgAwBzaPMwMxP4AoKDk-oBwmMAUzizA-mBAiML_gHCYxBTGLMAUwCzCFMAswP5gQIjA
-oBwmMD_YECIwBTG-oBwmMAUwP4gYLDAFMAkwBTGJMIUwCTEFML_wMDAwCTA-gCgoMAswP7AwMDA
-mBAiMD_AKCgwP7AwMDE-gCgoML_wMDA5v5AKDDCFMT_YECIwhTALMIUwP5AKDDI-lhQSMb_AIBQ
wv4QUFjABMA8wgTqLMA8wCzCBMA0wATCPMAEwjTAPMA0wATIPMI0wDzABMA0wDzEBMAkxgTAJMAE
wiTCBMD_uAA4wizG-qhQMMAEwCzC-nAoKMAkwv64ADjK-kAoMMgMwv7gaADEHNQ80gzK-gCgoPD_
YECIwP6AcJjCFMAsxBTCLMAUwCzCFMD_YECIwhTALMAUwP4gYLDCFMD_gHCYxBTAJMAUwCTSFMD_
wMDAwCTA-gCgoML_wMDAwP5gQIjA-gCgoMD_wMDAxP4oqPjA-gCgoMD_wMDA5v5AKDDCFMT_YECI
whTALMIUwP5AKDDI-lhQSMb_AIBQwv4QUFjABMA8wgTqLMA8wCzCBMA0wATCPMAEwjTAPMA0wATI
PMI0wDzABMA0wDzEBMAkxgTAJMAEwiTCBMD_uAA4wizG-qhQMMAEwCzC-nAoKMAkwv64ADjK-kAo
MMgMwv7gaADE-vigANQ80gzK-gCgoPD_YECIwP6AcJjCFMAsxBTCLMAUwCzCFMD_YECIwhTALMAU
wP4gYLDCFMD_gHCYxBTAJMAUwCTSFMD_wMDAwCTA-gCgoML_wMDAwP5gQIjA-gCgoMD_wMDAxP4o
qPjA-gCgoMD_wMDA5izCFMQswhTALMIUwP5AKDDA-lhQSML_AIBQwCzEBMAkwATC-hBQWMAEwDzC
BNgsxATIPMAEwjzALMAEwDTABMI8wgTANMA8wDTABMI0wATEPMA0wDzANMI8xiTMBMIkxP64ADjC
LML_qFAwwP5AKDDA-qCIeMAswv5wKCjC-rgAOMQs0AzC-uBoAMT__KAA0DzEHMI80gTCDNL_AKCg
yv6AcJjAFND_YECIwBTA-oBwmMAUxCzCFMAswBTALMQUwCzEFMD_IGCwwizEFMAkwhTGJMAUxCTG
-sDAwMAkwP4AoKDC-sDAwMD_AKCgwv7AwMDE-iio_MD_AKCgwP7AwMDm-mBAiMIUxCzCFMAswhTA
-kAoMMD_WFBIwv4AgFDALMQEwCTABML_EFBYwATAPMIE2CzEBMg8wATCPMAswATANMAEwjzCBMA0
wDzANMAEwjTABMQ8wDTAPMA0wjzGJMwEwiTE-rgAOMIswv6oUDDA-kAoMMD_oIh4wCzC-nAoKML_
uAA4xCzQDML_4GgAxP74oADQPMQcwjzSBMIM0v4AoKDK-oBwmMAU0P5gQIjAFMD_gHCYwBTELMIU
wCzAFMAsxBTALMQUwP4gYLDCLMQUwCTCFMYkwBTEJMb_wMDAwCTA-gCgoML_wMDAwP4AoKDC-sDA
wMT_KKj4wP4AoKDA-sDAwOYswhTELMIUwCzCFMAswP5YUEjC-kAoMMb_EFBYwCTAPMD_AIBQwDzA
LMAEwDzABMgswDzABMoswATALMI8wCzABMA8xATAPMAswgTEPMIEwDTGPMA0wATAPMAEwDzANMA8
wDTABMA8yCTEBMIkwgTCJMT_uAA4wizI-qhQMML_cCgowv5AKDDWDMD_uAA4wP7gaADE-vigAMw8
wBzIPNQE0gzI-gCgoML_gHCYwBTQ-mBAiMAUwP6AcJjAFMYswBTALMAUwCzAFMAswBTA-mBAiMD_
gHCYwhTA-iBgsMAUyCTCFNIkwv7AwMDAJMD_AKCgwCzA-sDAwMD_AKCgwCzA-sDAwMT_KKj4wP4A
oKDA-sDAwOYswhTELMIUwCzCFMAswP5YUEjC-kAoMMb_EFBYwCTAPMD_AIBQwDzALMAEwDzABMgs
wDzABMoswATALMI8wCzABMA8xATAPMAswgTEPMIEwDTGPMA0wATAPMAEwDzANMA8wDTABMA8yCTE
BMIkwgTCJMT_uAA4wizI-qhQMML_cCgowv5AKDDWDMD_uAA4wP7gaADE-vigAMw8wBzIPNQE0gzI
-gCgoML_gHCYwBTQ-mBAiMAUwP6AcJjAFMYswBTALMAUwCzAFMAswBTA-mBAiMD_gHCYwhTA-iBg
sMAUyCTCFNIkwv7AwMDAJMD_AKCgwCzA-sDAwMD_AKCgwCzA-sDAwMT_KKj4wP4AoKDA-sDAwOYs
whTELMIUwCzCFMAswP5YUEjE-kAoMML_AIBQwP4QUFjCBMI8wCzABMA8wCzCBMQswgTIPMAswATA
PMAsxATAPMQEwizCBMY8wATANMY8wATCPMAEwDzABMA8wDTABMI8wgTAPMIEwCTCBMIkzP64ADjC
LMb_qFAwwATALMD_cCgowP64ADjA-kAoMNQMwgTA-uBoAMT__KAAzjzcBMQ8xgTMDMT_AKCg0v5g
QIjA-oBwmMIUyCzCFMAswBTALMgUwP4gYLDAFMgkwhTW-sDAwMAkwP4AoKDC-sDAwMAswhTE-iio
_MD_AKCgwP7AwMDmLMIUxCzCFMAswhTALMD_WFBIxP5AKDDC-gCAUMD_EFBYwgTCPMAswATAPMAs
wgTELMIEyDzALMAEwDzALMQEwDzEBMIswgTGPMAEwDTGPMAEwjzABMA8wATAPMA0wATCPMIEwDzC
BMAkwgTCJMz_uAA4wizG-qhQMMAEwCzA-nAoKMD_uAA4wP5AKDDUDMIEwP7gaADE-vigAM483ATE
PMYEzAzE-gCgoNL_YECIwP6AcJjCFMgswhTALMAUwCzIFMD_IGCwwBTIJMIU1v7AwMDAJMD_AKCg
wv7AwMDALMIUxP4oqPjA-gCgoMD_wMDA5v5gQIjCFMQswhTALMIUwCzA-lhQSMT_QCgwwv4AgFDA
-hBQWMIEwDzCLMAEwDzAJMQEwDzCLMAExDzEJMQ8wCzCPMAEwDzEBMA8wCzABMY8wgTCNMI8wATC
NMAEwDzABMA8wATCNMA8wjTABMA8wgTAJND_uAA4xizE-qCIeML_qFAwwP5wKCjC-kAoMNQMwv64
ADjA-uBoAMT__KAAyDzqBMI8wgTODMT_AKCgzv5gQIjA-oBwmMIUyCzCFMAswhTALMAUwCzAFML_
IGCwwBTCLMQUwCTAFNb_wMDAwCTA-gCgoML_wMDAwP4AoKDC-sDAwMT_AKCgwv7AwMDm-mBAiMIU
xCzCFMAswhTALMD_WFBIxP5AKDDC-gCAUMD_EFBYwgTAPMIswATAPMAkxATAPMIswATEPMQkxDzA
LMI8wATAPMQEwDzALMAExjzCBMI0wjzABMI0wATAPMAEwDzABMI0wDzCNMAEwDzCBMAk0P64ADjG
LMT_oIh4wv6oUDDA-nAoKML_QCgw1AzC-rgAOMD_4GgAxBzIPOoEwjzCBM4MxP4AoKDO-mBAiMD_
gHCYwhTILMIUwCzCFMAswBTALMAUwv4gYLDAFMIsxBTAJMAU1v7AwMDAJMD_AKCgwv7AwMDA-gCg
oML_wMDAxP4AoKDC-sDAwOYswhTE-mBAiMIUwCzCFMD_WFBIyP5AKDDA-gCAUMD_EFBYwgTAPMIk
yizAPMIswATCPMQkxgTAPMAswjzGBMA8wCzAPMAEwDzABMA8wATEPMA0wATENMAEwDzABMA8wATA
NMQEwDTCPMQkwP64ADjE-gCAUMAkwP64ADjCLMYEwizA-qCIeMD_qFAwxP5AKDDYDMIEwv7gaADE
HMQ8xBzGPNwE3AzE-gCgoMr_YECIwP6AcJjAFMoswhTCLMAUwCzA-mBAiMD_gHCYwBTCLMoUwP4g
YLDAFNb_wMDAwCTALMD_AKCgwP7AwMDALMD_AKCgwP7AwMDE-gCgoML_wMDA5izCFMT_YECIwhTA
LMIUwP5YUEjI-kAoMMD_AIBQwP4QUFjCBMA8wiTKLMA8wizABMI8xCTGBMA8wCzCPMYEwDzALMA8
wATAPMAEwDzABMQ8wDTABMQ0wATAPMAEwDzABMA0xATANMI8xCTA-rgAOMT_AIBQwCTA-rgAOMIs
xgTCLMD_oIh4wP6oUDDE-kAoMNgMwgTC-uBoAMQcxDzEHMY83ATcDMT_AKCgyv5gQIjA-oBwmMAU
yizCFMIswBTALMD_YECIwP6AcJjAFMIsyhTA-iBgsMAU1v7AwMDAJMAswP4AoKDA-sDAwMAswP4A
oKDA-sDAwMT_AKCgwv7AwMDmLMD_YECIwBTELMIUwCzCFMD_WFBIyP5AKDDAJMD_EFBYwP4AgFDA
LMA8wiTAPMIkwATAJMIswDzAJMQEwDzCJMYEwDzCLMA8wizAPMAEwDzALMA8wATAPMAEwDzABMQ8
xgTAPMAEwDzABMA8wATCNMg8wgTC-rgAOMAkwATGLMoEwCzA-qhQMML_QCgw3AzC-uBoAMYcxjzA
HMQ82ATKDMQE2AzC-gCgoMj_gHCYwBTMLMAUxCzCFMAswBTALMAUwCzEFMAswv4gYLDAFNj_wMDA
wCTA-gCgoML_wMDAwP4AoKDC-sDAwMT_AKCgwv7AwMDmLMD_YECIwBTELMIUwCzCFMD_WFBIyP5A
KDDAJMD_EFBYwP4AgFDALMA8wiTAPMIkwATAJMIswDzAJMQEwDzCJMYEwDzCLMA8wizAPMAEwDzA
LMA8wATAPMAEwDzABMQ8xgTAPMAEwDzABMA8wATCNMg8wgTC-rgAOMAkwATGLMoEwCzA-qhQMML_
QCgw3AzC-uBoAMYcxjzAHMQ82ATKDMQE2AzC-gCgoMj_gHCYwBTMLMAUxCzCFMAswBTALMAUwCzE
FMAswv4gYLDAFNj_wMDAwCTA-gCgoML_wMDAwP4AoKDC-sDAwMT_AKCgwv7AwMDmLMIUxP5gQIjC
FMAswhTA-lhQSMj_QCgwwCTA-hBQWMAkwCzAJMA8wCTAPMIkwP4AgFDAJMQswCTEPMAkzATAJMAE
wCzAPMAswgTAPMIEwDzCBMA8wATCPMwEwDzABMA8wATENMY8xATAJMT_uAA4wCzOBMIs4AzC-uBo
AMgcyDzYBMYM5ATCDML_AKCgxv6AcJjAFMwswBTGLMAUxCzAFMAsxBTALMIU2v7AwMDA-iBgsML_
AKCgwP7AwMDA-gCgoMAswP7AwMDE-gCgoML_wMDA5izCFMT_YECIwhTALMIUwP5YUEjI-kAoMMAk
wP4QUFjAJMAswCTAPMAkwDzCJMD_AIBQwCTELMAkxDzAJMwEwCTABMAswDzALMIEwDzCBMA8wgTA
PMAEwjzMBMA8wATAPMAExDTGPMQEwCTE-rgAOMAszgTCLOAMwv7gaADIHMg82ATGDOQEwgzC-gCg
oMb_gHCYwBTMLMAUxizAFMQswBTALMQUwCzCFNr_wMDAwP4gYLDC-gCgoMD_wMDAwP4AoKDALMD_
wMDAxP4AoKDC-sDAwOb_YECIwhTE-oBwmMIUwP5gQIjCFMD_WFBIyP5AKDDAJMD_AIBQwCTEBMAk
wP4QUFjABMAkwCzAJMAEwCTALMAkxATAJMIEwCTALMAkxjzALMAEwDzCBMI8xgTIPMgEwjzABMA8
wATCPMAExDTAPMQEwCTA-uBoAMAkwv64ADjALM4EwizE-nAoKMAs1gzCPMocwjzEHMA80P64ADjA
DMgsxv4AoKDIDNYEwAzAFMb_gHCYwBTMLMAUxizCFMIswBTALMgU3P7AwMDA-iBgsMQUwP4AoKDC
-sDAwMT_AKCgwv7AwMDm-mBAiMIUxP6AcJjCFMD_YECIwhTA-lhQSMj_QCgwwCTA-gCAUMAkxATA
JMD_EFBYwATAJMAswCTABMAkwCzAJMQEwCTCBMAkwCzAJMY8wCzABMA8wgTCPMYEyDzIBMI8wATA
PMAEwjzABMQ0wDzEBMAkwP7gaADAJML_uAA4wCzOBMIsxP5wKCjALNYMwjzKHMI8xBzAPND_uAA4
wAzILMb_AKCgyAzWBMAMwBTG-oBwmMAUzCzAFMYswhTCLMAUwCzIFNz_wMDAwP4gYLDEFMD_AKCg
wv7AwMDE-gCgoML_wMDA5v5gQIjCFMQswhTALMD_QCgwwBTA-lhQSMoswCTA-gCAUMAkxizC-hBQ
WMAswATCJM4EwCTALMAkxATALMI8wATAPMAEwjzGBMo8xATEPMoExDzGBMAkwP7gaADAJMT_uAA4
wCzOBMAswP5wKCjA-rgAOMIs1AzCBMA8zhzEPMYEwDzCBMAMxizQ-gCgoM4MzgTADMAEwBTE-oBw
mMAUzizAFMYswBTCLMAUwizGFMAsxhTS-sDAwMD_IGCwwP4YKFDAJMD_wMDAwCTA-gCgoMD_wMDA
xP4AoKDC-sDAwOb_YECIwhTELMIUwCzA-kAoMMAUwP5YUEjKLMAkwP4AgFDAJMYswv4QUFjALMAE
wiTOBMAkwCzAJMQEwCzCPMAEwDzABMI8xgTKPMQExDzKBMQ8xgTAJMD_4GgAwCTE-rgAOMAszgTA
LMD_cCgowP64ADjCLNQMwgTAPM4cxDzGBMA8wgTADMYs0P4AoKDODM4EwAzABMAUxP6AcJjAFM4s
wBTGLMAUwizAFMIsxhTALMYU0v7AwMDA-iBgsMD_GChQwCTA-sDAwMAkwP4AoKDA-sDAwMT_AKCg
wv7AwMDmLMD_YECIwBTELMIUwCzA-kAoMMAUwCzA-lhQSMgswP4AgFDCJML_EFBYwCTALMI8wCzA
BMI8wiTCBMAkwizABMIswCTAPMAswATALMA8wCzABMY8xgTKPMAEwDzSBMY8xATAJMD_4GgAwiTG
LMz_uAA4yCzWDMAEwDzMHMI8yATEDMQs2P4AoKDQDMwEwAzAFMT_gHCYwBTYLMIUwCzA-hgoUMD_
IGCwwP4AoKDALMgUwizCFMAszv7AwMDAJML_GChQwP7AwMDA-gCgoML_wMDAxP4AoKDA-iio_MD_
wMDA5izA-mBAiMAUxCzCFMAswP5AKDDAFMAswP5YUEjILMD_AIBQwiTC-hBQWMAkwCzCPMAswATC
PMIkwgTAJMIswATCLMAkwDzALMAEwCzAPMAswATGPMYEyjzABMA80gTGPMQEwCTA-uBoAMIkxizM
-rgAOMgs1gzABMA8zP74oADCPMgExAzELNj_AKCg0AzMBMAMwBTE-oBwmMAU2CzCFMAswP4YKFDA
-iBgsMD_AKCgwCzIFMIswhTALM7_wMDAwCTC-hgoUMD_wMDAwP4AoKDC-sDAwMT_AKCgwP4oqPjA
-sDAwOb_YECIwhTELMIUwCzA-lhQSMAUwP5AKDDA-gCAUMD_EFBYwCTCBMAswATCLMAEwDzAJMAs
wjzCBMI8wiTABMI8wCTALMA8wATALMAkwCzGPMAswDzABMAswATAPMAswDzABMA8wATCPMAEwDzQ
BMA8xATGPMQkwv7gaADEJMYszv64ADjCLMD_cCgowP6oUDDC-kAoMNIMxP64ADjEPM4EwgzALOD_
AKCgwCTEFMwMyATADMAUxP6AcJjAFMwswBTKLMAUwv4YKFDA-iBgsMD_AKCgwCzEFMIkwhTELMgU
wCzC-sDAwMD_AKCgwCTC-sDAwMD_AKCgwCTA-sDAwMT_AKCgwBzA-sDAwOb_YECIwhTELMIUwCzA
-lhQSMAUwP5AKDDA-gCAUMD_EFBYwCTCBMAswATCLMAEwDzAJMAswjzCBMI8wiTABMI8wCTALMA8
wATALMAkwCzGPMAswDzABMAswATAPMAswDzABMA8wATCPMAEwDzQBMA8xATGPMQkwv7gaADEJMYs
zv64ADjCLMD_cCgowP6oUDDC-kAoMNIMxP64ADjEPM4EwgzALOD_AKCgwCTEFMwMyATADMAUxP6A
cJjAFMwswBTKLMAUwv4YKFDA-iBgsMD_AKCgwCzEFMIkwhTELMgUwCzC-sDAwMD_AKCgwCTC-sDA
wMD_AKCgwCTA-sDAwMT_AKCgwBzA-sDAwOYswP5gQIjAFMQswhTALMD_WFBIwBTA-kAoMML_EFBY
wCTC-gCAUMA8wATCPMAEwDzABMAswjzABMAkwjzCJMAExDzALMAEwiTCLMo8wizABMA8wCzAPMAE
wDzALMAEwDzABMA8wATAPMQEwDzKBMA8wgTAPMYkwv7gaADEJMb_uAA4wCzOBMT_cCgowv6oUDDE
-kAoMM7_uAA4wAzCBMI8xgTIDMIs3iTI-gCgoNAMyBTE-oBwmMAUwCzCFMYswBTKLMAUxP4gYLDC
LMAUxCTCFM4swBTALML_wMDAwCzA-gCgoMAkwP7AwMDA-hgoUMD_AKCgwP7AwMDEHMIU5izA-mBA
iMAUxCzCFMAswP5YUEjAFMD_QCgwwv4QUFjAJML_AIBQwDzABMI8wATAPMAEwCzCPMAEwCTCPMIk
wATEPMAswATCJMIsyjzCLMAEwDzALMA8wATAPMAswATAPMAEwDzABMA8xATAPMoEwDzCBMA8xiTC
-uBoAMQkxv64ADjALM4ExP5wKCjC-qhQMMT_QCgwzv64ADjADMIEwjzGBMgMwizeJMj_AKCg0AzI
FMT_gHCYwBTALMIUxizAFMoswBTE-iBgsMIswBTEJMIUzizAFMAswv7AwMDALMD_AKCgwCTA-sDA
wMD_GChQwP4AoKDA-sDAwMQcwhTmLMIUxCzCFMD_YECIwP5YUEjAFMD_QCgwwv4QUFjAJMA8wP4A
gFDALMIEwDzALMI8wizAPMAEwCTCLMAkwATAJMA8wATAPMIEwjzCBMA8wCzGPMQswDzALMA8wATA
PMAswATAPNgEwDzEBMA8xCTC-uBoAMYkyizQ-rgAOML_cCgoxv6oUDDE-kAoMMwMxP64ADjMDMQs
5CTE-gCgoNQMxBTE-oBwmMAUwizEFMAswBTKLMAUxv4gYLDCFMQkwhTGJMAUzv7AwMDA-gCgoMT_
wMDAwCTA-gCgoMD_wMDAxBzCFOYswhTELMIUwP5gQIjA-lhQSMAUwP5AKDDC-hBQWMAkwDzA-gCA
UMAswgTAPMAswjzCLMA8wATAJMIswCTABMAkwDzABMA8wgTCPMIEwDzALMY8xCzAPMAswDzABMA8
wCzABMA82ATAPMQEwDzEJML_4GgAxiTKLND_uAA4wv5wKCjG-qhQMMT_QCgwzAzE-rgAOMwMxCzk
JMT_AKCg1AzEFMT_gHCYwBTCLMQUwCzAFMoswBTG-iBgsMIUxCTCFMYkwBTO-sDAwMD_AKCgxP7A
wMDAJMD_AKCgwP7AwMDEHMIU5v5gQIjCFMQswhTA-lhQSMIUwP5AKDDC-hBQWMAszjzELMA8wCzA
JMIswCTA-gCAUMAkwgTAJMA8wATCPMQswgTAPMAswDzELMQ8wATAPMAswATAPMAEwjzEBMA8yATA
PMIEwDzIJML_4GgAxiTMLND_uAA4xP5wKCjK-qhQMMD_QCgw0AzA-rgAOMQMxP4AoKDCLOQkxBTo
-oBwmMYUwCzCFM7_IGCwwhTAJMQUxiTAFMQkwhTG-sDAwMD_AKCgwCzAFMD_wMDAwCTA-gCgoMD_
wMDAxCTA-gCgoMD_wMDA5v5gQIjCFMQswhTA-lhQSMIUwP5AKDDC-hBQWMAszjzELMA8wCzAJMIs
wCTA-gCAUMAkwgTAJMA8wATCPMQswgTAPMAswDzELMQ8wATAPMAswATAPMAEwjzEBMA8yATAPMIE
wDzIJML_4GgAxiTMLND_uAA4xP5wKCjK-qhQMMD_QCgw0AzA-rgAOMQMxP4AoKDCLOQkxBTo-oBw
mMYUwCzCFM7_IGCwwhTAJMQUxiTAFMQkwhTG-sDAwMD_AKCgwCzAFMD_wMDAwCTA-gCgoMD_wMDA
xCTA-gCgoMD_wMDA5v5gQIjCFMQswhTA-lhQSMD_QCgwwBTALN4kxCzEJMb_EFBYxv4AgFDALMQE
wCzOPMAsxDzCLMQ83iTC-uBoAMgkzP64ADjALNIEwv5wKCjC-qhQMMD_uAA4wP5wKCjCLMD_QCgw
0AzG-gCgoMgswP64ADjALOAkwhTs-oBwmMQUwCzCFMz_IGCwyBTGJMAUwiTAFMAkxCzAJMAUwP7A
wMDA-gCgoMAswv7AwMDA-gCgoMAkwP7AwMDEJMD_AKCgwP7AwMDm-mBAiMIUxCzCFMD_WFBIwP5A
KDDAFMAs3iTELMQkxv4QUFjG-gCAUMAsxATALM48wCzEPMIsxDzeJML_4GgAyCTM-rgAOMAs0gTC
-nAoKML_qFAwwP64ADjA-nAoKMIswP5AKDDQDMb_AKCgyCzA-rgAOMAs4CTCFOz_gHCYxBTALMIU
zP4gYLDIFMYkwBTCJMAUwCTELMAkwBTA-sDAwMD_AKCgwCzC-sDAwMD_AKCgwCTA-sDAwMQkwP4A
oKDA-sDAwOb_YECIwhTELMIUwCzA-kAoMMAUwCzu-lhQSML_EFBYwCTAPMAsyDzALNz_AIBQwCzG
PMAEwDzS-rgAOMAkwP7gaADIJM4s1gTC-nAoKMD_qFAwwP5AKDDCBMIszv64ADjC-gCgoM4kwATC
LOAkwhTs-oBwmMIUxCzEFMT_IGCwyBTMJMIUxizAFML_wMDAwCzA-gCgoMAswP7AwMDA-gCgoML_
wMDAxP4AoKDAJMD_wMDA5v5gQIjCFMQswhTALMD_QCgwwBTALO7_WFBIwv4QUFjAJMA8wCzIPMAs
3P4AgFDALMY8wATAPNL_uAA4wCTA-uBoAMgkzizWBML_cCgowP6oUDDA-kAoMMIEwizO-rgAOML_
AKCgziTABMIs4CTCFOz_gHCYwhTELMQUxP4gYLDIFMwkwhTGLMAUwv7AwMDALMD_AKCgwCzA-sDA
wMD_AKCgwv7AwMDE-gCgoMAkwP7AwMDmLMD_YECIwBTELMD_gHCYwBTA-kAoMMIUwCzw-lhQSMAs
wCTALOL_EFBYyizAPMAswv4AgFDAPNAEwCTC-uBoAMgkzCzO-gCgoMr_uAA4wv5wKCjA-qhQMMD_
QCgwwgTA-qhQMMAU3CTE-kAoMMD_uAA4wCzgJMIU5v6AcJjAFMIswhTGLMQUwv4gYLDGFMQkwBTC
JMQUxizAFMIswP7AwMDALML_AKCgwP7AwMDALMAkwBTEJMIU5izA-mBAiMAUxCzA-oBwmMAUwP5A
KDDCFMAs8P5YUEjALMAkwCzi-hBQWMoswDzALML_AIBQwDzQBMAkwv7gaADIJMwszv4AoKDK-rgA
OML_cCgowP6oUDDA-kAoMMIEwP6oUDDAFNwkxP5AKDDA-rgAOMAs4CTCFOb_gHCYwBTCLMIUxizE
FML_IGCwxhTEJMAUwiTEFMYswBTCLMD_wMDAwCzC-gCgoMD_wMDAwCzAJMAUxCTCFOb_YECIwhTE
LMD_QCgwwBTALMIUwCzy-lhQSML_EFBYwCz2PMT_AIBQyP64ADjCJMT_4GgAxCTOLMj_AKCg0gTC
-nAoKMAswgTA-qhQMMAU3iTE-kAoMMD_uAA4wCzgJMIU6v6AcJjAFNL_IGCwxBTCJMoU0v7AwMDA
-gCgoMT_wMDAwP4AoKDAJMD_wMDAxCTA-gCgoMD_wMDA5v5gQIjCFMQswP5AKDDAFMAswhTALPL_
WFBIwv4QUFjALPY8xP4AgFDI-rgAOMIkxP7gaADEJM4syP4AoKDSBML_cCgowCzCBMD_qFAwwBTe
JMT_QCgwwP64ADjALOAkwhTq-oBwmMAU0v4gYLDEFMIkyhTS-sDAwMD_AKCgxP7AwMDA-gCgoMAk
wP7AwMDEJMD_AKCgwP7AwMDSAAAAAAAAAAE=
:: main.lua
--[[pod_format="raw",created="2024-08-22 14:10:16",modified="2025-06-26 05:11:46",revision=52698]]
--picovania by turbochop

function pad(string,length)
  if (#string==length) return string
  return "0"..pad(string, length-1)
end


function _init()
window{pauseable=false}
is_paused=false
vid(3)
include "titlecards.lua"
include "file_select.lua"
include "game.lua"
include "map.lua"
include "player.lua"
include "collision.lua"
include "attacks.lua"
include "stairs.lua"
include "animation.lua"
include "weapons.lua"
include "whip.lua"
include "effects.lua"
include "items.lua"
include "actors.lua"
include "boss.lua"
include "env.lua"


name=nil           
cur_stge=1
chk_stge=1
cur_flr=1
chk_flr=1
chk_face=false



stages = {
--Level 1--
    [1] = { floors = {{x = 0, y = 112},{x = 0, y = 22}} },
    [2] = { floors = {{x = 0, y = 90},{x = 314, y = 92}} },
    [3] = { floors = {{x = 0, y =68}} },
--Level 2--
    [4] = { floors = {{x = 0, y = 193}, {x = 0, y = 170}} },
    [5] = { floors = {{x = 0, y = 215}, {x = 56, y = 193}} },
    [6] = { floors = {{x = 111, y = 215}, {x = 0, y = 149}} },
--Level 3
    [7] = { floors = {{x = 66, y = 45}, {x = 71, y = 68}} },
    [8] = { floors = {{x = 99, y = 90}, {x = 56, y = 112}} },
    [9] = { floors = {{x = 85, y = 149}, {x = 0, y = 216}} },
--Level 4    
    [10] = { floors = {{x = 85, y = 170}} },
    [11] = { floors = {{x = 164, y =192}} },
    [12] = { floors = {{x = 294, y = 192}} },
 --Level 5
    [13] = { floors = {{x = 119, y = 22},{x = 183, y = 112}} },
    [14] = { floors = {{x = 280, y = 112}, {x = 173, y = 22}} },
    [15] = { floors = {{x = 270, y = 45}, {x = 170, y = 68}} },
 --level 6
    [16] = { floors = {{x = 147, y = 45}, {x = 0, y = 216}} },
    [17] = { floors = {{x = 241, y = 149}, {x = 241, y = 170}} },
    [18] = { floors = {{x = 303, y = 170}, {x = 201, y = 215}} }
   
   
}


--weapon and item tables
scn={}
whp={}
itm={}
wpn={}
eft={}
env={}
ent={}
brkn_walls={}
act={}


plt={8,10,7}



--player variables
det0={
x=0,
y=0,
h=22,
w=1,
}
det1={
x=0,
y=0,
h=22,
w=1,
}


ply={
sp0=1,
sp1=17,
x=16,
y=90,
yoff=0, 
w=8,
h=16,
dx=0,
dy=0,
ox=0,
oy=13,
wo=0,
lth=1,
ho=0,
acc=.65,
buf=0,
anm=0,
dly=0,
tm0=0,
tm1=0,
tm2=0,
tm3=0,
tm4=0,
tm5=0,
str_t=0,
strd_t=0,
position=1,
anmoff=0,
flp=false,
wlk=false,
canwlk=true,
onlift=false,
stn=false,
dck=false,
jmp=false,
canjmp=true,
lnd=false,
fll=false,
ded=false,
atk=false,
thw=false,
wpn=0,
whp=0,
sht=1,
hth=flr(16),
vishth=flr(16),
vistmr=0,
hrt=false,
blk=false,
petrified = false,
petrification_meter =0,
jmptmrmax = 3,
jmptmr = 3,
pot=false,
home=false,
state_cd = 5,
blktm0=0,
blktm1=0,
blkmax=8,
pottm0=0,
onstr=false,
ammo=5,
clbur=false,
clbul=false,
clbdr=false,
clbdl=false,
clbing=false,
}


--general game variables
buffet=false
victorysong=3
victory=false
endtm=0
screen=240
hrttmr=0
wpncnt=0
bar=16
pck=false
tm0=0
subwpn=false
glitch=0
sel=80
camx=0
camy=0
camxmin=0
camxmax=0
scene="title"
cutscene=false
grav=.1
enemies=0
hrtgrav=.04
sound=false
tran=false
trantm=0
stx=0
sty=0
lvs=2
rst=0
song2=nil
iyo=0
wpnout=0
damage=2
hndout=0
whpout=0
wpnicn=nil
shticn=nil
shtblk=false
shtblktm1=0
shtblktm2=0
destroyed=0
cost=1
spwntmr=0
clck=300
expert=false
clckt=0
enmy=ceil(16)
visenmy=flr(16)
visenmy_gameover=0
vistmr=0
puptmr0=0
puptmr1=0
pup=false
paltmr=0
psel=1
clock=false
clockt=0
flash=false
flasht0=0
flasht1=0
pts1=0
pts2=0
score=0
score1=0
score2=0
deaths=0
deathmessage="You never died once!"
hiscore=false
hi=0
door=false
move=false
water=false
chunk=0
boss=false
btmr=0
bossmus=false
enter=false
latch=0
orb=false
demoend=false
demoendtmr=0
system=0
simonx=0
simony=107
simon=298
start=0
start1=0
name="PLAYER"
win=0
bat=265
batanim=0
token=1
tkntm=0
mapx=240
maptm=0
canskip=false
secret=false
moai_get=false
secretx=0*8
secrety=0*8+.4
secret2x=0*8
secret2y=0*8+.4
secret3x=0*8
secret3y=0*8+.4
can_pause=false
blip=false
target=nil
bkgswap=false
seed=0
swap=false
flash_timer=0
flash_color=0
scroll=240
hold=0
--secret types are: enter, duck, push and wait

-- secret types push and wait are governed by sectmr, enter and duck are not

-- enter means player merely needs stand on the tile
-- duck means player needs to stand on the tile and duck
-- push means player needs to walk and push against it
-- wait means player needs to stand still on the tile for a duration

-- the best place to set this is in the map code

sectype=nil
sectype2=nil
sedtype3=nil
sectmr=0
--whip collision variables...
hitx=0
hity=0
lth=1
hitox=0
hitoy=8
hitw=24
hith=10

hudpal=8
backpal=0
end


 idle=0
function _update()

bob_step = (bob_step + 1) % 40 -- 40 frames for one full cycle (adjust for speed)

    flash_timer = flash_timer + 3  -- Increment flash timer globally, for consistent flashing across scenes
    
    if (scene == "title") update_title()
    if (scene == "gate") update_gate()
    if (scene == "game") update_game()
    if (scene == "map") update_map()
    if (scene == "fall") update_fall()
    if (scene == "end") update_end()
    if (scene == "gameover") update_gameover()
    if (scene == "file_select") update_file_select() idle+=1
    if (scene == "name_entry") update_name_entry() idle+=1
    if (scene == "delete_confirm") update_delete_mode() idle+=1
    if (scene == "confirm_delete") update_confirm_delete()
    if (scene == "copy_confirm") update_copy_mode() idle+=1
    if (scene == "confirm_copy") update_confirm_copy()
    if (scene == "create_folder") update_create_folder()
    if btnp()>0 then idle=0
    
   end
   
  
   
   if idle>=1115 then 
 
   
   full_reset()
   sfx(319, 5, 0, 3)
   music(-1)
   scene="title"
   end
  
end

function _draw()
local count = 0
    for _ in pairs(act) do
        count = count + 1
    end
    if (scene == "title") draw_title()
    if (scene == "gate") draw_gate()
    if (scene == "game") draw_game()
    if (scene == "map") draw_map()
    if (scene == "fall") draw_fall()
    if (scene == "end") draw_end()
    if (scene == "gameover") draw_gameover()
    if (scene == "file_select") draw_file_select()
    if (scene == "name_entry") draw_name_entry()
    if (scene == "delete_confirm") draw_delete_mode()
    if (scene == "confirm_delete") draw_confirm_delete()
    if (scene == "copy_confirm") draw_copy_mode()
    if (scene == "confirm_copy") draw_confirm_copy()
    if (scene == "create_folder") draw_create_folder()
   
    if idle>=1110 then
    rectfill(camx,camy,camx+screen,camy+screen,0)
   
    end
-- print(tostring(ply.fll), camx+10, 25,7)
--  print(pad("" .. score, 7), camx + 25, camy + 20)
--  print(hold, camx+10, 45,7)
--  print(tostring(canskip), camx+10, 55,7)
end

function full_reset()
idle=0
whip_upgrade=0
can_pause=false
cur_flr=1
chk_flr=1
chk_face=false
whp={}
itm={}
wpn={}
eft={}
env={}
ent={}
act={}
brkn_walls={}
plt={8,10,7}
det0={
x=0,
y=0,
h=-2,
w=8,
}
det1={
x=0,
y=0,
h=0,
w=8,
}
ply={
sp0=1,
sp1=17,
x=16,
y=90,
yoff=0, 
w=8,
h=16,
dx=0,
dy=0,
ox=0,
oy=13,
wo=0,
lth=1,
ho=0,
acc=.65,
buf=0,
anm=0,
dly=0,
tm0=0,
tm1=0,
tm2=0,
tm3=0,
tm4=0,
tm5=0,
str_t=0,
strd_t=0,
anmoff=0,
flp=false,
wlk=false,
canwlk=true,
onlift=false,
stn=false,
dck=false,
jmp=false,
canjmp=true,
lnd=false,
fll=false,
ded=false,
atk=false,
thw=false,
wpn=0,
whp=0,
sht=1,
hth=flr(16),
vishth=flr(16),
vistmr=0,
hrt=false,
blk=false,
pot=false,
blktm0=0,
blktm1=0,
blkmax=8,
pottm0=0,
jmptmrmax = 3,
jmptmr = 3,
onstr=false,
ammo=5,
clbur=false,
clbul=false,
clbdr=false,
clbdl=false,
clbing=false,
}
victorysong=3
victory=false
endtm=0
screen=240
hrttmr=0
wpncnt=0
bar=16
pck=false
tm0=0
subwpn=false
glitch=0
sel=80
camxmin=0
camxmax=0
scene="title"
grav=.1


enemies=0
hrtgrav=.04
sound=false
tran=false
trantm=0
stx=0
sty=0
lvs=2
rst=0
song2=nil
iyo=0
wpnout=0
damage=2
hndout=0
whpout=0
wpnicn=nil
shticn=nil
shtblk=false
shtblktm1=0
shtblktm2=0
destroyed=0
cost=1
allow_bob=true
spwntmr=0
clck=300
expert=false
clckt=0
enmy=ceil(16)
visenmy=16
vistmr=0
puptmr0=0
puptmr1=0
pup=false
paltmr=0
psel=1
clock=false
clockt=0
flash=false
flasht0=0
flasht1=0
pts1=0
pts2=0
score=0
score1=0
score2=0
hiscore=false
hi=0
door=false
move=false
water=false
chunk=0
boss=false
btmr=0
bossmus=false
enter=false
latch=0
orb=false
demoend=false
demoendtmr=0
simonx=0
simony=107
simon=298
start=0
start1=0
win=0
bat=265
batanim=0
token=1
tkntm=0
mapx=240
maptm=0
canskip=false
secret=false
moai_get=false
secretx=0*8
secrety=0*8+.4
blip=false
target=nil
flash_timer=0
flash_color=0
scroll=240
sectype=nil
sectmr=0
swap=false
btn1=5
btn2=4
swapoff=0
swaptmr=0
hitx=0
hity=0
lth=1
hitox=0
hitoy=8
hitw=24
hith=10
bkgswap=false
hudpal=8
progress=1

shttm=0
shttm1=0
debug=false
name="SIMON"
lifescore=0
scorecount=1
demo=0
isdemo=false
weathertmr=0
weather=false
--if not isdemo then
--cur_stge=1
--chk_stge=1
--end
end
:: map.lua
--[[pod_format="raw",created="2024-09-10 21:14:51",modified="2025-06-26 02:50:47",revision=48150]]
function set_level_and_chunk()
    -- Access the current stage and floor data from the stages table
    local stage_data = stages[cur_stge]
    if stage_data and stage_data.floors[cur_flr] then
        local floor_data = stage_data.floors[cur_flr]
        
        -- Set the coordinates to level and chunk
        chunk = floor_data.x
        level = floor_data.y
    else
        -- Provide default or error handling if stage/floor data isn't found
        level, chunk = 0, 0
        print("Warning: Stage or floor data not found.")
    end
end

function copy_map_section(x_start, y_start, width)
    -- Iterate over the width of the specified section
    for x = 0, width - 1 do
        -- Iterate over the height (21 tiles --16 level + 5 extra rows--)
        for y = 0, 21 do
            -- Get the tile from the original map at (x_start + x, y_start + y)
            local tile = mget(x_start + x, y_start + y)
            -- Set the tile in the new map at (x, y)
            mset(x, y, tile)
        end
    end
end





function add_enmy(_sp,_x,_y,_item,_flp,_dist)
local sp=_sp
local x=_x*8
local y=_y*8-16
local itm=_item
local flp=_flp
local dist=_dist

if (sp=="pillar")  add_pllr(x,y,spawn_item())
if (sp=="fleaman")  add_flmn(x,y,spawn_item(),flp)
if (sp=="ghost")  add_ghst(x,y,spawn_item(),flp)
if (sp=="skeleton")  add_skel(x,y,spawn_item(),flp)
if (sp=="red skeleton")  add_rskel(x,y,spawn_item(),flp)
if (sp=="snake")  add_snk(x,y,spawn_item(),flp)
if (sp=="skeledragon") add_skdrgn(_x,_y,spawn_item(),true)
if (sp=="hanging bat")  add_bat_perch(x,y,spawn_item(),flp,dist)
if (sp=="raven")  add_rvn(x,y,spawn_item(),flp)
if (sp=="axe knight")  add_aknt(x,y,spawn_item(),flp)
if (sp=="knight")  add_knt(x,y,spawn_item(),flp)
if (sp=="zombie")  add_zom(x,y,spawn_item(),flp)
if (sp=="cat")  add_cat(x,y,spawn_item(),flp)
if (sp=="fishman")  add_fish(x,y,spawn_item(),flp)

end

function stage()

camxmax=0
set_level_and_chunk()
enmy=16
visenmy=16
  -- Pass x_start and y_start directly to copy_map_section
    copy_map_section(chunk, level, 170)  -- 170 here represents the width, adjust as needed
 -- Continue with additional stage setup if necessary
    spawn_candles_from_map()


if cur_stge==0 and cur_flr==0 then
add_liftlr(10,13,500,true)
--bkgswap=true
add_rskel(50,88,nil,true)
add_rskel(50,70,nil,true)
song2=43
add_scene_deco(15,3,"Mathias")
--add_stair_homing(19,12,"up")
--add_stair_homing(25,6,"down")
--add_stair_homing(28,6,"down")
--add_stair_homing(34,12,"up")
--add_stair_homing(15,12,"down")
--add_stair_homing(24,12,"both")
--add_stair_homing(28,12,"both")
--add_boss_clone(25,11,true)
--add_enmy("pillar",20.5,13,spawn_item())
secretx=20
secrety=12
add_secret(secretx,secrety,63)
--add_press(8,11,90)
sectype="enter"

--add_rvn(20,8,spawn_item())
ply.x=30
ply.y=85 

add_door_r(60,13,"stop")
end	

if cur_stge==1 and cur_flr==1 then
if expert then
mset(21,13,22)

add_secret_trigger(21,14,"duck",15,12,0)
add_secret_trigger(50.3,14,"enter",44,12,1)
end
song2=5
ply.flp=false
secretx=44
secrety=12
add_secret(secretx,secrety,62)

sectype="enter"
ply.x=16
ply.y=88 


add_entrance_r(49,13)
end
if cur_stge==1 and cur_flr==2 then
add_stair_homing(17,14,"up")
add_stair_homing(21,10,"down")
add_stair_homing(26,10,"up")
add_stair_homing(30,6,"down")
add_stair_homing(46,6,"down")
add_stair_homing(49,9,"up")
add_stair_homing(63,14,"up")
add_stair_homing(70,7,"down")
backpal=6
song2=5
add_wall(54,10,61)
sectype=nil
enemies+=3
add_door_l(0,15,"stop")
add_enmy("cat",24,11,spawn_item(),true)
add_enmy("cat",40,7,spawn_item(),true)
add_enmy("cat",52,10,spawn_item(),true)
add_enmy("zombie",20,15,spawn_item(),true)
add_enmy("zombie",22,15,spawn_item(),true)
add_enmy("zombie",24,15,spawn_item(),true)
add_mobspawner("zombie","right",ply.x,ply.y+8)
add_mobspawner("zombie","left",ply.x,ply.y+8)

add_door_r(83,8)
if expert then
secretx=43
secrety=6

sectype="wait"
mset(38,7,477)
add_spawnerair("bat",25,1)
add_secret(secretx,secrety,62)
end

		elseif cur_stge==2 and cur_flr==2 then
		add_stair_homing(6,4,"up")
		add_stair_homing(30,8,"down")
		add_stair_homing(32,10,"up")
		add_stair_homing(42,10,"up")
		add_stair_homing(45,7,"down")
		add_stair_homing(52,7,"up")
		backpal=0
		water=true
		sectype="duck"
		secretx=47
		secrety=7

add_wall(55,8)
add_secret(secretx,secrety,62)
	--these are temporary...
 add_fishspawner(3,15)

 add_fishspawner(18,15)
 add_fishspawner(24,15)
 add_fishspawner(39,15)
 add_fishspawner(47,15)
 add_fishspawner(50,15)
 add_door_r(61,7,"stop")
 if expert then
 mset(3,7,423)
 add_secret_trigger(3,8,"wait",24,8,0,64)
 add_secret_trigger(55,13,"duck",47,7,1,62)
 add_spawnerair("bat",25,1)
  add_fishspawner(13,15)
 add_fishspawner(52,15)
end
	end

if cur_stge==2 and cur_flr==1 then
add_stair_homing(8,7,"down")
add_stair_homing(19,14,"up")
add_stair_homing(11,10,"up")
add_stair_homing(15,10,"down")
add_stair_homing(10,14,"down")
add_stair_homing(43,7,"down")
add_stair_homing(45,9,"up")
add_stair_homing(45,14,"down")
add_stair_homing(50,9,"down")
add_stair_homing(55,14,"up")
add_stair_homing(56,6,"down")
add_stair_homing(53,9,"up")
backpal=0
song2=5
water=false
sectype=nil
add_spawnerair("bat",25,1)
add_wall(23,13)
add_wall(23,14,73)

add_door_r(61,7)


end
if cur_stge==3 and cur_flr==1 then
add_stair_homing(8,6,"down")
add_stair_homing(11,9,"up")
add_stair_homing(22,9,"down")
add_stair_homing(27,14,"up")
add_stair_homing(57,14,"up")
add_stair_homing(59,12,"down")
add_stair_homing(61,12,"up")
add_stair_homing(64,9,"down")
backpal=6
enemies+=3
song2=5
add_enmy("zombie",20,15,spawn_item(),true)
add_enmy("zombie",22,15,spawn_item(),true)
add_enmy("zombie",24,15,spawn_item(),true)
add_mobspawner("zombie","right",ply.x,ply.y+8)
add_mobspawner("zombie","left",ply.x,ply.y+8)
add_wall(63,13,74)

add_boss_bat(408,25)
end
if  cur_stge==4 and cur_flr==1 then
if ply.onstr then ply.x=83
end

add_stair_homing(19,14,"up")
add_stair_homing(24,9,"down")
add_stair_homing(21,9,"up")
add_stair_homing(17,5,"down")
add_stair_homing(7,5,"up")
backpal=24
chk_face=false
song2=35
sectype="enter"
add_door_r(29,15,"stop")
add_wall(28,8)
add_wall(28,9)
secretx=20
secrety=14
add_secret(secretx,secrety,63)
add_enmy("hanging bat",6,4.5,nil,80)

add_enmy("knight",15,6,spawn_item(),true)
if not ply.onstr then
ply.x=30
ply.y=110
end
if expert then
add_wall(2,5,74)
add_spawnerair("medusa",10,1)
end

end
if  cur_stge==4 and cur_flr==2 then
add_stair_homing(78,9,"down")
add_stair_homing(75,9,"up")
add_stair_homing(72,6,"down")
add_stair_homing(59,9,"up")
add_stair_homing(56,6,"down")
add_wall(66,7,74)
add_enmy("knight",63,12,nil,true)
add_enmy("hanging bat",65,5,nil,80)
add_enmy("hanging bat",45,5,nil,80)
add_enmy("knight",44,7,nil,true)
add_liftlr(39,7,15,false)


song2=35
add_door_l(36,7)
add_door_r(82,7,"stop")
ply.x=573
if expert then
add_wall(82,8)
add_wall(82,9,73)
add_spawnerair("medusa",10,1)
end

end
if cur_stge==5 and cur_flr==1 then
add_stair_homing(3,4,"up")
if ply.onstr then
song2=35
ply.x-=283
end

--add_spawnerair("medusa",15)
add_enmy("knight",29,7,spawn_item(),false)
add_door_r(83,15,"stop")
add_door_l(0,15,"stop")
sectype="wait"
secretx=39.5
secrety=6
add_secret(secretx,secrety,51)
if expert then
add_spawnerair("medusa",9,1)
else
add_spawnerair("medusa",15,1)
end
end

if cur_stge==5 and cur_flr==2 then
add_stair_homing(44,12,"down")
add_stair_homing(92,12,"up")
add_stair_homing(89,9,"down")
song2=35

ply.x=325
add_liftlr(76,8,118,false)
add_liftlr(54,8,103,true)
add_wall(92,6,73)

add_door_l(35,10)
add_door_r(101,2,"stop")
add_enmy("knight",84,8,spawn_item(),true)
add_enmy("knight",96,8,spawn_item(),true)
add_enmy("knight",91,13,spawn_item(),true)
if expert then add_spawnerair("medusa",10,1)

if not moai_get then
sectype="moai"
add_secret_trigger_moai(77,7.5)
secretx=81
secrety=12
add_secret(secretx,secrety,140)

end

else
add_spawnerair("medusa",15)
end
end

if cur_stge==6 and cur_flr==1 then
add_stair_homing(37,10,"up")
add_stair_homing(40,7,"down")
add_stair_homing(73,4,"up")

song2=35
if not expert then
sectype="push"
add_wall(83,1)
add_wall(83,2)
secretx=69
secrety=4
add_secret(secretx,secrety,64)
end
add_enmy("hanging bat",30,5,nil,130)
add_ghostspawner(44,11,48,12)
add_ghostspawner(65,4,60,5)
add_door_r(83,2,"stop")
add_door_l(23,10,"stop")
add_press(63,11,3)
add_press(57,10,2)
add_press(51,11,3)
add_wall(80,10,73)
add_wall(36,11,74)

add_enmy("pillar",48.5,5,spawn_item())
add_enmy("pillar",44.7,7,spawn_item())
if expert then
--sectype="wait"
--secretx=20
--secretx=10
add_secret_trigger(61,13,"wait",48,11,0,64)
mset(61,12,59)
mset(61,12,59)
add_spawnerair("medusa",10,1)
end
end

if cur_stge==6 and cur_flr==2 then
add_stair_homing(79,12,"down")
song2=35
sectype="wait"
secretx=63.5
secrety=10
add_secret(secretx,secrety,62)
--add_spawnerair("medusa",15)

add_boss_medusa_bust(36*8,12*8)
add_door_l(23,10,"stop")
add_door_r(83,5,"stop")
if expert then
add_spawnerair("medusa",9,1)
else
add_spawnerair("medusa",15)
end
end
if cur_stge==7 and cur_flr==1 then
if not ply.onstr then
ply.x=70*8
             ply.y=12*8
             stx=ply.x
             sty=ply.y
             chk_face=true
             ply.flp=chk_face
end
add_stair_homing(4,12,"up")
add_stair_homing(7,9,"down")
add_stair_homing(10,9,"up")
add_stair_homing(13,6,"down")
add_stair_homing(16,6,"up")
backpal=16
sectype="duck"
secretx=31
secrety=14
add_secret(secretx,secrety,62)
song2=21
add_wall(25,11,73)
add_enmy("fleaman",24,11,nil,false)
add_enmy("fleaman",42,11,nil,false)
add_enmy("fleaman",17,7,nil,false)
add_ghostspawner(56,14,62,15)
add_enmy("skeleton",3,12,nil,true)
add_door_r(73.6,5,"stop")
if expert then
if not ply.onstr then
fetch("sfx/1.sfx"):poke(0x80000)
music(6,0,15,0x80000)
end
weather=true
add_spawnerair("medusa",10,1)
end
end
if cur_stge==7 and cur_flr==2 then
add_stair_homing(8,12,"both")
add_stair_homing(13,7,"down")
add_stair_homing(31,14,"up")
add_stair_homing(34,11,"down")
add_stair_homing(45,9,"down")
add_stair_homing(50,14,"up")
sectype="duck"
secretx=35
secrety=11
add_secret(secretx,secrety,62)
add_door_r(60,13)
add_ghostspawner(15,7,9,4)
add_rvn(24,3.3,nil,true)
add_rvn(35,8.3,nil,true)
add_rvn(39,4.3,nil,true)
add_rvn(42.5,13.3,nil,true)
add_enmy("skeleton",30,15,nil,true)
add_enmy("skeleton",53,15,nil,true)
if expert then

add_spawnerair("medusa",10,1)
end
end

if cur_stge==8 and cur_flr==1 then
add_stair_homing(43,12,"up")
add_stair_homing(48,7,"down")
add_stair_homing(51,7,"up")
if ply.onstr then
if ply.position==2 then
ply.x=46.5*8
elseif ply.position==1 then
ply.x=7.5*8
end
end
--backpal=0
add_wall(3,4,64)
add_wall(8,4,73)
--add_spawnerair("medusa",15)
add_enmy("skeleton",51,8,nil,true)
add_door_r(58.6,13,"stop")
if expert then

if not moai_get then
mset(17,12,256+238)
sectype="moai"
secretx=17
secrety=11
add_secret_trigger_moai(1,6.5)
add_secret(secretx,secrety,140)
end
--]]
add_spawnerair("medusa",10,1)
else
add_spawnerair("medusa",15)
end
end

if cur_stge==8 and cur_flr==2 then
add_stair_homing(31,9,"down")
add_stair_homing(6,15,"down")
if ply.onstr then
if ply.position==2 then
ply.x=38.5*8
elseif ply.position==1 then
ply.x=5.5*8
end
end

sectype="duck"
secretx=29
secrety=9
add_secret(secretx,secrety,62)
add_door_r(86,8)
add_door_l(0,13,"stop")
add_enmy("pillar",60,10,spawn_item())
add_enmy("pillar",78.5,10,spawn_item())
add_rvn(52.5,3.3,nil,true)
add_rvn(70,8.3,nil,true)
add_rvn(76,8.3,nil,true)
--[[
if expert then
mset(-3,15,128)
mset(-2,15,128)
mset(-1,15,128)
mset(0,15,128)
end
--]]
end
if cur_stge==9 and cur_flr==1 then

sectype="push"
secretx=75
secrety=12
add_secret(secretx,secrety,62)
--add_spawnerair("medusa",15)
add_door_r(113,8,"stop")
if not isdemo then
add_rvn(23.3,3.5,nil,true)
add_rvn(27.3,3.5,nil,true)
add_rvn(33.3,3.3,nil,true)
add_rvn(37.3,3.3,nil,true)
add_rvn(51.3,3.5,nil,true)
end
add_enmy("pillar",30.5,8,spawn_item())
add_enmy("pillar",45.5,8,spawn_item())
add_enmy("pillar",75.5,8,spawn_item())
if not isdemo then
add_enmy("skeleton",61,8,nil,true)
add_enmy("skeleton",56,8,nil,true)
end
add_wall(87,11,73)
add_wall(79,10)
add_wall(80,10)
add_wall(79,11)
add_wall(80,11)
add_wall(79,12)
add_wall(80,12)

add_boss_mmy(85,9,false)
add_boss_mmy(113,9,true)
if expert then
weather=true
add_spawnerair("medusa",10,1)
else
add_spawnerair("medusa",15)
end
end

--Commented out spawns may be for expert mode
if cur_stge==10 and cur_flr==1 then
if weather then weather=false  end
damage=3
backpal=0
add_door_r(145,8,"stop")
water=true
add_fishspawner(27,15)
add_fishspawner(33,15)

add_fishspawner(42.5,15)

add_fishspawner(69,15)

add_fishspawner(79,15)
add_fishspawner(90,15)

add_fishspawner(120,15)
add_liftlr(25,15,103,true)
add_liftlr(79,15,150,true)
add_liftlr(96,15,150,true)
add_liftlr(119,13,150,false)
add_scene_trigger(138.5,7.8)
if expert then
add_fishspawner(38,15)
add_fishspawner(64,15)
add_fishspawner(47,15)
add_fishspawner(100,15)
add_fishspawner(110,15)
if  ply.y<=50 then
add_spawnerair("bat",25,0)
else
add_spawnerair("bat",25,1)
end
else
if not isdemo then
if  ply.y<=50 then
add_spawnerair("bat",45,0)
else
add_spawnerair("bat",45,1)
end
end
end
end
if cur_stge==11 and cur_flr==1 then
backpal=1
water=false
add_enmy("skeledragon",128,8,nil,true)
add_spawnereagle(camx,30,"right")
add_spawnereagle(camx,30,"left")
add_door_r(129,13)
if expert then
add_spawnerair("medusa",10,1)
end
end
if cur_stge==12 and cur_flr==1 then
song2=35
damage=4
add_enmy("skeledragon",32,11,nil,true)
add_enmy("skeledragon",64,11,nil,true)
add_wall(32,11,73)
add_wall(64,11,77)
add_door_r(100,13,"stop")
add_boss_frnk(100,9,true)
add_boss_igor(200,80)
if expert then
add_spawnerair("medusa",20,1)
end
end

if cur_stge==13 and cur_flr==1 then
add_stair_homing(40,14,"up")
add_stair_homing(44,10,"down")
add_stair_homing(47,10,"up")
add_stair_homing(43,6,"down")
add_stair_homing(11,6,"up")
if not ply.onstr then
ply.x=2*8
ply.y=13*8
ply.flp=false
chk_face=ply.flp
end
backpal=6
damage=4
add_door_r(50,13,"stop")
add_enmy("fleaman",11,15,nil,true)
add_enmy("fleaman",15,15,nil,true)
add_enmy("fleaman",46,15,nil,true)
add_enmy("skeleton",38,9,nil,true)
add_enmy("skeleton",31,15,nil,true)
if expert then
add_enmy("red skeleton",49,15,nil,true)
end
end

if cur_stge==13 and cur_flr==2 then
add_stair_homing(4,13,"down")
add_stair_homing(14,11,"up")
add_stair_homing(9,6,"down")
add_stair_homing(23,6,"down")
add_stair_homing(28,11,"up")
sectype="push"
secretx=25
secrety=13
add_secret(secretx,secrety,64)
add_door_r(96,14)
add_wall(31,8,74)
add_wall(83,12,73)
add_enmy("skeleton",14,12,nil,true)
add_enmy("skeleton",15,7,nil,true)
add_enmy("red skeleton",44,14,nil,true)
add_enmy("fleaman",51,13,nil,true)
add_enmy("fleaman",54,13,nil,true)
add_enmy("fleaman",79.5,13,nil,true)
add_enmy("red skeleton",58,14,nil,true)
if expert then
add_spawnerair("medusa",10,1)
end
end
if cur_stge==14 and cur_flr==1 then
add_stair_homing(8,13,"up")
add_stair_homing(12,9,"down")
add_stair_homing(9,9,"up")
add_stair_homing(6,6,"down")
add_stair_homing(1,6,"up")
damage=4
add_enmy("fleaman",14,14,nil,true)
add_enmy("axe knight",4,7,nil,true)
add_enmy("axe knight",10,14,nil,true)
if expert then
add_spawnerair("medusa",15,1)
end
if ply.onstr then ply.x=5.5*8
end
end

if cur_stge==14 and cur_flr==2 then
add_stair_homing(139,14,"down")
add_stair_homing(136,14,"up")
add_stair_homing(145,5,"down")
add_stair_homing(118,5,"down")
add_stair_homing(125,12,"up")
add_stair_homing(109,14,"up")
add_stair_homing(102,7,"down")
add_stair_homing(65,12,"up")
add_stair_homing(58,5,"down")
add_stair_homing(35,5,"down")
add_stair_homing(44,14,"up")

if ply.onstr then ply.x=137.5*8

end

--secretx=123
--secrety=14
add_wall(111,4)
add_wall(111,5,74)
add_enmy("red skeleton",124,6,nil,false)
add_enmy("red skeleton",137,6,nil,false)
add_enmy("red skeleton",100,15,nil,false)
add_enmy("red skeleton",64,15,nil,false)
add_enmy("red skeleton",43,15,nil,false)
add_enmy("axe knight",103,15,nil,false)
add_enmy("axe knight",45,6,nil,false)
add_secret_trigger(85,9,"duck",85,14,1)
add_secret_trigger(128,16,"wait",123,14,2)
add_secret_trigger(55,16,"push",63,14,3)
add_secret(secretx,secrety,62)
add_door_r(152,14,"stop")
add_door_l(30,15)
if expert then
add_spawnerair("medusa",10,1)
end
end

if cur_stge==15 and cur_flr==1 then
add_stair_homing(14,14,"up")
add_stair_homing(5,5,"down")
add_stair_homing(38,5,"up")
backpal=5
damage=4
add_door_r(48,14,"stop")
add_wall(46,4)
add_wall(46,5,73)
add_enmy("red skeleton",20,6,nil,false)
add_enmy("red skeleton",30,6,nil,false)
add_enmy("red skeleton",16,15,nil,false)
add_enmy("pillar",4,6,spawn_item())
add_enmy("pillar",32.5,15,spawn_item())
if expert then
add_spawnerair("medusa",10,1)
end
if not ply.onstr then ply.x=46*8
elseif ply.onstr then ply.x=41.5*8
end
end
if cur_stge==15 and cur_flr==2 then
add_stair_homing(102,14,"down")
if ply.onstr then ply.x=100.5*8
end
backpal=5
add_scene_deco(39,7,"Lisa")
add_scene_deco(51,7,"Alucard")
add_scene_deco(61,6,"Bartley")
add_scene_deco(44,3.3,"Vlad")
add_scene_deco(71,6,"Mathias")
add_scene_deco(81,6,"Elizabetha")
add_scene_deco(91,6,"Walter")
--add_spawnerair("medusa",15)
add_enmy("axe knight",79,15,nil,false)
add_enmy("axe knight",46,15,nil,false)
add_door_r(110,14,"stop")
if expert then
add_enmy("axe knight",35,15,nil,false)
add_spawnerair("medusa",10,1)
else
add_spawnerair("medusa",15,1)
end
end
if cur_stge==16 and cur_flr==1 then
add_stair_homing(110,13,"up")
add_stair_homing(105,8,"down")
--bkgswap=false

backpal=5
damage=4
ply.flp=true
ply.x=115*8
ply.y=12*8
add_door_r(118.5,0,"stop")
add_entrance_l(1,9)
add_boss_bat(79*8,3.5*8,nil,"active")
add_boss_bat(64*8,12*8,nil,"active")
add_boss_bat(40*8,3.5*8,nil,"active")
add_boss_bat(24*8,12*8,nil,"active")
add_boss_bat(14*8,3.5*8,nil,"active")
if expert then
add_spawnerair("medusa",15)
end
end
if cur_stge==17 and cur_flr==1 then
add_stair_homing(44,9,"up")
add_stair_homing(48,5,"down")
add_stair_homing(50,5,"up")
add_stair_homing(19,5,"up")
add_stair_homing(13,13,"up")
add_stair_homing(6,6,"down")
add_stair_homing(2,6,"up")
sectype="duck"
secretx=32
secrety=11
add_secret(secretx,secrety,62)
--bkgswap=true
add_wall(9,6,74)
add_door_r(59,0,"stop")
add_enmy("skeleton",49,10,nil,false)
add_spawnereagle(camx,30,"right")
add_spawnereagle(camx,30,"left")
if expert then
add_spawnerair("medusa",15)
end
end
if cur_stge==17 and cur_flr==2 then
add_stair_homing(55,14,"down")
add_stair_homing(50,14,"up")
add_stair_homing(54,10,"down")
add_stair_homing(57,10,"up")
add_stair_homing(19,12,"down")
add_stair_homing(21,14,"up")
add_stair_homing(24,14,"down")
add_stair_homing(9,13,"down")
add_stair_homing(6,9,"up")
add_stair_homing(3,6,"down")
add_door_r(59,0,"stop")
add_spawnereagle(camx,30,"right")
add_spawnereagle(camx,30,"left")
add_enmy("skeleton",49,7,nil,false)
add_enmy("skeleton",43,15,nil,false)
add_wall(34,13,73)
add_wall(34,14)
add_scene_trigger_final(0,7)
end

if cur_stge==18 and cur_flr==1 then
add_stair_homing(24,10,"up")
--bkgswap=false
backpal=1
if ply.onstr then ply.x=16.5*8
end
if not ply.onstr then
trantm=0
tran=false
clck=400
clock=false
wpncnt=0
clockt=0
ply.flp=true
ply.x=28*8
ply.y=9*8
ply.blktm0=0
chk_stge=cur_stge
chk_face=ply.flp
stx=ply.x
sty=ply.y
music(59,0,15)
end

add_door_r(30,0,"stop")
end

if cur_stge==18 and cur_flr==2 then
add_stair_homing(76,11,"down")
if ply.onstr then
ply.x=81.5*8
end
add_scene_deco(84,3,"Clock")
add_door_r(100,0,"stop")
end
end







function update_map()

mapstop=20
mapx-=1
if mapx<=mapstop or (btnp(5) and canskip) then mapx=mapstop
simonx+=.65
maptm+=.12
ply.tm0+=.24

end

if blip==false then
target=47
else target=39
end

if ply.tm0>=2 then 
 ply.tm0=0
 simon+=1
 end
 if simon>301 then 
 simon=298
 end
if maptm>=2 then
maptm=0
end
if maptm>1 then
blip=true
else blip=false
end

if (ply.tm0<=0 and mapx==mapstop) and  (simon==298 or simon==300) and simonx<230 then
sfx(314,0,8,8)


end
if mapx==mapstop and simonx>20 then
if btnp(5) and (canskip and simonx<235) then
simonx=235
end
end

 if simonx>=248  then



if progress==2 then
song2=35
cur_stge=4
cur_flr=1
elseif progress==3 then


song2=21


cur_stge=7
cur_flr=1


damage=3
camx=268
ply.x=70*8
ply.y=12*8
stx=ply.x
sty=ply.y
ply.flp=true
chk_face=ply.flp
elseif progress==4 then

song2=14
ply.x=8*8
ply.y=0
cur_stge=10
cur_flr=1
simonx=80
simony=1

scene="fall"
elseif progress==5 then
song2=43
cur_stge=13
cur_flr=1


damage=4

ply.x=2*8
ply.y=13*8
stx=ply.x
sty=ply.y

chk_face=ply.flp
elseif progress==6 then
cur_stge=16
ply.flp=true
ply.x=32*8
ply.y=12*8
song2=70
end
chk_stge=cur_stge


tm0=0
ply.tm0=0


maptm=0
blip=false

simon=298
mapx=240
canskip=false
if progress~=4 then
simonx=0
simony=107
music(song2,0,15)
scene="game"
else
sfx(262,5,0,11)
sfx(262,6,16,0)
simonx=70
simony=10
scene="fall"
end
end
end


function draw_map()
local blipx=0
local blipy=0
local targetx=0
local targety=0
if progress==2 then
blipx=106
blipy=90
targetx=74
targety=75
elseif progress==3 then
blipx=69
blipy=74
targetx=122
targety=69
elseif progress==4 then
blipx=120
blipy=74
targetx=160
targety=78
elseif progress==5 then
blipx=164
blipy=77
targetx=153
targety=63
elseif progress==6 then
blipx=147
blipy=63
targetx=116
targety=44
end
cls()

 -- status bar (temporary?)
    for b = 1, bar do
        spr(110, camx + 24 + b * 4, camy + 9)
    end

    for h = 1, math.min(ply.vishth, 16) do
        spr(111, camx + 25 + h * 4, camy + 9)
    end

    for h = 1, math.ceil((visenmy), 16) do
        spr(127, camx + 25 + h * 4, camy + 12)
    end
 -- print(progress,camx,camy,7)
 spr(262,mapx+camx,camy+17)
 spr(95, camx + 10, camy + 11)
 spr(77, camx + 146, camy + 4)
 print("  SC         ".." Time "..clck.."                Stage "..cur_stge, camx , camy + 1, 7)
 print("            = "..ply.ammo, camx + 98, camy + 3, 7)
 print(pad("" .. score, 7), camx + 25, camy + 1)
 print("P = "..lvs, camx + 148, camy + 12, 7)
 if expert then
    spr(226,camx+232,camy+1)
end

spr(wpnicn, camx + screen / 2 -2, camy + 10)
rect(camx + 112, camy + 8, camx + 132, camy + 19, 8)
spr(shticn, camx + 203, camy + 11)

if mapx==mapstop then
spr(target,camx+targetx,camy+targety,7)
end
if mapx==mapstop then
spr(simon,camx+simonx,camy+simony,true)

end
if blip then
spr(31,camx+blipx,camy+blipy)
end
--print (simonx,camx,camy+120,7)
if simonx>=235 then
rectfill(camx,camy,camx+screen,camy+screen,0)

end
end

function flr_tran()
    local current_stage = cur_stge  -- Assuming cur_stge is tracking the current stage number
    local stage_info = stages[current_stage]

    if not stage_info then
        print("Stage information not found for stage " .. tostring(current_stage))
        return
    end

    local total_floors = #stage_info.floors

    -- Transition when moving down off the bottom of the screen (regular floor transition)
    if ply.y >= 120 and ply.onstr and (ply.clbdl or ply.clbdr) then
        trantm += 0.05
        tran = true
        if tran and trantm >= 1 then
            if cur_flr < total_floors then
                cur_flr += 1
            else
                cur_flr = 1  -- Wrap around to first floor if at the bottom
            end

            -- Set player y-coordinate to 8 after moving down
            ply.y = 8

            -- Reset transition variables
            spwntmr = 0
            tran, trantm = false, 0
        end
    end

    -- Transition when moving up off the top of the screen (regular floor transition)
    if ply.y <= 8 and ply.onstr and (ply.clbul or ply.clbur) then
        trantm += 0.05
        tran = true
        if tran and trantm >= 1 then
            if cur_flr > 1 then
                cur_flr -= 1
            else
                cur_flr = total_floors  -- Wrap around to the highest floor if at the top
            end

            -- Set player y-coordinate to 120 after moving up
            ply.y = 120

            -- Reset transition variables
            spwntmr = 0
            tran, trantm = false, 0
        end
    end
end

:: player.lua
--[[pod_format="raw",created="2024-08-22 14:14:58",modified="2025-06-26 05:11:25",revision=48052]]
--player

function ply_actor()

if flr(ply.x+4)/8<30 then ply.position=1
else ply.position=2

end

    hitx = ply.x + hitox * lth
    hity = ply.y

    if ply.ded then
        ply.blk = false
        ply.blktm0 = 0
        ply.blktm1 = 0
    end

    if not ply.onstr then
        if ply.x <= camxmin then
            ply.x = camxmin
        end
    end

    -- Determine hitx based on player direction and weapon length
    if lth == 1 then
        hitx = ply.flp and (ply.x - 25) or ply.x
        end
    if lth == 1.5 then
        hitx = ply.flp and (ply.x - 30) or ply.x
    end

    -- Set cost based on weapon
    cost = (ply.wpn == 5) and 5 or 1

    -- Determine hit offset
    hitox = (lth == 1) and 4 or ((ply.flp) and -2 or 3)
    hitoy = ply.dck and 3 or -1

    -- Set whether the player is on stairs
    ply.onstr = (ply.clbur or ply.clbdl or ply.clbul or ply.clbdr)

   

    -- Post-hit invincibility effect
    if ply.blk then
        plyblk()
    end

    -- Run these if player is alive
    if ply.hth >= 0 then
        atk_state()
        ply_stn()
        anmdta()
        ply_cld()
        update_player_jump(ply)
    end

    -- Run these if player is dead
    if ply.hth <= 0  then
        anmdta()
    end

    -- Check if in range of stairs
    if ply.str then
        st_start()
    end
 ---[[
        if ply.clbdr and not ply.clbing and (btn(2,player) or btn(0,player)) then
            ply.clbdr = false
            ply.clbul = true
        end
    -- Stair movement logic
    if not (ply.clbing or ply.atk or ply.thw) and not cutscene  then
        if ply.clbur and (btn(3,player) or btn(0,player)) and not btn(1,player) then
            ply.clbur = false
            ply.clbdl = true
            end
        if ply.clbul and ((btn(3,player) or btn(1,player)) and not btn(2,player)) then
            ply.clbul = false
            ply.clbdr = true
             end
       
        --]]
        if ply.clbdl and (btn(2,player) or btn(1,player) and not btn(3,player)) then
            ply.clbdl = false
            ply.clbur = true
       end
    end

    local climbdirs = {
        clbur = {"rt", "up"},
        clbul = {"lt", "up"},
        clbdr = {"rt", "dn"},
        clbdl = {"lt", "dn"}
    }

    for dir, move in pairs(climbdirs) do
        if ply[dir] then
            str(unpack(move))
        end
    end

    -- Player movement logic
    if not (ply.ded or ply.hrt) and not ply.onstr and spwntmr>0 then
        ply_mvmt()
    end

    -- Bottomless pits
    if ply.y > 140 and not ply.onstr then
        falldeath()
        
    elseif ply.onstr then
        flr_tran()
    end

    -- Player hurt logic
    if ply.hrt then
        hurt()
    end

    -- Health check
    if ply.hth <= 0 then
        ply.hth = 0
        if not ply.hrt and ply.lnd and not ply.stn then
            death()
        end
    end

    if ply.hth > 16 then
        ply.hth = 16
    end
end

-- Player control

   function ply_mvmt()
   
    ply.x += ply.dx
    ply.y += ply.dy
    hrttmr += 0.1

    -- Gravity and jump hang time
    if not door then
        if ply.jmp then
        ply.yoff=4
            if abs(ply.dy) < 0.1 and ply.jmptmr < ply.jmptmrmax then
                -- Player is at the apex: Start or continue hang time
                ply.jmptmr += 1
                ply.dy = 0 -- Pause vertical movement
            else
                -- Apply gravity after hang time
                ply.jmptmr = 0
                ply.dy += grav
            end
        else
           
            -- Normal gravity when not jumping
            ply.dy += grav
        end
    end

    if not ply.atk then
        ply_walk()
    end

    -- Maintain momentum while jumping
    ply.dx = ply.wlk and ply.buf or 0

    -- Sprite facing
    
    if btn(0) or btn(1) then
        ply.dly += 0.1
    else
        ply.dly = 0
    end
    ply.dly = min(ply.dly, 0.3)

    if not (ply.jmp or ply.fll or ply.atk or door or victory or ply.thw or ply.petrified) and ply.dly >= 0.2 then
        if btn(1) then
            ply.flp = false
        elseif btn(0) then
            ply.flp = true
        end
    end
   

    if ply.dck then
        ply.dly = 0.3
    end

    if not ply.canwlk then
        ply.dx = 0
    end

    -- Duck and stop walking
   
     if btn(3,player) and not (ply.fll or ply.jmp) and not ply.home and ply.tm3 == 0 and not door and not ply.petrified then
       ply_duck()
    elseif not btn(3,player) and not ply.atk then
        ply.dck = false
        ply.canwlk = true
       
    end
     if ply.onstr or ply.home  then
            ply.dck = false
        end
    if ply.petrified then 
    ply.dck=false
    ply.canwlk=false
    end

    if ply.stn then
        ply.oy = 4
        ply.anm = 10
        ply.canwlk = false
        ply.sp1=85
    end
ply.home=false
if ply.home then ply.dck=false end
    -- Walking logic
    if not ply.dck or ply.petrified then
        if not victory then
            if ply.canwlk then
                if btn(1,player) and ply.lnd and not ply.atk and not ply.thw and not ply.onstr then
                    ply_move_right()
                elseif btn(0,player) and ply.lnd and not ply.atk and not ply.thw then
                    ply_move_left()
                elseif ply.lnd then
                    stop_action()
                end
            end
        end
    end
    
   

    -- Jumping logic
    if btnp(btn2,player) and ply.lnd and ply.canjmp and not (ply.stn or ply.dck or ply.petrified) and not ((ply.atk and not victory) or ply.thw) and not door then
        ply_jump()
    end

    -- Hurt timer
    hrttmr = min(hrttmr, 1)

    -- Begin plummeting
    if ply.jmp and ply.dy >= 2.2 then
        ply.fll = true
    end

    if ply.fll then
        ply.dy = 4
        if not ply.jmp then
            ply.dx = ply.flp and -0.2 or 0.2
        end
    end

    -- Stun timer
    if ply.stn then
        ply.tm2 += 0.1
        if ply.tm2 >= 1.5 then
            ply.stn = false
            ply.y += 1
            ply.tm2 = 0
            ply.oy = 0
            
        end
    end
end

-- Falling death
function falldeath()
    
    whip_upgrade=0
    whip_upgrade_multi=1
    ply.dx = 0
    ply.dy = 0
    ply.tm0 = 0
    ply.fll = false
    rst += 0.1

    if not ply.ded then
        visenmy_gameover=visenmy
        music(13)
        if water then
            sfx(308, 3, 8, 8)
            add_splash(ply.x + 4, ply.y - 6, rnd(0) - 0.3)
            add_splash(ply.x + 4, ply.y - 6, rnd(0.2))
            add_splash(ply.x + 4, ply.y - 6, rnd(0) + 0.3)
        end
        ply.ded = true
    end
ply.y=150
    if rst >= 10 then
        if isdemo then
       demoend=true
       end
         tran = true
        
    end

    if rst >= 12 then
        if lvs <= 0 then
        cur_flr=1
        chk_flr=1
            music(4)
            
            scene = "gameover"
        elseif lvs >= 0 then
        if not isdemo then
            ply_rst()
             else
            
            demoset+=1
            full_reset()
            end
        end
    end
end

-- Player knockback
function hurt()
    hrttmr += 0.1
    ply.yoff=2
    if ply.onstr then
        ply.tm5 += 0.1
        if ply.hth >= 0 and ply.tm5 >= 1 then
            ply.blk = true
            ply.hrt = false
            ply.tm5 = 0
        end
    elseif not ply.onstr and hrttmr >= 0.7 then
        ply.x += ply.dx
        ply.y += ply.dy
        ply.anm = 13

        if ply.dy <= 0 then
            ply.dy += hrtgrav
        end
        if ply.dy >= 0 then
            ply.dy += grav
        end
        if ply.dy >= 2 then
            ply.dy = 4
            ply.tm0 += 0.1
        end

        ply.dx = ply.flp and 0.7 or -0.7

        if collide_map(ply, "up", 0) and ply.hrt  then
            ply.dy += 1
            ply.dx = 0
        end

        if collide_map(ply, "down", 0) or ply.onlift then
            ply.lnd=true
            ply.y+=1
            ply.y -= (ply.y + ply.h) % 8
            ply.dx = 0
           -- ply.dy += 1
            ply.yoff=0
            ply.tm2 += 0.1
            
            if ply.tm2 >= 1.5 then
            ply.lnd=true
                ply.tm2 = 0
                ply.fll=false
                ply.dy=0
                ply.hrt = false
            end

            if ply.hth == 0 and ply.lnd then
                death()
            elseif ply.hth >= 0 then
                ply.blk = true
                ply.anm = 10
            end
        end
    end
end

-- Normal death
function death()
    
    deathanim()
    ply.tm0 = 0
    rst += 0.1

    if not ply.ded then
        visenmy_gameover=visenmy
        music(13)
        ply.ded = true
    end

    if rst >= 10 then
       if isdemo then
       demoend=true
       end
       sfx(-2)
        tran = true
    end

    if rst >= 12 then
        if lvs <= 0 then
            
            music(4)
            scene = "gameover"
            cur_flr = 1
        elseif lvs >= 0 then
           if not isdemo then
            ply_rst()
            else
            
            demoset+=1
            full_reset()
            end
        end
    end
end

-- Reset the player
function ply_rst()
    camxmin = 0
    camxmax = 0
  camx=0
  camy=0
    clock = false
    clockt = 0
    enmy = 16
    visenmy = 16
    orb = false
    boss = false
    bossmus = false
    win = 0
    ply.pottm0 = 0
    ply.pot = false
    ply.blk = false
    blktm0 = 0
    blktm1 = 0
    rst = 0
    wpncnt = 0
 
    cur_flr = 1
    cur_stge = chk_stge
    ply.flp = chk_face
    ply.hrt = false
    ply.hth = 16
    ply.vishth = 16
    ply.stn = false
    ply.tm2 = 0
    ply.tm4 = 0
    ply.tm3 = 0
  
    ply.x = stx
    ply.y = sty
    tran = false
--    trantm=0
    ply.ammo = 5
    ply.jmp = false
    ply.wlk = false
    ply.tm5 = 0
    spwntmr = 0
  
    music(song2, 0, 15)
   
   
   
    clock = false
    
    clck = 300
    
    ply.sp0 = 66
        ply.sp1 = 82
    brkn_walls = {}
     ply.wlk = false
 if ply.ded then
 
 ply.dck = false
 cur_stge = chk_stge 
 cur_flr  =chk_flr
  ply.ox = 0
 ply.whp = 0
 shticn = nil
 ply.wpn = 0
 ply.shot = 1
 deaths+=1
 lvs-=1
 ply.ded=false
 ply.whp = 0
 shticn = nil       
        
        
        
 end
 
       if cur_stge <= 3 then
        music(5, 0, 15)
    elseif cur_stge>=4 and cur_stge<7 then                           
        music(35, 0, 15)
    elseif cur_stge>=7 and cur_stge<10 then  
    if expert then
    fetch("sfx/1.sfx"):poke(0x80000)
music(6,0,15,0x80000)
          elseif not expert then  music(21,0,15)
          end
    elseif cur_stge==10  then
    ply.x=8*8
    ply.y=11*8
    ply.stx, ply.sty=ply.x, ply.y
             music(14,0,15)  
             elseif (cur_stge==12 or cur_stge==11) then  
             music(35,0,15)
             elseif (cur_stge==13 or cur_stge==14 or cur_stge==15) then  
             music(43,0,15)
             elseif cur_stge>=16 and cur_stge<18 then  music(70,0,15)
            -- elseif cur_stge==18 then  music(59,0,15)
    end
   
end

-- Player post-hit invincibility
function plyblk()
ply.blkmax=expert and 8 or 12
   if not pup then
    ply.blktm0 += 0.5
    else ply.blktm0=0
    end
    if not ply.pot then
        ply.blktm1 += 0.1
    end
  
    if ply.blktm0 >= 1 then
        ply.blktm0 = 0
    end
    if ply.blktm1 >= ply.blkmax then
        ply.blktm1 = 0
        ply.blktm0 = 0
        ply.pot = false
        ply.blk = false
    end
end

function ply_move_left()
	if isdemo then
		
	ply.flp=true
	end
	ply.dx = -ply.acc
   ply.buf = -ply.acc
   ply.wlk = true
   
   log_action("ply_move_left")
end

function ply_move_right()
	
	if isdemo then

	ply.flp=false
	end
	ply.dx = ply.acc
                    ply.buf = ply.acc
                    ply.wlk = true
                   
                    log_action("ply_move_right")

end

function ply_duck()
ply.dck = true
        ply.canwlk = false	
        log_action("ply_duck")
end
function ply_jump()
    ply.lnd = false
    ply.jmp = true
    ply.dy = -1.9 -- Jump velocity
    ply.jmptmr = 0 -- Reset jump timer
    log_action("ply_jump")
end

function ply_attack()
	 if demoendtmr==0 then
	 add_whip(ply.x,ply.y)
   ply.atk=true
   end
   log_action("ply_attack")
end

function stop_action()
   if not ply.onlift then
    ply.dx = 0
    end
    ply.wlk = false
    ply.dck = false
    log_action("stop_action")
end

function update_player_jump(ply)
  -- Sensor Y coordinate: 1 pixel above the player
  local sensor_y = ply.y - 1
  
  -- Sensor X coordinates for left, center, and right checks
  local sensor_left_x   = ply.x - 3
  local sensor_center_x = ply.x + ply.w / 2
  local sensor_right_x  = ply.x + ply.w + 3
  
  -- Helper function: returns true if the tile at (sensor_x, y) is solid
  local function sensorCollision(sensor_x, y)
    local tile_x = flr(sensor_x / 8)
    local tile_y = flr(y / 8)
    local tile = mget(tile_x, tile_y)
    return fget(tile, 0)
  end
  
  -- Always check the center sensor
  if sensorCollision(sensor_center_x, sensor_y) then
    ply.canjmp = false
    return
  end
  
  -- Determine which side sensor to check based on horizontal movement (dx)
  if ply.dx < 0 then
    -- Player moving left: only check left sensor
    if sensorCollision(sensor_left_x, sensor_y) and not sensorCollision(sensor_left_x, ply.y) then
      ply.canjmp = false
      return
    end
  elseif ply.dx > 0 then
    -- Player moving right: only check right sensor
    if sensorCollision(sensor_right_x, sensor_y) and not sensorCollision(sensor_right_x, ply.y) then
      ply.canjmp = false
      return
    end
  else
    -- No horizontal movement: check both side sensors
    if sensorCollision(sensor_left_x, sensor_y) and not sensorCollision(sensor_left_x, ply.y) then
      ply.canjmp = false
      return
    end
    if sensorCollision(sensor_right_x, sensor_y) and not sensorCollision(sensor_right_x, ply.y) then
      ply.canjmp = false
      return
    end
  end
  
  -- Otherwise, allow jumping.
  ply.canjmp = true
end


:: stairs.lua
--[[pod_format="raw",created="2024-08-22 14:15:56",modified="2025-03-20 10:57:14",revision=42740]]
--stairs

function st_start()
--prepare to climb

--climb up and right
 if not ply.stn then
 if btn(2,player) then 
  
 if collide_map(ply,"down",2) 
 and collide_map(ply,"down",6) 
 and not ply.flp and ply.str
 then ply.clbur=true
 ply.wlk=false
 
 elseif collide_map(ply,"down",4) 
 and collide_map(ply,"down",1) 
 and ply.flp
 then 
 
 ply.clbul=true
ply.wlk=false
 end
 end
--climb down and left 
 
 

 if btn(3,player) then
  
if collide_map(ply,"down",5) 
 and collide_map(ply,"down",2) 
 and not ply.flp
 then ply.clbdr=true
 ply.wlk=false
 
 elseif collide_map(ply,"down",3) 
 and collide_map(ply,"down",7) 
 and ply.flp
 then ply.clbdl=true
ply.wlk=false
 end

end

end
if cutscene then
 ply.clbur=true
 ply.wlk=false
end
end

function str(_xdir,_ydir)
xdir=_xdir
ydir=_ydir
ply.lnd=false
ply.x+=ply.dx
ply.y+=ply.dy

if  (ply.hrt or ply.atk or ply.thw)-- or cutscene
then ply.str_t+=0
else ply.str_t+=.07


end


--face the correct way 
 if xdir=="lt" then ply.flp=true
 else ply.flp=false
 
 end
if not ((ply.atk or ply.thw) or ply.hrt) and not tran then
 
 if xdir=="rt" then 
 ply.dx=.35
 else ply.dx=-.35

 
 end
 
 
 if ydir=="up" then 

 
 ply.dy=-.35
 else ply.dy=.35
 
 end
 
 else ply.dx=0
      ply.dy=0
 
 end
 

--movement timer 
 
 if ply.str_t>=1 then 
 
 ply.str_t=1

 end

--climb a step at a time 
 

 if ply.str_t<.5 
 then 
ply.clbing=true
 ply.anm=0
elseif ply.str_t>=.5 
 then 
 
 if ydir=="up" then ply.anm=11
 else  ply.anm=12
  
  end
  
  --stop here
  
  if   
  ply.str_t==1 and not tran then 
     ply.clbing=false
     ply.dx=0
     ply.dy=0 

 end
 
 end

--climbing controls

 if (btn(2,player) or (btn(1,player)) or ((btn(3,player)or (btn(0,player))))or cutscene or tran) 
 and ply.str_t>=1 

 then

 ply.str_t=0

end

--end climbing 

 if ply.str_t>=.2
 and collide_map(ply,"down",7) or ply.hth<=0
 then 
  if (ply.clbul or ply.clbur) then 
 ply.y+=1.8
 end
 ply.str_t=0
 ply.clbur,ply.clbul,ply.clbdr,ply.clbdl=false,false,false,false
 ply.clbing=false
ply.wlk=false
ply.dck=false
 end
 
if (ply.str_t>=.2 and ply.strd_t>=1) 
  and (collide_map(ply,"down",0) or collide_map(ply,"down",7)) or ply.hth<=0
 then

 
 if ply.clbdl then ply.x-=1
 elseif ply.clbdr then ply.x+=1
 end
 
 ply.str_t=0
 ply.strd_t=0
 ply.clbur,ply.clbul,ply.clbdr,ply.clbdl=false,false,false,false
 ply.clbing=false

 end
 if (ply.clbul or ply.clbur) then ply.strd_t=0
 end
if (ply.clbdl or ply.clbdr) and not collide_map(ply,"down",0) then

ply.strd_t+=1
	if ply.strd_t>=1 then ply.strd_t=1
 
	end
end

 if ply.clbul and not ply.onstr then
 ply.x+=1

end

  if ply.clbdr and not ply.onstr then
 ply.x+=1
 end

end

:: titlecards.lua
--[[pod_format="raw",created="2024-08-22 14:12:20",modified="2025-05-31 05:33:55",revision=46334]]
-- Title and Game Over 

-- Update Title Screen
demoset=1

demo=0
isdemo=false
function update_title()
if btn(4) and not pck then hold+=1
else hold=0
end

if hold==30 then sfx(276)

end
if hold==0 and stat(464)~=32 then sfx(-2)
end
 for b in all(eft) do
 if not pck then
 b:update()
 end 
 end
 if demo==35 then
 add_title_bat(166,65)
end
if demoset>3 then demoset=1
 end
  if demoset == 1 then
    cur_stge = 12
elseif demoset == 2 then
    cur_stge = 10
    
elseif demoset == 3 then
    cur_stge = 9
    ply.y=40
end
if hold==130 then exit() end
   
    if not pck  then
    demo+=1
    end
     system += 0.1
    
    if pck then tm0 += 0.25 end

    if system >= 3 then system = 3 end

    

    if btnp(5) and system == 3 then
        pck = true
        demo=0
    end

    if pck then
        start += 0.1
        start1 += 0.5
       
    end
    if start>8.2 then eft={}
    end

    if start1 >= 4 then
        start1 = 0
    end
    if hold~=0 and demo>=37 then demo-=1 end

    if tm0 >= 3 and start > 10 then
        isdemo=false
        
        start, start1, tm0, pck, bat, simonx = 0, 0, 0, false, 265, 230
        music(79, 0, 15)
       
        if stat(24)==0 then
        scene = "file_select"
        else scene="game"
        end
    end
    if btn()~=0 and demo>429 and demo<460 then
    demo=36
--    full_reset()
    
    end
    if demo==460 and hold==0 then
    eft={}
    start_demo("demo"..(demoset)..".pod")
  spwntmr=0
    isdemo=true
    demo=0
   scene="game"
  -- elseif hold~=0 then demo=36
end
end

-- Draw Title Screen
function draw_title()
    cls()
    
    spr(261, camx)
     for b in all(eft) do

 b:draw()
 
 end
 
 local  flash=hold<80 and 1 or (flash_timer%15<5 and 1 or 3)
 
  if hold>35 then
   rectfill(camx+15, camy+75,camx+40,camy+90,flash)
   rect(camx+14, camy+74,camx+41,camy+91,20)
   
 print("Exit",camx+19,camy+80,7)

 end
    if pck and start > 8 or (demo>430) then
        rectfill(camx, camy, camx + screen, camy + screen, 0)
    end
    if system < 2 then
        rectfill(camx, camy, camx + screen, camy + screen, 0)
    end
    if system < 1 then
        rectfill(camx, camy, camx + screen, camy + screen, 5)
    end
    if start1 >= 2 then
        rectfill(camx + 75, camy + 80, camx + 151, camy + 90, 0)
    end
  
--    print(demo,camx,camy,7)
--    print(demoset,camx,camy+16,7)
--    print(cur_stge,camx,camy+24,7)
end

-- Update Gate Scene
function update_gate()
canskip=false
 for e in all(eft)do
e:update()
end
if simonx>229.8 then
add_scene_bat(30+camx,60+camy,.2,-.1)
add_scene_bat(40+camx,76+camy,.2,-.2)
add_scene_cloud(175+camx,13+camy,-.05)
end
    load=false
    simonx -= 0.40
    tm0 += 0.25
    ply.tm0 += 0.28

    if simonx <= 118 then
        simonx, ply.tm0, simon, simony = 118, 0, 297, simony - 0.4
    end

    if ply.tm0 >= 2 then
        ply.tm0 = 0
        simon += 1
    end

    if simon > 301 then
        simon = 298
    end
    
   if tm0 >= 115 then
   eft={}
   end

    if tm0 >= 125 then
        music(5, 0, 15)
        scene, tm0, ply.tm0, simonx, simony, simon = "game", 0, 0, 230, 107, 298
    end
end

-- Draw Gate Scene
function draw_gate()

    cls()
    if expert then
pal(30,8)
pal(14,24)
else
pal(30,31)
pal(14,16)
end
    spr(304, camx)
    pal()
   --[[
     if simon == 297 and simony > 92 then
        spr(302, camx + simonx + 1, camy + simony)
    end
    --]]
    spr(simon, camx + simonx, camy + 112)


    if tm0 >= 115 then
        rectfill(camx, camy, camx + screen, camy + screen, 0)
    end
    for e in all(eft)do
e:draw()
end
end

-- Update Game Over Scene
function update_gameover()

destroyed=0
cur_flr = 1
chk_flr= 1
if score>hi then
hiscore=true
hi=score
end

 if progress==1 then 
 chk_face=false
 cur_stge=1
 
 end
            if progress==2 then 
            chk_face=false
            cur_stge=4
            end
            if progress==3 then
             cur_stge=7 
           ---[[
              -- ply.x=70*8
            -- ply.y=12*8
             --stx=ply.x
             --sty=ply.y
             --chk_face=true
           --  ply.flp=chk_face
             --]]
             end
            if progress==4 then cur_stge=10
            end
            if progress==5 then cur_stge=13
            end
            if progress==6 and cur_stge~=18 then cur_stge=16
          end
           if cur_stge==18 then cur_stge=18
           end 
            
     chk_stge=cur_stge       
    if pck then tm0 += 0.25 end

    if not pck then
        if btnp(3) and sel == 80 then
            sfx(258, 6, 0, 8)
            sfx(258, 7, 8, 8)
            sel = 90
        elseif btnp(2) and sel == 90 then
            sfx(258, 6, 0, 8)
            sfx(258, 7, 8, 8)
            sel = 80
        end
    end

    if btnp(5) then
        music(-1)
        pck = true
    end
   

    if tm0 >= 3 then
        if sel == 80 then
            if pck then
           
                 
                 score, score1, score2, pck, lvs, tm0 =  0, 0, 0, false, 3, 0
                 spwntmr, hiscore, scene =  0, false, "game"
                 clck=300
                 lifescore=0
                 scorecount=1
            end
        elseif sel == 90 then
            full_reset()
        end
    end
    
end

-- Draw Game Over Scene
function draw_gameover()
    
     cls()
 local  col=flash_timer%30<15 and 9 or 25
    if hiscore then
    print("New Hi-Score!",camx+93,camy+41,5)
    print("New Hi-Score!",camx+93,camy+40,6)
    print(pad("" .. score, 7), camx + 107, camy + 53,21)
    print(pad("" .. score, 7), camx + 107, camy + 52,col)
    else
    print("Hi-Score:",camx+105,camy+41,5)
    print("Hi-Score:",camx+105,camy+40,6)
    print(pad("" .. hi, 7), camx + 107, camy + 53,21)
    print(pad("" .. hi, 7), camx + 107, camy + 52,6)
   end
    spr(77, camx + 95, sel)
    print("  SC         ".." Time "..clck.."                Stage "..cur_stge, camx , camy + 1, 7)
    print("            = "..ply.ammo, camx + 98, camy + 3, 7)
    print(pad("" .. score, 7), camx + 25, camy + 1)
    print("P = "..lvs, camx + 148, camy + 12, 7)
     if expert then
    spr(226,camx+232,camy+1)
    end

    for b = 1, bar do
        spr(110, camx + 24 + b * 4, camy + 9)
    end

    for h = 1, math.min(ply.vishth, 16) do
        spr(111, camx + 25 + h * 4, camy + 9)
    end

    for h = 1, math.ceil((visenmy_gameover), 16) do
        spr(127, camx + 25 + h * 4, camy + 12)
    end

    spr(wpnicn,camx+screen/2-2,camy+10)
    spr(shticn, camx + 203, camy + 11)
    rect(camx + 112, camy + 8, camx + 132, camy + 19, 8)
    print("GAME OVER", camx + 100, camy + 70, 6)
    print("Continue", camx + 105, camy + 80, 6)
    print("End", camx + 105, camy + 90, 6)
   
    spr(95, camx + 10, camy + 11)
    spr(77, camx + 146, camy + 4)
    if pck then rectfill(camx, camy, camx + screen, camy + screen, 0) end
end

--end cutscene
local scenetimer=0 
function update_end()
if deaths==0 then
deathmessage="You never died once!"
elseif deaths==1 then 
deathmessage="You only died once!"
elseif deaths==2 then
dethmessage="You only died twice!"
elseif deaths>2 and deaths<=100 then

deathmessage="You died "..deaths.." times."
elseif deaths>100 then
deathmessage="You died... "..deaths.." times!?"
end
scenetimer+=1
if scenetimer==1 then
add_castle(camx+129,camy+45)
--sfx(260)
end

if  expert then
if scenetimer==650  then 
add_text(10, 28, {
"Congratulations, Champion!",
"You've not just beaten Expert Mode!",
"you've shattered every limit ",
"and forged your legend."
})

end

if scenetimer==970  then
add_text(10, 28, {
"In a realm where only true", 
"icons dare to tread,",
"your skill has set you apart.", 
"Gamers will speak your", 
"name with reverence!",
})

end

if scenetimer==1270  then
add_text(10, 28, {
"Stories will be told...",
"Songs will be shared...",
"People will admire you.",
"People will LOVE you!"
})

end

if scenetimer==1570 then
add_text(8, 28, {
"You've faced the ultimate ", 
"challenge and emerged victorious.",
"Remember, you are not just a player...", 
 "~~~ ",
 
 "You are a gaming MASTER!"
           

})
end

if scenetimer==2000 then
add_text(15, 40, {
"     Programmed by:",
"       Turbochop "


})
end

if scenetimer==2400 then
add_text(15, 40, {
"     Pixel art by:",
"      Cephaccino "


})

end

if scenetimer==2900 then
add_text(10, 40, {
"     Special Thanks:",
"       RetroPup89 ",
" The Picotron Community"


})

end
if scenetimer==3200  then
add_text(10, 40, {
"And a very special thanks",
"        to you:"




})

end
if scenetimer==3230  then
add_text(32, 65, {

"  ~ " ..name.. " ~"




})

end

if scenetimer==3600  then
add_text(22, 40, {
"     THE END"




},true)

end

if scenetimer==3730  then
add_text(14, 55, {
"Thank you for playing!"




},true)

end

if scenetimer==3810  then
add_text(17, 68, {
"Final Score: "..pad("" .. score, 7),
""..deathmessage..""




},true)

end

end

if not expert then
if scenetimer==650  then 
add_text(10, 28, {
    "The darkness is vanquished,",
"its curse shattered.",
"The castle crumbles,",
"a relic of evil undone."
})

end

if scenetimer==970  then
add_text(10, 28, {
 "But is this the end?",
"Does true evil ever die?",
"Legends speak of his return,",
"when the world least expects."
})

end

if scenetimer==1270  then
add_text(10, 28, {
"The land is safe for now,",
"but shadows may yet stir.",
"Will you be ready,",
"when the darkness calls again?"
})

end

if scenetimer==1570 then
add_text(10, 28, {
"You have proven your courage,",
"but the challenge is not over.",
"Prepare for the ultimate test:",
"EXPERT MODE awaits!"

})
end

if scenetimer==2000 then
add_text(15, 40, {
"     Programmed by:",
"       Turbochop "


})
end

if scenetimer==2400 then
add_text(15, 40, {
"     Pixel art by:",
"      Cephaccino "


})

end

if scenetimer==2900 then
add_text(10, 40, {
"     Special Thanks:",
"       RetroPup89 ",
" The Picotron Community"


})

end
if scenetimer==3500  then
add_text(19, 59, {
"     THE END..."




},true)

end

if scenetimer==3600  then
add_text(17, 68, {
" Score: "..pad("" .. score, 7),
""..deathmessage..""




},true)

end

end
if scenetimer==3900 then
add_save_icon()
end
if scenetimer==4180 then
cur_stge=1
cur_flr=1
eft={}
if not expert then
expert_unlock()
end
spwntmr=0
music(5, 0, 15)
scene="game"
end
for ef in all(eft) do
ef:update()
end
end

function draw_end()
cls()
map(316,74,0,0)
for ef in all(eft) do
ef:draw()
end
--print(scenetimer,camx,camy,7)
if scenetimer>=4100 then
rectfill(camx, camy, camx+screen, camy+screen,0)
 end
--print(camx,camx+16,camy,7)
--print(camy,camx+32,camy,7)
end


:: weapons.lua
--[[pod_format="raw",created="2024-08-22 14:16:49",modified="2025-06-26 02:50:47",revision=43560]]
--weapons

function add_wpn(_x,_y)
x=_x
y=_y

	if (ply.wpn~=0) wpnout+=1
	if (ply.wpn==1) add_knf(x-4,y-4,ply.flp)
	if (ply.wpn==2) add_wtr(x-4,y)
	if (ply.wpn==3 and not ply.flp) add_brg(x,y-1,1.1,"right")
	if (ply.wpn==3 and ply.flp) add_brg(x-10,y-1,-1.1,"left")
	if ply.wpn==4 then
		if not ply.flp  then add_axe(x-6,y-8,1.2)

 		elseif  ply.flp  then add_axe(x-13,y-8,-1.2)


		end
	end
end


function add_knf(_x,_y,_flp)

add (wpn,{
x=_x,
y=_y+6,
h=16,
w=8,
dx=2,
sp=103,
flp=_flp,
tm0=0,
life=1,
dmg=true,
hit=1,
kill=0,


update=function(self)
self.x+=self.dx
self.tm0+=.2
if self.flp then self.dx=-2.5
else self.dx=2.5
end
if self.tm0<.21 then
sfx(305,6)
end

if tran or self.x<camx-20 or self.x>camx+screen or self.life<=0 then

wpncnt-=1
subwpn=false

del(wpn,self)

end

end,

draw=function(self)

 spr(self.sp,self.x,self.y+5,self.flp)

 end
 
 })

end

 

function add_wtr(_x,_y)

add (wpn,{

x=_x,
type="water",
y=_y,
dx=0,
dy=-1,
w=6,
h=12,
kill=0,

flp=not ply.flp,
frm=1,
tm0=0,
sp=81,
life=1,
snd=false,
dmg=true,
hit=.5,
bnstgl=false,

update=function(self)

 self.x+=self.dx
 self.y+=self.dy
 self.dy+=grav
 

 if collide_map(self,"down",0)  --self.snd==false 
then
self.dx=0 
self.dy=0 
 self.y-=4
 sfx(306,-1)

 add_brn(self.kill,self.x-2,self.y+1,self.bnstgl)
 del(wpn,self)


 end


if tran or self.y>=140 then 
wpncnt-=1
del(wpn,self)

end
  
 if not self.flp then 

 self.dx=-1
 else

 self.dx=1
 end
 
for other in all(act) do
    if other.knight and hit_weapon(
      self.x + (self.w / 4),   -- Bottle's starting X
      self.y + (self.h / 4),   -- Bottle's starting Y
      self.w - (self.w / 2),   -- Bottle's width
      self.h - (self.h / 2),   -- Bottle's height
      other.x + (other.w / 4),         -- Knight's starting X
      other.y + (other.h / 4),         -- Knight's starting Y
      other.w - (other.w / 2),         -- Knight's width
      other.h - (other.h / 2)          -- Knight's height
    ) then
      -- Halt horizontal movement
      self.dx =0
      
    end
  end
 
 
end,
draw=function(self)

 spr(self.sp,self.x,self.y,self.flp)

 end
 
 })

end

function add_brn(_kill,_x,_y,_bnstgl)

add (wpn,{

x=_x,
type="burn",
y=_y-6,
w=10,
h=25,
tm0=0,
tm1=0,
sp=122,
dmg=true,
hit=.5,
kill=_kill,
bnstgl=_bnstgl,

update=function(self)
 self.tm0+=.05
 self.tm1+=.1
 
 if self.sp>126 then 
 self.sp=122
 
 end
 
 if self.tm0>=.25 then
 self.sp+=1
 self.tm0=0
 
 end
 
 if tran or self.tm1>=12 then
 wpncnt-=1
 subwpn=false
 
 del(wpn,self)
 
 end



 
 
end,
draw=function(self)

 spr(self.sp,self.x+1,self.y+8)

 end
 
 })

end

function add_brg(_x,_y,_dx,_dir)

add (wpn,{
type="boomerang",
dir=_dir,
x=_x,
y=_y,
h=20,
w=16,
dx=_dx,
maxdx=1,
sp=94,
tm0=0,
tm1=0,
tm2=0,
rtn=false,
rtndx=.1,
dmg=true,
kill=0,
hit=2,
bnstgl=false,
update=function(self)
self.x+=self.dx
*1.5
self.tm0+=.01
self.tm1+=.3*self.dx
self.tm2+=.02

if self.dx>self.maxdx then
self.dx=self.maxdx
elseif self.dx<-self.maxdx then
self.dx=-self.maxdx
end

if self.tm2>=1.4 then
self.rtn=true
self.tm2=1.4

end
 if self.rtn then
 
 if self.dir=="right" then self.dx-=self.rtndx
elseif self.dir=="left" then self.dx+=self.rtndx

end
end

if (self.x>camx+screen-10 or self.x<camx) and self.rtn==false
then
self.rtn=true 
self.dx=-self.dx

end


if self.tm0>=.15 then

self.tm0=0
end

if self.tm0==.02 then

sfx(307,6)
end


if self.tm1>=1 then

self.tm1=0
self.sp+=1

end

if self.tm1<0 then

self.tm1=1
self.sp-=1

end


if self.sp>94 then self.sp=92


end

if self.sp<92 then self.sp=94

end

if tran or (self.x<camx-20 or self.x>camx+screen)
or (hit(self.x+4,self.y+5,ply.x-4,ply.y-4,ply.w,ply.h) and self.rtn) 
then

wpncnt-=1
subwpn=false
del (wpn,self)

end
end,
draw=function(self)

 spr(self.sp,self.x+4,self.y+4)
--rect(self.x,self.y,self.x+self.w,self.y+self.h,7)
 end
 
 })

end

function add_axe(_x,_y,_dx)

add (wpn,{
type="axe",
x=_x,
y=_y+4,
h=28,
w=16,
dx=_dx,
dy=-2.3,
sp=106,
flpx=false,
flpy=false,
tm0=0,
tm1=0,
frm=1,
dmg=true,
hit=1,
kill=0,
bnstgl=false,
update=function(self)
self.y+=self.dy
self.dy+=grav
self.x+=self.dx
self.tm0+=.01
self.tm1+=.3*self.dx



if self.tm0>=.15 then
self.tm0=0

end

if self.tm0==.05 then

 sfx(302,6)

end
if self.tm1>=1.4 then

self.tm1=0
self.frm+=1
elseif self.tm1<=0 then
self.tm1=1
self.frm-=1
end

if self.frm>=5 then

self.frm=1
elseif self.frm<1 then
self.frm=4

end

--fix  
if self.frm==1 then self.flpx=false self.flpy=false
elseif self.frm==2 then self.flpx=false self.flpy=true
elseif self.frm==3 then self.flpx=true self.flpy=true
elseif self.frm==4 then self.flpx=true self.flpy=false

end




if tran or (self.x<camx-20 or self.x>camx+screen) or self.y>140 then

wpncnt-=1
subwpn=false

del (wpn,self)

end
 
 
end,
draw=function(self)
-- print(tostring(self.weapon),self.x,self.y-16,7)
 spr(self.sp,self.x+4,self.y+10,self.flpx,self.flpy)

 end
 
 })

end



:: whip.lua
--[[pod_format="raw",created="2024-08-22 23:17:59",modified="2025-06-26 04:00:47",revision=41975]]
function add_whip(_x,_y)

add (whp,{

x=_x,
y=_y,
h=0,
w=0,
ox=8,
length=1,
oy=ply.oy,
flp=ply.flp,
frm=1,
tm0=0,
tm1=0,
sp=96,
sp1=nil,
sp2=nil,
snd=false,

update=function(self)
 self.x=ply.x

 self.w=36
 self.h=10
 self.y=ply.y+ply.oy+1
 if not pup then
 self.tm0+=.5
 if self.tm0==4 then
    self.frm+=1
    self.tm0=0
     
 end
 if ply.whp==2 then
 self.tm1+=.2
 end
 if self.tm1>=1 then self.tm1=0
 end
if self.frm==1 then
if ply.whp==0 then

self.sp= 96
elseif self.tm1>=.5 and ply.whp==2 then self.sp=120
else self.sp=97

end

end




	if self.frm==2 then
		if ply.whp==1 or ply.whp==2 and self.tm1<=.5 then
		self.sp=99
		elseif self.tm1>=.5 then self.sp=100
		else
		self.sp=98
		
		end
	end
if self.frm==3 and self.tm1<=.5 then
whpout=1
self.sp=nil
self.sp1=116+ply.whp
elseif self.frm==3 and self.tm1>=.5 then
self.sp=nil
self.sp1=119

end

 
--whip crack 

 if self.frm==2 and self.tm0>=.5 and not self.snd and stat(400+7,12)~=303 then 
 
 sfx(302,7)
 self.snd=true

 end

--offset if facing left 
 if ply.flp  then 
if self.frm==3 then 
if ply.whp<=1 then
  self.ox=16
  else 
  self.ox=24
end  
else  self.ox=8
end
 else self.ox=-8
 
end

 if not ply.atk 
 or (ply.hrt or ply.ded) or ply.thw or tran or ply.petrified
 then
 
 del(whp,self)
 whpout=0
 end
 
 
 end
end,
draw=function(self)
--hand sprite
 spr(self.sp,self.x+self.ox,self.y+1,self.flp)
--middle sprite
 spr(self.sp1,self.x-self.ox,self.y-1,self.flp)


 end
 })

end

:: .info.pod
b64$LS1bW3BvZCxhdXRob3I9IlR1cmJvY2hvcCwgQXJ0IGJ5IENlcGhhY2Npbm8iLGJic19pZD0i
cGljb3ZhbmlhLTI4OCIsY3JlYXRlZD0iMjAyNC0wOC0yMiAxNDoyODoxNSIsaWNvbj11c2VyZGF0
YSgidTgiLDE2LDE2LCIwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTA3MDEwNzAxMDcw
MTA3MDEwNzAxMDcwMTA3MDEwNzAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwZjBm
MGYwZjBmMGYwMTBmMGYwMTBmMGYwZjBmMGYwZjAxMDEwMTAxMGYwZjBmMDEwMTBmMGYwZjAxMDEw
MTAxMDExZTAxMDEwMTAxMGYwMTAxMGYwMTAxMDEwMTFlMDEwMTFlMWUwZTAxMDEwMTAxMDEwMTAx
MDEwZTFlMWUwMTAxMWUwZTFlMWUwMTAxMDEwMTAxMDExZTFlMGUxZTAxMDEwZTFlMWUxZTBlMDEw
MTAxMDEwZTFlMWUxZTBlMDEwMTFlMDEwMTBlMWUwMTAxMDEwMTFlMGUwMTAxMWUwMTAxMDEwZjBm
MDExZTFlMDEwMTFlMWUwMTBmMGYwMTAxMDEwZjBmMGYwZjAxMWUwMTAxMWUwMTBmMGYwZjBmMDEw
MTBmMGYwZjBmMGYwMTAxMDEwMTBmMGYwZjBmMGYwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAx
MDEwMTAxMDcwMTA3MDEwNzAxMDcwMTA3MDEwNzAxMDcwMTA3MDEwMTAxMDEwMTAxMDEwMTAxMDEw
MTAxMDEwMTAxMDEwMSIpLGxvd2NvbF9pY29uPWZhbHNlLG1vZGlmaWVkPSIyMDI1LTA3LTAxIDIz
OjIyOjQ2Iixub3Rlcz0iIixydW50aW1lPTE4LHNhbmRib3g9ImJicyIsdGl0bGU9IlBpY292YW5p
YSIsdmVyc2lvbj0iMS4zIix3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVhIzEiLHdvcmtz
cGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImdmeC8wLmdmeCIsd29ya3NwYWNlX2luZGV4PTJ9LHts
b2NhdGlvbj0iZ2Z4LzEuZ2Z4Iix3b3Jrc3BhY2VfaW5kZXg9Mn0se2xvY2F0aW9uPSJnZngvMi5n
ZngiLHdvcmtzcGFjZV9pbmRleD0yfSx7bG9jYXRpb249Im1hcC8wLm1hcCIsd29ya3NwYWNlX2lu
ZGV4PTN9LHtsb2NhdGlvbj0ic2Z4LzAuc2Z4Iix3b3Jrc3BhY2VfaW5kZXg9NH0se2xvY2F0aW9u
PSJzZngvMS5zZngiLHdvcmtzcGFjZV9pbmRleD00fX1dXQ==
:: [eoc]
