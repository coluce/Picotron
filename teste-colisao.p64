picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA2LTI3IDIyOjA4OjI0Iixtb2RpZmllZD0iMjAyNS0w
Ny0wNiAxODoxNjo1NiIscmV2aXNpb249ODYxXV1sejQAnQEAALAyAADzFHtbMF09e2JtcD1weHUA
QyAQEATw8CxmbGFncz0wLHBhbl94CADKeT0wLHpvb209OH0sMQDwMxwvEQA-EAAvESwjIB8QICMM
DxETMB8QMBMfEQNAHxBAAx8RQAMfEANADxFAEx8QE0AOIBMPHB4NEyB_Hd4dfiATDQwAUA5AEx4T
IwD-DwMeA0AbA0AeQAMbEzAeMBMLDCMgHiAjLCsAPgArHJwAHPABCA8fsA4IDtAO8DYIEAjwHAUA
nzYO0A4IDrAOCEwAHCT-GhoBHzEyABTyBArfGgr_GgneDxsODd4N-ioJ3g0JAD8K3gpLAA4PlgEF
DzEApwaNAd4zCBAIEAiACOAI4AgQlAEP4AElERBRABKAUwAfM1MALiIGODECHxyiADcDUQA-OPAG
TwAkL-DwMQCvDxMBAEFwCPAAAwAfC2cBOI8CCNAI0AjwBVMALhIESQAfAw0COBMK8QAfgFQALi-w
8DEA------------------------------------------------------------AFBtPTh9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA2LTI3IDIzOjI0OjI1Iixtb2RpZmllZD0iMjAyNS0w
Ny0wOSAyMjowMzowNCJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA2LTI3IDIyOjA4OjI0Iixtb2RpZmllZD0iMjAyNS0w
Ny0wOSAyMTo1MzozMiIscmV2aXNpb249ODExXV1sejQAcwEAAF4QAADwCHt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDMyAwBfIjAwMDEEABQfMwQAHB8xBAAYHzMEAGEPgAD-jR8xBAAQFzQMAA8EAAkfMwQA
AQ8gAAwOGAAPBAAjHzEcAAwPIAACDxgACAQEABc0DAAOBAAPSAATHzEgAAUPGAAMDxwABQ6YAA4s
AA8cABYPVAAkHzMsACgOOAAPVAAUDywANA84ABEeMRwADwQABw4sAA84ACofNBAADA_AAE0PBAAN
HzSAAGwPSAA5DlwBD0gAJA8AAaQfMcwAFB80gABYDwQAAg_AAHwfNIAAbB8zgADADmQCD4AAWx8z
gABIHzE4AAkPBAAwHzEcAAwfMRwADA8EAAUXNAwADwQADR8zBAABDiAADwQAQw_AAP--Eg8EAA0f
MwQAJB8xBAAN8QoiKSxoaWRkZW49ZmFsc2UscGFuX3g9LTY0CgDjeT0tOTYsdGlsZV9oPTEKABB3
CgCgem9vbT0wLjV9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA2LTI3IDIzOjI0OjI1Iixtb2RpZmllZD0iMjAyNS0w
Ny0wOSAyMjowMzowNCJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA2LTI3IDIyOjA4OjI0Iixtb2RpZmllZD0iMjAyNS0w
Ny0wNiAxODoxNjo1NiIscmV2aXNpb249NzM0XV1sejQAoAAAAAsKAAD-MHB4dQADKAAABAAED0AQ
Ag4AAaABIAKgDgAPEAAN8MoBAgNADw_QBAUGB0AMkAgJCgtADJAPDA8NDw4MQAzw-wEA6-8nqgEQ
Bg8gEAEgASAB8AACEAIOEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYOMAD-----
-70f-wEArM-ID0AADxBA--_w8P8BAP-qUP----8p
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA2LTI3IDIzOjI0OjI1Iixtb2RpZmllZD0iMjAyNS0w
Ny0wOSAyMjowMzowNCJdXQ==
:: main.lua
--[[pod_format="raw",created="2025-06-27 22:08:24",modified="2025-07-09 22:03:04",revision=929]]
include 'player.lua'
include 'user_interface.lua'
include 'mapa.lua'

function _init()
  player = Player:New()
  interface = UserInterface:New()
  mapa = Mapa:New()
end

function _update()
  local LPosX = player.x
  local LPosY = player.y
  
  player.DirectionUp = false 
  player.DirectionDown = false 
  player.DirectionLeft = false 
  player.DirectionRigth = false 

  if btn(0) then -- esquerda
    LPosX -= player.Speed
	 player.DirectionLeft = true
	 player.DirectionLast = 0
  end
  
  if btn(1) then -- direita
    LPosX += player.Speed
	 player.DirectionRigth = true
	 player.DirectionLast = 1	 
  end
  
  if btn(2) then -- cima
    LPosY -= player.Speed
	 player.DirectionUp = true
	 player.DirectionLast = 2	 
  end
  
  if btn(3) then -- baixo
    LPosY += player.Speed
	 player.DirectionDown = true
	 player.DirectionLast = 3	 
  end
  
  mapa:InCollision(LPosX, LPosY) 
   
  if 
    mapa.CanUp or mapa.CanDown 
    --(mapa.CanUp and DirectionUp) or 
    --(mapa.CanDown and DirectionDown)  
  then
    player.x = LPosX
  end
 
  if 
    mapa.CanLeft or mapa.CanRigth
    --(mapa.CanLeft and player.DirectionLeft) or 
    --(mapa.CanRigth and player.DirectionRigth)  
  then 
    player.y = LPosY     
  end  
 
end

function _draw()
  -- limpar a tela
  cls() 
  -- desenhar mapa  
  mapa:Draw()
  -- desenhar jogador
  player:Draw()
  -- desenhar gui
  interface:Draw()  
end
:: mapa.lua
--[[pod_format="raw",created="2025-06-30 00:35:37",modified="2025-07-09 21:59:40",revision=633]]
Mapa = {}
-- teste
function Mapa:New()
	local obj = {
	  TileCentralX = 0,
	  TileCentralY = 0,
	  TileCentralIndex =- 1,
	  TileUp =- 1,
	  TileUpLeft =- 1,	  
	  TileUpRigth =- 1,	  
	  TileLeft =- 1,	  
	  TileRigth =- 1,	  	  
	  TileDown =- 1,	  
	  TileDownLeft =- 1,	  
	  TileDownRigth =- 1,	  
     CanUp = true,
     CanDown = true,
     CanLeft = true,
     CanRigth = true,
     IsColliding = false
	}
	setmetatable(obj, self)
	self.__index = self
	return obj
	
end

function Mapa:Draw()
  map()
end

function Mapa:InCollision(APosX, APosY)

 -- buscar o tile atual
 self.TileCentralX = flr(APosX/16)
 self.TileCentralY = flr(APosY/16)
 self.TileCentralIndex = mget(self.TileCentralX, self.TileCentralY) or -1
 
 -- buscar os tiles que estao do lado do atual
 -- acima
 self.TileUp = mget(flr(APosX/16), flr(APosY / 16)) or -1
 -- nas laterais
 self.TileLeft  = mget(flr(APosX/16),            flr(APosY/16))        or -1
 self.TileRigth = mget(flr((APosX+1)/16) + 1, flr((APosY)/16)) or -1

 -- baixo
 if self.Direction == 3 then
  self.TileDown = mget(flr(APosX/16), flr((APosY + 16)/16) + 1) or -1
 else
  self.TileDown = mget(flr(APosX/16), flr(APosY/16) + 1) or -1 
 end
 
 -- verificar se pode movimentar para os lados
 self.CanUp    = fget(self.TileUp, 0) 
 self.CanDown  = fget(self.TileDown, 0) 
 self.CanLeft  = fget(self.TileLeft,  0)  
 self.CanRigth = fget(self.TileRigth, 0)

 self.IsColliding = false
 if (not self.CanLeft) or (not self.CanRigth) or (not self.CanUp) or (not self.CanDown) then
  self.IsColliding = true
 end
         
end
:: player.lua
--[[pod_format="raw",created="2025-06-28 16:17:54",modified="2025-07-09 21:24:47",revision=788]]
-- Definindo a "classe" Player
Player={}

function Player:New(x, y)
	local obj = {
		x = x or 120,
		y = y or 120,
		Speed = 1,
      SpriteId = 2,
      DirectionLast = 0,
      DirectionUp = false,
      DirectionDown = false,
      DirectionLeft = false,
      DirectionRigth = false
	}
	setmetatable(obj, self)
	self.__index = self
	return obj
end

-- Desenhando em tela
function Player:Draw()
  camera(self.x - 120, self.y - 120)
  
  if self.DirectionLeft then -- esquerda 
    if self.DirectionUp then
      spr(19, self.x, self.y)
    elseif self.DirectionDown then
      spr(17, self.x, self.y)
    else
      spr(9, self.x, self.y)      
    end
    return
  elseif self.DirectionRigth then -- direita
    if self.DirectionUp then
      spr(20, self.x, self.y)    
    elseif self.DirectionDown then
      spr(18, self.x, self.y)        
    else
      spr(10, self.x, self.y)       
    end 
    return
  elseif self.DirectionUp then -- cima
    if self.DirectionLeft then
      spr(19, self.x, self.y)
    elseif self.DirectionRigth then
      spr(20, self.x, self.y)
    else
      spr(11, self.x, self.y)
    end
    return
  else -- baixo
    if self.DirectionDown then
      spr(12, self.x, self.y)
    else
      -- caso esteja parado, desenha a partir da ultima posicao conhecida
      if self.DirectionLast == 0 then
        spr(9, self.x, self.y)
      elseif self.DirectionLast == 1 then
        spr(10, self.x, self.y) 
      elseif self.DirectionLast == 2 then
        spr(11, self.x, self.y)      
      else
        spr(12, self.x, self.y)      
      end
    end
  end  

end
:: user_interface.lua
--[[pod_format="raw",created="2025-06-28 16:38:30",modified="2025-07-09 22:00:46",revision=903]]
include 'player.lua'
include 'mapa.lua'

UserInterface = {
  BackgroundColor=1,
  FontColor=7,  
}

function UserInterface:New()
	local obj = {
	
	}
	setmetatable(obj, self)
	self.__index = self
	return obj
	
end

function UserInterface:Draw()
  --
  rectfill(
    player.x + 240, -- largura
    player.y - 100, -- altura
    player.x + 350, -- largura
    player.y + 140, -- altura
    self.BackgroundColor
  )

  -- borda
  rect(
    player.x - 110, 
    player.y - 100, 
    player.x + 230, 
    player.y + 140, 
    self.BackgroundColor
  )

 print("Posicao: ".. player.x .. "|".. player.y, player.x + 245, player.y - 95, self.FontColor)
 print("Sprite: ".. mapa.TileCentralX .. "|" .. mapa.TileCentralY, self.FontColor)

 print("mget: ".. mapa.TileCentralIndex, self.FontColor)
 spr(mapa.TileCentralIndex, player.x + 325, player.y - 80) 

 print("") 
 print("Tiles", 12)

 if mapa.CanUp then
   print("up " .. mapa.TileUp, 11)
 else
   print("up " .. mapa.TileUp, 8) 
 end
 spr(mapa.TileUp, player.x + 325, player.y - 40)
 
 if mapa.CanDown then
   print("down " .. mapa.TileDown, 11)
 else
   print("down " .. mapa.TileDown, 8) 
 end
 spr(mapa.TileDown, player.x + 325, player.y - 30)

 if mapa.CanLeft then
   print("left " .. mapa.TileLeft, 11)
 else
   print("left " .. mapa.TileLeft, 8) 
 end 
 spr(mapa.TileLeft, player.x + 325, player.y - 20)

 if mapa.CanRigth then
   print("rigth " .. mapa.TileRigth, 11)
 else
   print("rigth " .. mapa.TileRigth, 8) 
 end  
 spr(mapa.TileRigth, player.x + 325, player.y - 10)
    
 print("", 12)

 if mapa.IsColliding then
   print("hit", 8)
 else
   print("hit", 12) 
 end

 print("")
 print("direction", 12)
 if player.DirectionUp then
   print("up ", 11)
 else
   print("up ", 8)
 end
 if player.DirectionDown then
   print("down ", 11)
 else
   print("down ", 8)
 end
 if player.DirectionLeft then
   print("left ", 11)
 else
   print("left ", 8)
 end 
 if player.DirectionRigth then
   print("rigth ", 11)
 else
   print("rigth ", 8)
 end 
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA2LTI3IDIzOjEwOjA0Iixtb2RpZmllZD0iMjAyNS0w
Ny0wOSAyMjowMzowNCIscnVudGltZT0xOSx3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVh
IzU3Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJwbGF5ZXIubHVhIzEiLHdvcmtzcGFj
ZV9pbmRleD0xfSx7bG9jYXRpb249InVzZXJfaW50ZXJmYWNlLmx1YSM1MiIsd29ya3NwYWNlX2lu
ZGV4PTF9LHtsb2NhdGlvbj0ibWFwYS5sdWEjNDQiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRp
b249ImdmeC8wLmdmeCIsd29ya3NwYWNlX2luZGV4PTJ9LHtsb2NhdGlvbj0ibWFwLzAubWFwIix3
b3Jrc3BhY2VfaW5kZXg9M30se2xvY2F0aW9uPSJzZngvMC5zZngiLHdvcmtzcGFjZV9pbmRleD00
fX1dXQ==
:: [eoc]
